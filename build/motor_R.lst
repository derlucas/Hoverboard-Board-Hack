ARM GAS  /tmp/cc1joHbP.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"motor_R.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.mR_Low_CH1_ON,"ax",%progbits
  16              		.align	1
  17              		.global	mR_Low_CH1_ON
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	mR_Low_CH1_ON:
  24              	.LFB71:
  25              		.file 1 "./Src/motor_R.c"
   1:./Src/motor_R.c **** #include "motor_R.h"
   2:./Src/motor_R.c **** #include "stm32f1xx_hal.h"
   3:./Src/motor_R.c **** #include "ADC_R.h"
   4:./Src/motor_R.c **** 
   5:./Src/motor_R.c **** TIM_HandleTypeDef htim1;
   6:./Src/motor_R.c **** 
   7:./Src/motor_R.c **** #define PWL_MOTOR_RIGHT 25000                    //PWM
   8:./Src/motor_R.c **** volatile __IO struct MOTOR_Rdati motorR;
   9:./Src/motor_R.c **** 
  10:./Src/motor_R.c **** // PULBLIC
  11:./Src/motor_R.c **** void MotorR_init(void){
  12:./Src/motor_R.c ****   MX_TIM1_Init();
  13:./Src/motor_R.c ****   mR_HallSensor_init();
  14:./Src/motor_R.c ****   motorR.BLDCMotorL_count= 0;
  15:./Src/motor_R.c ****   motorR.BLDCMotorL_flag = 0; 
  16:./Src/motor_R.c ****   motorR.BLDCMotorL_velRAW = 0;
  17:./Src/motor_R.c ****   motorR.BLDCMotorL_deltavel = 0;
  18:./Src/motor_R.c ****   
  19:./Src/motor_R.c ****   MotorR_stop();
  20:./Src/motor_R.c **** }
  21:./Src/motor_R.c **** 
  22:./Src/motor_R.c **** void MotorR_start(void){
  23:./Src/motor_R.c ****   mR_PWM_Set_ChALL(0); 
  24:./Src/motor_R.c ****   motorR.BLDCMotorL_deltavel = 0;
  25:./Src/motor_R.c ****   motorR.BLDCMotorL_velRAW = 0;
  26:./Src/motor_R.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  27:./Src/motor_R.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);  
  28:./Src/motor_R.c ****   mR_PWM_Set_ChALL(0);
  29:./Src/motor_R.c ****   motorR.stop = 0;
  30:./Src/motor_R.c ****   mR_BLDCMotor();
  31:./Src/motor_R.c **** }
  32:./Src/motor_R.c **** 
  33:./Src/motor_R.c **** void MotorR_pwm(int16_t value_percent){
ARM GAS  /tmp/cc1joHbP.s 			page 2


  34:./Src/motor_R.c ****   static uint8_t last_motorR=0;
  35:./Src/motor_R.c ****   static uint8_t last_motorRStop=0;
  36:./Src/motor_R.c ****   
  37:./Src/motor_R.c ****   if(value_percent > 1000){
  38:./Src/motor_R.c ****     value_percent = 1000;
  39:./Src/motor_R.c ****   }
  40:./Src/motor_R.c ****   if(value_percent < -1000){
  41:./Src/motor_R.c ****     value_percent = -1000;
  42:./Src/motor_R.c ****   }
  43:./Src/motor_R.c ****   if(value_percent < 0){
  44:./Src/motor_R.c ****     value_percent = value_percent * -1;
  45:./Src/motor_R.c **** 
  46:./Src/motor_R.c ****     if(last_motorR==0){
  47:./Src/motor_R.c ****       mR_PWM_Set_ChALL(value_percent);
  48:./Src/motor_R.c ****     }
  49:./Src/motor_R.c ****     motorR.reverse = 1;
  50:./Src/motor_R.c ****     last_motorR = 1;
  51:./Src/motor_R.c ****   }else{
  52:./Src/motor_R.c ****     if(last_motorR==1){
  53:./Src/motor_R.c ****       mR_PWM_Set_ChALL(value_percent);
  54:./Src/motor_R.c ****     }
  55:./Src/motor_R.c ****      motorR.reverse = 0;
  56:./Src/motor_R.c ****      last_motorR = 0;
  57:./Src/motor_R.c ****   }
  58:./Src/motor_R.c ****   
  59:./Src/motor_R.c ****   if((value_percent >= -5)&&(value_percent <= 5)){ //da fare > e < soglie !!
  60:./Src/motor_R.c ****     motorR.stop = 1;    //ferma motore
  61:./Src/motor_R.c ****     last_motorRStop = 1;    
  62:./Src/motor_R.c ****   }else{
  63:./Src/motor_R.c ****     motorR.stop = 0;
  64:./Src/motor_R.c ****     if(last_motorRStop){
  65:./Src/motor_R.c ****         //riattiva
  66:./Src/motor_R.c ****         mR_BLDCMotor();
  67:./Src/motor_R.c ****     }
  68:./Src/motor_R.c ****     last_motorRStop = 0;    
  69:./Src/motor_R.c ****   }
  70:./Src/motor_R.c ****   
  71:./Src/motor_R.c ****   mR_PWM_Set_ChALL(value_percent);
  72:./Src/motor_R.c **** }
  73:./Src/motor_R.c **** 
  74:./Src/motor_R.c **** void MotorR_stop(void){
  75:./Src/motor_R.c ****   mR_PWM_Set_ChALL(0);
  76:./Src/motor_R.c ****   motorR.stop = 1;
  77:./Src/motor_R.c ****   mR_Low_CH1_OFF();
  78:./Src/motor_R.c ****   mR_Low_CH2_OFF();
  79:./Src/motor_R.c ****   mR_Low_CH3_OFF();
  80:./Src/motor_R.c ****   mR_AHigh__OFF();
  81:./Src/motor_R.c ****   mR_BHigh__OFF();
  82:./Src/motor_R.c ****   mR_CHigh__OFF();
  83:./Src/motor_R.c **** 
  84:./Src/motor_R.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  85:./Src/motor_R.c ****   HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
  86:./Src/motor_R.c ****   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
  87:./Src/motor_R.c ****   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
  88:./Src/motor_R.c ****   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);  
  89:./Src/motor_R.c ****     motorR.BLDCMotorL_count= 0;
  90:./Src/motor_R.c ****     motorR.BLDCMotorL_flag = 0;
ARM GAS  /tmp/cc1joHbP.s 			page 3


  91:./Src/motor_R.c **** }
  92:./Src/motor_R.c ****     
  93:./Src/motor_R.c **** // PRIVATE
  94:./Src/motor_R.c **** /* TIM1 init function */
  95:./Src/motor_R.c **** void MX_TIM1_Init(void)
  96:./Src/motor_R.c **** {
  97:./Src/motor_R.c ****   GPIO_InitTypeDef GPIO_InitStruct;
  98:./Src/motor_R.c ****   //TIM_MasterConfigTypeDef sMasterConfig;
  99:./Src/motor_R.c ****   TIM_OC_InitTypeDef sConfigOC;
 100:./Src/motor_R.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
 101:./Src/motor_R.c **** 
 102:./Src/motor_R.c ****    __HAL_RCC_TIM1_CLK_ENABLE();
 103:./Src/motor_R.c **** 
 104:./Src/motor_R.c ****   motorR.uwPeriodValue = (uint32_t) ((SystemCoreClock  / PWL_MOTOR_RIGHT) - 1); 
 105:./Src/motor_R.c **** /*  
 106:./Src/motor_R.c ****   htim1.Instance = TIM1;
 107:./Src/motor_R.c ****   htim1.Init.Prescaler = 0;
 108:./Src/motor_R.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP; //TIM_COUNTERMODE_CENTERALIGNED1
 109:./Src/motor_R.c ****   htim1.Init.Period = motorR.uwPeriodValue;
 110:./Src/motor_R.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 111:./Src/motor_R.c ****   htim1.Init.RepetitionCounter = 0;
 112:./Src/motor_R.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 113:./Src/motor_R.c ****   {
 114:./Src/motor_R.c ****     Error_Handler();
 115:./Src/motor_R.c ****   }
 116:./Src/motor_R.c **** 
 117:./Src/motor_R.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET; //TIM_TRGO_ENABLE; //TIM_TRGO_RESET;
 118:./Src/motor_R.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 119:./Src/motor_R.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 120:./Src/motor_R.c ****   {
 121:./Src/motor_R.c ****     Error_Handler();
 122:./Src/motor_R.c ****   }
 123:./Src/motor_R.c **** 
 124:./Src/motor_R.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 125:./Src/motor_R.c ****   sConfigOC.Pulse = 0;
 126:./Src/motor_R.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 127:./Src/motor_R.c ****   sConfigOC.OCNPolarity = TIM_OCPOLARITY_LOW;
 128:./Src/motor_R.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 129:./Src/motor_R.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 130:./Src/motor_R.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 131:./Src/motor_R.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 132:./Src/motor_R.c ****   {
 133:./Src/motor_R.c ****     Error_Handler();
 134:./Src/motor_R.c ****   }
 135:./Src/motor_R.c **** 
 136:./Src/motor_R.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 137:./Src/motor_R.c ****   {
 138:./Src/motor_R.c ****     Error_Handler();
 139:./Src/motor_R.c ****   }
 140:./Src/motor_R.c **** 
 141:./Src/motor_R.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 142:./Src/motor_R.c ****   {
 143:./Src/motor_R.c ****     Error_Handler();
 144:./Src/motor_R.c ****   }
 145:./Src/motor_R.c ****   
 146:./Src/motor_R.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 147:./Src/motor_R.c ****   {
ARM GAS  /tmp/cc1joHbP.s 			page 4


 148:./Src/motor_R.c ****     Error_Handler();
 149:./Src/motor_R.c ****   }
 150:./Src/motor_R.c ****   
 151:./Src/motor_R.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 152:./Src/motor_R.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 153:./Src/motor_R.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 154:./Src/motor_R.c ****   sBreakDeadTimeConfig.DeadTime = 80;
 155:./Src/motor_R.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE; //TIM_BREAK_ENABLE;
 156:./Src/motor_R.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 157:./Src/motor_R.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 158:./Src/motor_R.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 159:./Src/motor_R.c ****   {
 160:./Src/motor_R.c ****     Error_Handler();
 161:./Src/motor_R.c ****   }
 162:./Src/motor_R.c ****   
 163:./Src/motor_R.c ****   //CH1
 164:./Src/motor_R.c ****   htim1.Instance->CCER = htim1.Instance->CCER | 0x0008; //CC1NP = 1;
 165:./Src/motor_R.c ****   htim1.Instance->CCER = htim1.Instance->CCER & 0xFFFD; //cc1p = 0
 166:./Src/motor_R.c ****   //CH2   
 167:./Src/motor_R.c ****   htim1.Instance->CCER = htim1.Instance->CCER | 0x0080; //CC2NP = 1;
 168:./Src/motor_R.c ****   htim1.Instance->CCER = htim1.Instance->CCER & 0xFFDF; //cc2p = 0
 169:./Src/motor_R.c ****   //CH3     
 170:./Src/motor_R.c ****   htim1.Instance->CCER = htim1.Instance->CCER | 0x0800; //CC3NP = 1;
 171:./Src/motor_R.c ****   htim1.Instance->CCER = htim1.Instance->CCER & 0xFDFF; //cc3p = 0
 172:./Src/motor_R.c ****   
 173:./Src/motor_R.c ****  
 174:./Src/motor_R.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 175:./Src/motor_R.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();  
 176:./Src/motor_R.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 177:./Src/motor_R.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 178:./Src/motor_R.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;  
 179:./Src/motor_R.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 180:./Src/motor_R.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 181:./Src/motor_R.c ****   GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 182:./Src/motor_R.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 183:./Src/motor_R.c **** 
 184:./Src/motor_R.c ****   //Start PWM signals
 185:./Src/motor_R.c ****   //HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);      //CH1
 186:./Src/motor_R.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);      //CH1 
 187:./Src/motor_R.c ****   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);      //CH1N
 188:./Src/motor_R.c ****   mR_A__OFF();
 189:./Src/motor_R.c **** 
 190:./Src/motor_R.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);         //CH2
 191:./Src/motor_R.c ****   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);      //CH2N
 192:./Src/motor_R.c ****   mR_B__OFF();
 193:./Src/motor_R.c **** 
 194:./Src/motor_R.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);         //CH3
 195:./Src/motor_R.c ****   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);      //CH3N
 196:./Src/motor_R.c ****   mR_C__OFF();  
 197:./Src/motor_R.c **** 
 198:./Src/motor_R.c ****   HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);    //for interrupt
 199:./Src/motor_R.c **** 
 200:./Src/motor_R.c ****   */
 201:./Src/motor_R.c ****   
 202:./Src/motor_R.c ****   
 203:./Src/motor_R.c ****   //Test
 204:./Src/motor_R.c ****   
ARM GAS  /tmp/cc1joHbP.s 			page 5


 205:./Src/motor_R.c **** 
 206:./Src/motor_R.c ****   __HAL_RCC_TIM1_CLK_ENABLE();
 207:./Src/motor_R.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 208:./Src/motor_R.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 209:./Src/motor_R.c **** 
 210:./Src/motor_R.c ****   mR_Low_CH1_OFF();
 211:./Src/motor_R.c ****   mR_Low_CH2_OFF();
 212:./Src/motor_R.c ****   mR_Low_CH3_OFF();
 213:./Src/motor_R.c ****    //CH1N,CH2N,CH3N -- MANUAL mode --
 214:./Src/motor_R.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 215:./Src/motor_R.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 216:./Src/motor_R.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 217:./Src/motor_R.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
 218:./Src/motor_R.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 219:./Src/motor_R.c ****   GPIO_InitStruct.Pin = GPIO_PIN_14;
 220:./Src/motor_R.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 221:./Src/motor_R.c ****   GPIO_InitStruct.Pin = GPIO_PIN_15;
 222:./Src/motor_R.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 223:./Src/motor_R.c ****   
 224:./Src/motor_R.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 225:./Src/motor_R.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 226:./Src/motor_R.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 227:./Src/motor_R.c ****   //CH1,CH2,CH3
 228:./Src/motor_R.c ****   GPIO_InitStruct.Pin = GPIO_PIN_8;
 229:./Src/motor_R.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 230:./Src/motor_R.c ****   GPIO_InitStruct.Pin = GPIO_PIN_9;
 231:./Src/motor_R.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 232:./Src/motor_R.c ****   GPIO_InitStruct.Pin = GPIO_PIN_10;
 233:./Src/motor_R.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 234:./Src/motor_R.c **** 
 235:./Src/motor_R.c ****   htim1.Instance = TIM1;
 236:./Src/motor_R.c ****   htim1.Init.Prescaler         = 0;
 237:./Src/motor_R.c ****   htim1.Init.Period            = motorR.uwPeriodValue;
 238:./Src/motor_R.c ****   htim1.Init.ClockDivision     = 0;
 239:./Src/motor_R.c ****   htim1.Init.CounterMode       = TIM_COUNTERMODE_UP;
 240:./Src/motor_R.c ****   htim1.Init.RepetitionCounter = 0;
 241:./Src/motor_R.c ****   HAL_TIM_PWM_Init(&htim1); 
 242:./Src/motor_R.c ****   
 243:./Src/motor_R.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE; //TIM_AUTOMATICOUTPUT_ENABLE;
 244:./Src/motor_R.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW; // TIM_BREAKPOLARITY_HIGH; //
 245:./Src/motor_R.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 246:./Src/motor_R.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 247:./Src/motor_R.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE; //TIM_OSSI_DISABLE;
 248:./Src/motor_R.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE; //TIM_OSSR_DISABLE;  
 249:./Src/motor_R.c ****   sBreakDeadTimeConfig.DeadTime = 40;   //10;  
 250:./Src/motor_R.c ****   HAL_TIMEx_ConfigBreakDeadTime(&htim1,&sBreakDeadTimeConfig);
 251:./Src/motor_R.c ****   
 252:./Src/motor_R.c ****                                 
 253:./Src/motor_R.c ****   //##-2- Configure the PWM channels #########################################
 254:./Src/motor_R.c ****   // Common configuration for all channels 
 255:./Src/motor_R.c ****   sConfigOC.OCMode      = TIM_OCMODE_PWM1; // TIM_OCMODE_PWM2;
 256:./Src/motor_R.c ****   sConfigOC.OCFastMode  = TIM_OCFAST_DISABLE; // TIM_OCFAST_DISABLE;
 257:./Src/motor_R.c ****   sConfigOC.OCPolarity  = TIM_OCPOLARITY_HIGH; //TIM_OCPOLARITY_LOW;//TIM_OCPOLARITY_HIGH; //TIM_OC
 258:./Src/motor_R.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW; //TIM_OCNPOLARITY_HIGH; //TIM_OCNPOLARITY_HIGH;
 259:./Src/motor_R.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET; //TIM_OCIDLESTATE_SET; //TIM_OCNIDLESTATE_RESET; /
 260:./Src/motor_R.c ****   sConfigOC.OCNIdleState= TIM_OCNIDLESTATE_RESET; //TIM_OCNIDLESTATE_SET ; //TIM_OCIDLESTATE_SET; /
 261:./Src/motor_R.c ****   
ARM GAS  /tmp/cc1joHbP.s 			page 6


 262:./Src/motor_R.c ****   //Set the pulse value
 263:./Src/motor_R.c ****   sConfigOC.Pulse = 0;
 264:./Src/motor_R.c ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1); 
 265:./Src/motor_R.c ****   sConfigOC.Pulse = 0;
 266:./Src/motor_R.c ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 267:./Src/motor_R.c ****   sConfigOC.Pulse = 0;
 268:./Src/motor_R.c ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 269:./Src/motor_R.c **** 
 270:./Src/motor_R.c ****   //Start PWM signals
 271:./Src/motor_R.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);         //CH1
 272:./Src/motor_R.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);         //CH2
 273:./Src/motor_R.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);         //CH3
 274:./Src/motor_R.c ****   HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);         //CH4  
 275:./Src/motor_R.c ****   
 276:./Src/motor_R.c ****   mR_PWM_Set_ChALL(0);
 277:./Src/motor_R.c ****   
 278:./Src/motor_R.c ****   mR_Low_CH1_OFF();
 279:./Src/motor_R.c ****   mR_Low_CH2_OFF();
 280:./Src/motor_R.c ****   mR_Low_CH3_OFF();
 281:./Src/motor_R.c ****   mR_AHigh__OFF();
 282:./Src/motor_R.c ****   mR_BHigh__OFF();
 283:./Src/motor_R.c ****   mR_CHigh__OFF();
 284:./Src/motor_R.c ****   
 285:./Src/motor_R.c ****    motorR.stop = 1;
 286:./Src/motor_R.c ****   /* Peripheral interrupt init */
 287:./Src/motor_R.c ****   HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 1);
 288:./Src/motor_R.c ****   HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 289:./Src/motor_R.c ****   
 290:./Src/motor_R.c **** }
 291:./Src/motor_R.c **** 
 292:./Src/motor_R.c **** 
 293:./Src/motor_R.c **** void mR_Low_CH1_ON(void){  
  26              		.loc 1 293 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 294:./Src/motor_R.c ****   //Negato
 295:./Src/motor_R.c ****   GPIOB->BSRR = 0x20000000;
  31              		.loc 1 295 0
  32 0000 024B     		ldr	r3, .L2
  33 0002 4FF00052 		mov	r2, #536870912
  34 0006 1A61     		str	r2, [r3, #16]
 296:./Src/motor_R.c **** }
  35              		.loc 1 296 0
  36 0008 7047     		bx	lr
  37              	.L3:
  38 000a 00BF     		.align	2
  39              	.L2:
  40 000c 000C0140 		.word	1073810432
  41              		.cfi_endproc
  42              	.LFE71:
  44              		.section	.text.mR_Low_CH1_OFF,"ax",%progbits
  45              		.align	1
  46              		.global	mR_Low_CH1_OFF
  47              		.syntax unified
  48              		.thumb
ARM GAS  /tmp/cc1joHbP.s 			page 7


  49              		.thumb_func
  50              		.fpu softvfp
  52              	mR_Low_CH1_OFF:
  53              	.LFB72:
 297:./Src/motor_R.c **** void mR_Low_CH1_OFF(void){
  54              		.loc 1 297 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
 298:./Src/motor_R.c ****   GPIOB->BSRR = GPIO_PIN_13;
  59              		.loc 1 298 0
  60 0000 024B     		ldr	r3, .L5
  61 0002 4FF40052 		mov	r2, #8192
  62 0006 1A61     		str	r2, [r3, #16]
 299:./Src/motor_R.c **** }
  63              		.loc 1 299 0
  64 0008 7047     		bx	lr
  65              	.L6:
  66 000a 00BF     		.align	2
  67              	.L5:
  68 000c 000C0140 		.word	1073810432
  69              		.cfi_endproc
  70              	.LFE72:
  72              		.section	.text.mR_Low_CH2_ON,"ax",%progbits
  73              		.align	1
  74              		.global	mR_Low_CH2_ON
  75              		.syntax unified
  76              		.thumb
  77              		.thumb_func
  78              		.fpu softvfp
  80              	mR_Low_CH2_ON:
  81              	.LFB73:
 300:./Src/motor_R.c **** void mR_Low_CH2_ON(void){  
  82              		.loc 1 300 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 0
  85              		@ frame_needed = 0, uses_anonymous_args = 0
  86              		@ link register save eliminated.
 301:./Src/motor_R.c ****   //Negato
 302:./Src/motor_R.c ****   GPIOB->BSRR = 0x40000000;
  87              		.loc 1 302 0
  88 0000 024B     		ldr	r3, .L8
  89 0002 4FF08042 		mov	r2, #1073741824
  90 0006 1A61     		str	r2, [r3, #16]
 303:./Src/motor_R.c **** }
  91              		.loc 1 303 0
  92 0008 7047     		bx	lr
  93              	.L9:
  94 000a 00BF     		.align	2
  95              	.L8:
  96 000c 000C0140 		.word	1073810432
  97              		.cfi_endproc
  98              	.LFE73:
 100              		.section	.text.mR_Low_CH2_OFF,"ax",%progbits
 101              		.align	1
 102              		.global	mR_Low_CH2_OFF
ARM GAS  /tmp/cc1joHbP.s 			page 8


 103              		.syntax unified
 104              		.thumb
 105              		.thumb_func
 106              		.fpu softvfp
 108              	mR_Low_CH2_OFF:
 109              	.LFB74:
 304:./Src/motor_R.c **** void mR_Low_CH2_OFF(void){
 110              		.loc 1 304 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 305:./Src/motor_R.c ****   GPIOB->BSRR = GPIO_PIN_14;
 115              		.loc 1 305 0
 116 0000 024B     		ldr	r3, .L11
 117 0002 4FF48042 		mov	r2, #16384
 118 0006 1A61     		str	r2, [r3, #16]
 306:./Src/motor_R.c **** }
 119              		.loc 1 306 0
 120 0008 7047     		bx	lr
 121              	.L12:
 122 000a 00BF     		.align	2
 123              	.L11:
 124 000c 000C0140 		.word	1073810432
 125              		.cfi_endproc
 126              	.LFE74:
 128              		.section	.text.mR_Low_CH3_ON,"ax",%progbits
 129              		.align	1
 130              		.global	mR_Low_CH3_ON
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 134              		.fpu softvfp
 136              	mR_Low_CH3_ON:
 137              	.LFB75:
 307:./Src/motor_R.c **** void mR_Low_CH3_ON(void){  
 138              		.loc 1 307 0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142              		@ link register save eliminated.
 308:./Src/motor_R.c ****   //Negato
 309:./Src/motor_R.c ****   GPIOB->BSRR = 0x80000000;  
 143              		.loc 1 309 0
 144 0000 024B     		ldr	r3, .L14
 145 0002 4FF00042 		mov	r2, #-2147483648
 146 0006 1A61     		str	r2, [r3, #16]
 310:./Src/motor_R.c **** }
 147              		.loc 1 310 0
 148 0008 7047     		bx	lr
 149              	.L15:
 150 000a 00BF     		.align	2
 151              	.L14:
 152 000c 000C0140 		.word	1073810432
 153              		.cfi_endproc
 154              	.LFE75:
 156              		.section	.text.mR_Low_CH3_OFF,"ax",%progbits
ARM GAS  /tmp/cc1joHbP.s 			page 9


 157              		.align	1
 158              		.global	mR_Low_CH3_OFF
 159              		.syntax unified
 160              		.thumb
 161              		.thumb_func
 162              		.fpu softvfp
 164              	mR_Low_CH3_OFF:
 165              	.LFB76:
 311:./Src/motor_R.c **** void mR_Low_CH3_OFF(void){
 166              		.loc 1 311 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170              		@ link register save eliminated.
 312:./Src/motor_R.c ****   GPIOB->BSRR = GPIO_PIN_15;
 171              		.loc 1 312 0
 172 0000 024B     		ldr	r3, .L17
 173 0002 4FF40042 		mov	r2, #32768
 174 0006 1A61     		str	r2, [r3, #16]
 313:./Src/motor_R.c **** }
 175              		.loc 1 313 0
 176 0008 7047     		bx	lr
 177              	.L18:
 178 000a 00BF     		.align	2
 179              	.L17:
 180 000c 000C0140 		.word	1073810432
 181              		.cfi_endproc
 182              	.LFE76:
 184              		.section	.text.mR_HallSensor_init,"ax",%progbits
 185              		.align	1
 186              		.global	mR_HallSensor_init
 187              		.syntax unified
 188              		.thumb
 189              		.thumb_func
 190              		.fpu softvfp
 192              	mR_HallSensor_init:
 193              	.LFB77:
 314:./Src/motor_R.c **** 
 315:./Src/motor_R.c **** void mR_HallSensor_init(void){
 194              		.loc 1 315 0
 195              		.cfi_startproc
 196              		@ args = 0, pretend = 0, frame = 24
 197              		@ frame_needed = 0, uses_anonymous_args = 0
 198 0000 10B5     		push	{r4, lr}
 199              	.LCFI0:
 200              		.cfi_def_cfa_offset 8
 201              		.cfi_offset 4, -8
 202              		.cfi_offset 14, -4
 203 0002 86B0     		sub	sp, sp, #24
 204              	.LCFI1:
 205              		.cfi_def_cfa_offset 32
 206              	.LBB6:
 316:./Src/motor_R.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 317:./Src/motor_R.c **** 
 318:./Src/motor_R.c ****   /* GPIO Ports Clock Enable */
 319:./Src/motor_R.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 207              		.loc 1 319 0
ARM GAS  /tmp/cc1joHbP.s 			page 10


 208 0004 104B     		ldr	r3, .L21
 209 0006 9A69     		ldr	r2, [r3, #24]
 210 0008 42F01002 		orr	r2, r2, #16
 211 000c 9A61     		str	r2, [r3, #24]
 212 000e 9B69     		ldr	r3, [r3, #24]
 213 0010 03F01003 		and	r3, r3, #16
 214 0014 0193     		str	r3, [sp, #4]
 215 0016 019B     		ldr	r3, [sp, #4]
 216              	.LBE6:
 320:./Src/motor_R.c **** 
 321:./Src/motor_R.c ****   /*Configure GPIO pins : HALL_RIGHT_A_Pin HALL_RIGHT_B_Pin HALL_RIGHT_C_Pin */
 322:./Src/motor_R.c ****   GPIO_InitStruct.Pin = HALL_RIGHT_A_Pin|HALL_RIGHT_B_Pin|HALL_RIGHT_C_Pin;
 217              		.loc 1 322 0
 218 0018 4FF4E053 		mov	r3, #7168
 219 001c 0293     		str	r3, [sp, #8]
 323:./Src/motor_R.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 220              		.loc 1 323 0
 221 001e 0B4B     		ldr	r3, .L21+4
 222 0020 0393     		str	r3, [sp, #12]
 324:./Src/motor_R.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;  
 223              		.loc 1 324 0
 224 0022 0323     		movs	r3, #3
 225 0024 0593     		str	r3, [sp, #20]
 325:./Src/motor_R.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 226              		.loc 1 325 0
 227 0026 0024     		movs	r4, #0
 228 0028 0494     		str	r4, [sp, #16]
 326:./Src/motor_R.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 229              		.loc 1 326 0
 230 002a 02A9     		add	r1, sp, #8
 231 002c 0848     		ldr	r0, .L21+8
 232 002e FFF7FEFF 		bl	HAL_GPIO_Init
 233              	.LVL0:
 327:./Src/motor_R.c **** 
 328:./Src/motor_R.c **** 
 329:./Src/motor_R.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 234              		.loc 1 329 0
 235 0032 2246     		mov	r2, r4
 236 0034 2146     		mov	r1, r4
 237 0036 2820     		movs	r0, #40
 238 0038 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 239              	.LVL1:
 330:./Src/motor_R.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 240              		.loc 1 330 0
 241 003c 2820     		movs	r0, #40
 242 003e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 243              	.LVL2:
 331:./Src/motor_R.c **** }
 244              		.loc 1 331 0
 245 0042 06B0     		add	sp, sp, #24
 246              	.LCFI2:
 247              		.cfi_def_cfa_offset 8
 248              		@ sp needed
 249 0044 10BD     		pop	{r4, pc}
 250              	.L22:
 251 0046 00BF     		.align	2
 252              	.L21:
ARM GAS  /tmp/cc1joHbP.s 			page 11


 253 0048 00100240 		.word	1073876992
 254 004c 00003110 		.word	271646720
 255 0050 00100140 		.word	1073811456
 256              		.cfi_endproc
 257              	.LFE77:
 259              		.section	.text.mR_AHigh__ON,"ax",%progbits
 260              		.align	1
 261              		.global	mR_AHigh__ON
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 265              		.fpu softvfp
 267              	mR_AHigh__ON:
 268              	.LFB78:
 332:./Src/motor_R.c **** 
 333:./Src/motor_R.c **** void mR_AHigh__ON(void){
 269              		.loc 1 333 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273              		@ link register save eliminated.
 334:./Src/motor_R.c ****   htim1.Instance->CCER = htim1.Instance->CCER | 0x0001;  //mR_AHigh__ON(); --> CC1E = 1
 274              		.loc 1 334 0
 275 0000 034B     		ldr	r3, .L24
 276 0002 1A68     		ldr	r2, [r3]
 277 0004 136A     		ldr	r3, [r2, #32]
 278 0006 43F00103 		orr	r3, r3, #1
 279 000a 1362     		str	r3, [r2, #32]
 335:./Src/motor_R.c **** }
 280              		.loc 1 335 0
 281 000c 7047     		bx	lr
 282              	.L25:
 283 000e 00BF     		.align	2
 284              	.L24:
 285 0010 00000000 		.word	htim1
 286              		.cfi_endproc
 287              	.LFE78:
 289              		.section	.text.mR_AHigh__OFF,"ax",%progbits
 290              		.align	1
 291              		.global	mR_AHigh__OFF
 292              		.syntax unified
 293              		.thumb
 294              		.thumb_func
 295              		.fpu softvfp
 297              	mR_AHigh__OFF:
 298              	.LFB79:
 336:./Src/motor_R.c **** void mR_AHigh__OFF(void){
 299              		.loc 1 336 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 0
 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303              		@ link register save eliminated.
 337:./Src/motor_R.c ****   htim1.Instance->CCER = htim1.Instance->CCER & 0xFFFE;  //mR_AHigh__ON(); --> CC1E = 0
 304              		.loc 1 337 0
 305 0000 044B     		ldr	r3, .L27
 306 0002 1A68     		ldr	r2, [r3]
 307 0004 136A     		ldr	r3, [r2, #32]
ARM GAS  /tmp/cc1joHbP.s 			page 12


 308 0006 23F00103 		bic	r3, r3, #1
 309 000a 1B04     		lsls	r3, r3, #16
 310 000c 1B0C     		lsrs	r3, r3, #16
 311 000e 1362     		str	r3, [r2, #32]
 338:./Src/motor_R.c **** }
 312              		.loc 1 338 0
 313 0010 7047     		bx	lr
 314              	.L28:
 315 0012 00BF     		.align	2
 316              	.L27:
 317 0014 00000000 		.word	htim1
 318              		.cfi_endproc
 319              	.LFE79:
 321              		.section	.text.mR_BHigh__ON,"ax",%progbits
 322              		.align	1
 323              		.global	mR_BHigh__ON
 324              		.syntax unified
 325              		.thumb
 326              		.thumb_func
 327              		.fpu softvfp
 329              	mR_BHigh__ON:
 330              	.LFB80:
 339:./Src/motor_R.c **** void mR_BHigh__ON(void){
 331              		.loc 1 339 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335              		@ link register save eliminated.
 340:./Src/motor_R.c ****   htim1.Instance->CCER = htim1.Instance->CCER | 0x0010;  //--> CC2E = 1
 336              		.loc 1 340 0
 337 0000 034B     		ldr	r3, .L30
 338 0002 1A68     		ldr	r2, [r3]
 339 0004 136A     		ldr	r3, [r2, #32]
 340 0006 43F01003 		orr	r3, r3, #16
 341 000a 1362     		str	r3, [r2, #32]
 341:./Src/motor_R.c **** }
 342              		.loc 1 341 0
 343 000c 7047     		bx	lr
 344              	.L31:
 345 000e 00BF     		.align	2
 346              	.L30:
 347 0010 00000000 		.word	htim1
 348              		.cfi_endproc
 349              	.LFE80:
 351              		.section	.text.mR_BHigh__OFF,"ax",%progbits
 352              		.align	1
 353              		.global	mR_BHigh__OFF
 354              		.syntax unified
 355              		.thumb
 356              		.thumb_func
 357              		.fpu softvfp
 359              	mR_BHigh__OFF:
 360              	.LFB81:
 342:./Src/motor_R.c **** void mR_BHigh__OFF(void){
 361              		.loc 1 342 0
 362              		.cfi_startproc
 363              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc1joHbP.s 			page 13


 364              		@ frame_needed = 0, uses_anonymous_args = 0
 365              		@ link register save eliminated.
 343:./Src/motor_R.c ****   htim1.Instance->CCER = htim1.Instance->CCER & 0xFFEF;  //--> CC2E = 0
 366              		.loc 1 343 0
 367 0000 044B     		ldr	r3, .L33
 368 0002 1A68     		ldr	r2, [r3]
 369 0004 136A     		ldr	r3, [r2, #32]
 370 0006 23F01003 		bic	r3, r3, #16
 371 000a 1B04     		lsls	r3, r3, #16
 372 000c 1B0C     		lsrs	r3, r3, #16
 373 000e 1362     		str	r3, [r2, #32]
 344:./Src/motor_R.c **** }
 374              		.loc 1 344 0
 375 0010 7047     		bx	lr
 376              	.L34:
 377 0012 00BF     		.align	2
 378              	.L33:
 379 0014 00000000 		.word	htim1
 380              		.cfi_endproc
 381              	.LFE81:
 383              		.section	.text.mR_CHigh__ON,"ax",%progbits
 384              		.align	1
 385              		.global	mR_CHigh__ON
 386              		.syntax unified
 387              		.thumb
 388              		.thumb_func
 389              		.fpu softvfp
 391              	mR_CHigh__ON:
 392              	.LFB82:
 345:./Src/motor_R.c **** void mR_CHigh__ON(void){
 393              		.loc 1 345 0
 394              		.cfi_startproc
 395              		@ args = 0, pretend = 0, frame = 0
 396              		@ frame_needed = 0, uses_anonymous_args = 0
 397              		@ link register save eliminated.
 346:./Src/motor_R.c ****   htim1.Instance->CCER = htim1.Instance->CCER | 0x0100;  //--> CC3E = 1
 398              		.loc 1 346 0
 399 0000 034B     		ldr	r3, .L36
 400 0002 1A68     		ldr	r2, [r3]
 401 0004 136A     		ldr	r3, [r2, #32]
 402 0006 43F48073 		orr	r3, r3, #256
 403 000a 1362     		str	r3, [r2, #32]
 347:./Src/motor_R.c **** }
 404              		.loc 1 347 0
 405 000c 7047     		bx	lr
 406              	.L37:
 407 000e 00BF     		.align	2
 408              	.L36:
 409 0010 00000000 		.word	htim1
 410              		.cfi_endproc
 411              	.LFE82:
 413              		.section	.text.mR_CHigh__OFF,"ax",%progbits
 414              		.align	1
 415              		.global	mR_CHigh__OFF
 416              		.syntax unified
 417              		.thumb
 418              		.thumb_func
ARM GAS  /tmp/cc1joHbP.s 			page 14


 419              		.fpu softvfp
 421              	mR_CHigh__OFF:
 422              	.LFB83:
 348:./Src/motor_R.c **** void mR_CHigh__OFF(void){
 423              		.loc 1 348 0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 0
 426              		@ frame_needed = 0, uses_anonymous_args = 0
 427              		@ link register save eliminated.
 349:./Src/motor_R.c ****   htim1.Instance->CCER = htim1.Instance->CCER & 0xFEFF;  //--> CC2E = 0
 428              		.loc 1 349 0
 429 0000 044B     		ldr	r3, .L39
 430 0002 1A68     		ldr	r2, [r3]
 431 0004 136A     		ldr	r3, [r2, #32]
 432 0006 23F48073 		bic	r3, r3, #256
 433 000a 1B04     		lsls	r3, r3, #16
 434 000c 1B0C     		lsrs	r3, r3, #16
 435 000e 1362     		str	r3, [r2, #32]
 350:./Src/motor_R.c **** }
 436              		.loc 1 350 0
 437 0010 7047     		bx	lr
 438              	.L40:
 439 0012 00BF     		.align	2
 440              	.L39:
 441 0014 00000000 		.word	htim1
 442              		.cfi_endproc
 443              	.LFE83:
 445              		.section	.text.mR_PWM_Set_Ch1,"ax",%progbits
 446              		.align	1
 447              		.global	mR_PWM_Set_Ch1
 448              		.syntax unified
 449              		.thumb
 450              		.thumb_func
 451              		.fpu softvfp
 453              	mR_PWM_Set_Ch1:
 454              	.LFB84:
 351:./Src/motor_R.c **** 
 352:./Src/motor_R.c **** 
 353:./Src/motor_R.c **** void mR_PWM_Set_Ch1(uint16_t value){
 455              		.loc 1 353 0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 459              		@ link register save eliminated.
 460              	.LVL3:
 354:./Src/motor_R.c ****   uint32_t vpwm;
 355:./Src/motor_R.c ****   vpwm = (uint32_t)(motorR.uwPeriodValue*value/1000);
 461              		.loc 1 355 0
 462 0000 054B     		ldr	r3, .L42
 463 0002 1B68     		ldr	r3, [r3]
 464 0004 03FB00F0 		mul	r0, r3, r0
 465              	.LVL4:
 466 0008 044B     		ldr	r3, .L42+4
 467 000a A3FB0030 		umull	r3, r0, r3, r0
 468 000e 8009     		lsrs	r0, r0, #6
 469              	.LVL5:
 356:./Src/motor_R.c ****   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,vpwm);
ARM GAS  /tmp/cc1joHbP.s 			page 15


 470              		.loc 1 356 0
 471 0010 034B     		ldr	r3, .L42+8
 472 0012 1B68     		ldr	r3, [r3]
 473 0014 5863     		str	r0, [r3, #52]
 357:./Src/motor_R.c **** }
 474              		.loc 1 357 0
 475 0016 7047     		bx	lr
 476              	.L43:
 477              		.align	2
 478              	.L42:
 479 0018 00000000 		.word	motorR
 480 001c D34D6210 		.word	274877907
 481 0020 00000000 		.word	htim1
 482              		.cfi_endproc
 483              	.LFE84:
 485              		.section	.text.mR_PWM_Set_Ch2,"ax",%progbits
 486              		.align	1
 487              		.global	mR_PWM_Set_Ch2
 488              		.syntax unified
 489              		.thumb
 490              		.thumb_func
 491              		.fpu softvfp
 493              	mR_PWM_Set_Ch2:
 494              	.LFB85:
 358:./Src/motor_R.c **** void mR_PWM_Set_Ch2(uint16_t value){
 495              		.loc 1 358 0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 0
 498              		@ frame_needed = 0, uses_anonymous_args = 0
 499              		@ link register save eliminated.
 500              	.LVL6:
 359:./Src/motor_R.c ****   uint32_t vpwm;
 360:./Src/motor_R.c ****   vpwm = (uint32_t)(motorR.uwPeriodValue*value/1000);
 501              		.loc 1 360 0
 502 0000 054B     		ldr	r3, .L45
 503 0002 1B68     		ldr	r3, [r3]
 504 0004 03FB00F0 		mul	r0, r3, r0
 505              	.LVL7:
 506 0008 044B     		ldr	r3, .L45+4
 507 000a A3FB0030 		umull	r3, r0, r3, r0
 508 000e 8009     		lsrs	r0, r0, #6
 509              	.LVL8:
 361:./Src/motor_R.c ****   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,vpwm);
 510              		.loc 1 361 0
 511 0010 034B     		ldr	r3, .L45+8
 512 0012 1B68     		ldr	r3, [r3]
 513 0014 9863     		str	r0, [r3, #56]
 362:./Src/motor_R.c **** }
 514              		.loc 1 362 0
 515 0016 7047     		bx	lr
 516              	.L46:
 517              		.align	2
 518              	.L45:
 519 0018 00000000 		.word	motorR
 520 001c D34D6210 		.word	274877907
 521 0020 00000000 		.word	htim1
 522              		.cfi_endproc
ARM GAS  /tmp/cc1joHbP.s 			page 16


 523              	.LFE85:
 525              		.section	.text.mR_PWM_Set_Ch3,"ax",%progbits
 526              		.align	1
 527              		.global	mR_PWM_Set_Ch3
 528              		.syntax unified
 529              		.thumb
 530              		.thumb_func
 531              		.fpu softvfp
 533              	mR_PWM_Set_Ch3:
 534              	.LFB86:
 363:./Src/motor_R.c **** void mR_PWM_Set_Ch3(uint16_t value){
 535              		.loc 1 363 0
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 0
 538              		@ frame_needed = 0, uses_anonymous_args = 0
 539              		@ link register save eliminated.
 540              	.LVL9:
 364:./Src/motor_R.c ****   uint32_t vpwm;
 365:./Src/motor_R.c ****   vpwm = (uint32_t)(motorR.uwPeriodValue*value/1000);
 541              		.loc 1 365 0
 542 0000 054B     		ldr	r3, .L48
 543 0002 1B68     		ldr	r3, [r3]
 544 0004 03FB00F0 		mul	r0, r3, r0
 545              	.LVL10:
 546 0008 044B     		ldr	r3, .L48+4
 547 000a A3FB0030 		umull	r3, r0, r3, r0
 548 000e 8009     		lsrs	r0, r0, #6
 549              	.LVL11:
 366:./Src/motor_R.c ****   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,vpwm);
 550              		.loc 1 366 0
 551 0010 034B     		ldr	r3, .L48+8
 552 0012 1B68     		ldr	r3, [r3]
 553 0014 D863     		str	r0, [r3, #60]
 367:./Src/motor_R.c **** }
 554              		.loc 1 367 0
 555 0016 7047     		bx	lr
 556              	.L49:
 557              		.align	2
 558              	.L48:
 559 0018 00000000 		.word	motorR
 560 001c D34D6210 		.word	274877907
 561 0020 00000000 		.word	htim1
 562              		.cfi_endproc
 563              	.LFE86:
 565              		.section	.text.mR_PWM_Set_ChALL,"ax",%progbits
 566              		.align	1
 567              		.global	mR_PWM_Set_ChALL
 568              		.syntax unified
 569              		.thumb
 570              		.thumb_func
 571              		.fpu softvfp
 573              	mR_PWM_Set_ChALL:
 574              	.LFB87:
 368:./Src/motor_R.c **** void mR_PWM_Set_ChALL(uint16_t value){
 575              		.loc 1 368 0
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc1joHbP.s 			page 17


 578              		@ frame_needed = 0, uses_anonymous_args = 0
 579              		@ link register save eliminated.
 580              	.LVL12:
 369:./Src/motor_R.c ****   uint32_t vpwm;
 370:./Src/motor_R.c ****   vpwm = (uint32_t)(motorR.uwPeriodValue*value/1000);
 581              		.loc 1 370 0
 582 0000 064B     		ldr	r3, .L51
 583 0002 1B68     		ldr	r3, [r3]
 584 0004 03FB00F0 		mul	r0, r3, r0
 585              	.LVL13:
 586 0008 054B     		ldr	r3, .L51+4
 587 000a A3FB0030 		umull	r3, r0, r3, r0
 588 000e 8009     		lsrs	r0, r0, #6
 589              	.LVL14:
 371:./Src/motor_R.c ****   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,vpwm);
 590              		.loc 1 371 0
 591 0010 044B     		ldr	r3, .L51+8
 592 0012 1B68     		ldr	r3, [r3]
 593 0014 5863     		str	r0, [r3, #52]
 372:./Src/motor_R.c ****   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,vpwm);
 594              		.loc 1 372 0
 595 0016 9863     		str	r0, [r3, #56]
 373:./Src/motor_R.c ****   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,vpwm);  
 596              		.loc 1 373 0
 597 0018 D863     		str	r0, [r3, #60]
 374:./Src/motor_R.c **** }
 598              		.loc 1 374 0
 599 001a 7047     		bx	lr
 600              	.L52:
 601              		.align	2
 602              	.L51:
 603 001c 00000000 		.word	motorR
 604 0020 D34D6210 		.word	274877907
 605 0024 00000000 		.word	htim1
 606              		.cfi_endproc
 607              	.LFE87:
 609              		.section	.text.MotorR_stop,"ax",%progbits
 610              		.align	1
 611              		.global	MotorR_stop
 612              		.syntax unified
 613              		.thumb
 614              		.thumb_func
 615              		.fpu softvfp
 617              	MotorR_stop:
 618              	.LFB69:
  74:./Src/motor_R.c ****   mR_PWM_Set_ChALL(0);
 619              		.loc 1 74 0
 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 0
 622              		@ frame_needed = 0, uses_anonymous_args = 0
 623 0000 10B5     		push	{r4, lr}
 624              	.LCFI3:
 625              		.cfi_def_cfa_offset 8
 626              		.cfi_offset 4, -8
 627              		.cfi_offset 14, -4
  75:./Src/motor_R.c ****   motorR.stop = 1;
 628              		.loc 1 75 0
ARM GAS  /tmp/cc1joHbP.s 			page 18


 629 0002 0020     		movs	r0, #0
 630 0004 FFF7FEFF 		bl	mR_PWM_Set_ChALL
 631              	.LVL15:
  76:./Src/motor_R.c ****   mR_Low_CH1_OFF();
 632              		.loc 1 76 0
 633 0008 124C     		ldr	r4, .L55
 634 000a 0123     		movs	r3, #1
 635 000c A373     		strb	r3, [r4, #14]
  77:./Src/motor_R.c ****   mR_Low_CH2_OFF();
 636              		.loc 1 77 0
 637 000e FFF7FEFF 		bl	mR_Low_CH1_OFF
 638              	.LVL16:
  78:./Src/motor_R.c ****   mR_Low_CH3_OFF();
 639              		.loc 1 78 0
 640 0012 FFF7FEFF 		bl	mR_Low_CH2_OFF
 641              	.LVL17:
  79:./Src/motor_R.c ****   mR_AHigh__OFF();
 642              		.loc 1 79 0
 643 0016 FFF7FEFF 		bl	mR_Low_CH3_OFF
 644              	.LVL18:
  80:./Src/motor_R.c ****   mR_BHigh__OFF();
 645              		.loc 1 80 0
 646 001a FFF7FEFF 		bl	mR_AHigh__OFF
 647              	.LVL19:
  81:./Src/motor_R.c ****   mR_CHigh__OFF();
 648              		.loc 1 81 0
 649 001e FFF7FEFF 		bl	mR_BHigh__OFF
 650              	.LVL20:
  82:./Src/motor_R.c **** 
 651              		.loc 1 82 0
 652 0022 FFF7FEFF 		bl	mR_CHigh__OFF
 653              	.LVL21:
  84:./Src/motor_R.c ****   HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 654              		.loc 1 84 0
 655 0026 0022     		movs	r2, #0
 656 0028 1146     		mov	r1, r2
 657 002a 2820     		movs	r0, #40
 658 002c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 659              	.LVL22:
  85:./Src/motor_R.c ****   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 660              		.loc 1 85 0
 661 0030 2820     		movs	r0, #40
 662 0032 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 663              	.LVL23:
  86:./Src/motor_R.c ****   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 664              		.loc 1 86 0
 665 0036 084B     		ldr	r3, .L55+4
 666 0038 4FF48052 		mov	r2, #4096
 667 003c 5A61     		str	r2, [r3, #20]
  87:./Src/motor_R.c ****   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);  
 668              		.loc 1 87 0
 669 003e 4FF40062 		mov	r2, #2048
 670 0042 5A61     		str	r2, [r3, #20]
  88:./Src/motor_R.c ****     motorR.BLDCMotorL_count= 0;
 671              		.loc 1 88 0
 672 0044 4FF48062 		mov	r2, #1024
 673 0048 5A61     		str	r2, [r3, #20]
ARM GAS  /tmp/cc1joHbP.s 			page 19


  89:./Src/motor_R.c ****     motorR.BLDCMotorL_flag = 0;
 674              		.loc 1 89 0
 675 004a 0023     		movs	r3, #0
 676 004c 2371     		strb	r3, [r4, #4]
  90:./Src/motor_R.c **** }
 677              		.loc 1 90 0
 678 004e 6371     		strb	r3, [r4, #5]
  91:./Src/motor_R.c ****     
 679              		.loc 1 91 0
 680 0050 10BD     		pop	{r4, pc}
 681              	.L56:
 682 0052 00BF     		.align	2
 683              	.L55:
 684 0054 00000000 		.word	motorR
 685 0058 00040140 		.word	1073808384
 686              		.cfi_endproc
 687              	.LFE69:
 689              		.section	.text.MX_TIM1_Init,"ax",%progbits
 690              		.align	1
 691              		.global	MX_TIM1_Init
 692              		.syntax unified
 693              		.thumb
 694              		.thumb_func
 695              		.fpu softvfp
 697              	MX_TIM1_Init:
 698              	.LFB70:
  96:./Src/motor_R.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 699              		.loc 1 96 0
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 88
 702              		@ frame_needed = 0, uses_anonymous_args = 0
 703 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 704              	.LCFI4:
 705              		.cfi_def_cfa_offset 24
 706              		.cfi_offset 4, -24
 707              		.cfi_offset 5, -20
 708              		.cfi_offset 6, -16
 709              		.cfi_offset 7, -12
 710              		.cfi_offset 8, -8
 711              		.cfi_offset 14, -4
 712 0004 96B0     		sub	sp, sp, #88
 713              	.LCFI5:
 714              		.cfi_def_cfa_offset 112
 715              	.LBB7:
 102:./Src/motor_R.c **** 
 716              		.loc 1 102 0
 717 0006 6A4B     		ldr	r3, .L59
 718 0008 9A69     		ldr	r2, [r3, #24]
 719 000a 42F40062 		orr	r2, r2, #2048
 720 000e 9A61     		str	r2, [r3, #24]
 721 0010 9A69     		ldr	r2, [r3, #24]
 722 0012 02F40062 		and	r2, r2, #2048
 723 0016 0092     		str	r2, [sp]
 724 0018 009A     		ldr	r2, [sp]
 725              	.LBE7:
 104:./Src/motor_R.c **** /*  
 726              		.loc 1 104 0
ARM GAS  /tmp/cc1joHbP.s 			page 20


 727 001a 664A     		ldr	r2, .L59+4
 728 001c 1268     		ldr	r2, [r2]
 729 001e D208     		lsrs	r2, r2, #3
 730 0020 6549     		ldr	r1, .L59+8
 731 0022 A1FB0212 		umull	r1, r2, r1, r2
 732 0026 120A     		lsrs	r2, r2, #8
 733 0028 013A     		subs	r2, r2, #1
 734 002a 644F     		ldr	r7, .L59+12
 735 002c 3A60     		str	r2, [r7]
 736              	.LBB8:
 206:./Src/motor_R.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 737              		.loc 1 206 0
 738 002e 9A69     		ldr	r2, [r3, #24]
 739 0030 42F40062 		orr	r2, r2, #2048
 740 0034 9A61     		str	r2, [r3, #24]
 741 0036 9A69     		ldr	r2, [r3, #24]
 742 0038 02F40062 		and	r2, r2, #2048
 743 003c 0192     		str	r2, [sp, #4]
 744 003e 019A     		ldr	r2, [sp, #4]
 745              	.LBE8:
 746              	.LBB9:
 207:./Src/motor_R.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 747              		.loc 1 207 0
 748 0040 9A69     		ldr	r2, [r3, #24]
 749 0042 42F00402 		orr	r2, r2, #4
 750 0046 9A61     		str	r2, [r3, #24]
 751 0048 9A69     		ldr	r2, [r3, #24]
 752 004a 02F00402 		and	r2, r2, #4
 753 004e 0292     		str	r2, [sp, #8]
 754 0050 029A     		ldr	r2, [sp, #8]
 755              	.LBE9:
 756              	.LBB10:
 208:./Src/motor_R.c **** 
 757              		.loc 1 208 0
 758 0052 9A69     		ldr	r2, [r3, #24]
 759 0054 42F00802 		orr	r2, r2, #8
 760 0058 9A61     		str	r2, [r3, #24]
 761 005a 9B69     		ldr	r3, [r3, #24]
 762 005c 03F00803 		and	r3, r3, #8
 763 0060 0393     		str	r3, [sp, #12]
 764 0062 039B     		ldr	r3, [sp, #12]
 765              	.LBE10:
 210:./Src/motor_R.c ****   mR_Low_CH2_OFF();
 766              		.loc 1 210 0
 767 0064 FFF7FEFF 		bl	mR_Low_CH1_OFF
 768              	.LVL24:
 211:./Src/motor_R.c ****   mR_Low_CH3_OFF();
 769              		.loc 1 211 0
 770 0068 FFF7FEFF 		bl	mR_Low_CH2_OFF
 771              	.LVL25:
 212:./Src/motor_R.c ****    //CH1N,CH2N,CH3N -- MANUAL mode --
 772              		.loc 1 212 0
 773 006c FFF7FEFF 		bl	mR_Low_CH3_OFF
 774              	.LVL26:
 214:./Src/motor_R.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 775              		.loc 1 214 0
 776 0070 0126     		movs	r6, #1
ARM GAS  /tmp/cc1joHbP.s 			page 21


 777 0072 1396     		str	r6, [sp, #76]
 215:./Src/motor_R.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 778              		.loc 1 215 0
 779 0074 1496     		str	r6, [sp, #80]
 216:./Src/motor_R.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
 780              		.loc 1 216 0
 781 0076 4FF00308 		mov	r8, #3
 782 007a CDF85480 		str	r8, [sp, #84]
 217:./Src/motor_R.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 783              		.loc 1 217 0
 784 007e 16AC     		add	r4, sp, #88
 785 0080 4FF40053 		mov	r3, #8192
 786 0084 44F8103D 		str	r3, [r4, #-16]!
 218:./Src/motor_R.c ****   GPIO_InitStruct.Pin = GPIO_PIN_14;
 787              		.loc 1 218 0
 788 0088 4D4D     		ldr	r5, .L59+16
 789 008a 2146     		mov	r1, r4
 790 008c 2846     		mov	r0, r5
 791 008e FFF7FEFF 		bl	HAL_GPIO_Init
 792              	.LVL27:
 219:./Src/motor_R.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 793              		.loc 1 219 0
 794 0092 4FF48043 		mov	r3, #16384
 795 0096 1293     		str	r3, [sp, #72]
 220:./Src/motor_R.c ****   GPIO_InitStruct.Pin = GPIO_PIN_15;
 796              		.loc 1 220 0
 797 0098 2146     		mov	r1, r4
 798 009a 2846     		mov	r0, r5
 799 009c FFF7FEFF 		bl	HAL_GPIO_Init
 800              	.LVL28:
 221:./Src/motor_R.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801              		.loc 1 221 0
 802 00a0 4FF40043 		mov	r3, #32768
 803 00a4 1293     		str	r3, [sp, #72]
 222:./Src/motor_R.c ****   
 804              		.loc 1 222 0
 805 00a6 2146     		mov	r1, r4
 806 00a8 2846     		mov	r0, r5
 807 00aa FFF7FEFF 		bl	HAL_GPIO_Init
 808              	.LVL29:
 224:./Src/motor_R.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 809              		.loc 1 224 0
 810 00ae 0223     		movs	r3, #2
 811 00b0 1393     		str	r3, [sp, #76]
 225:./Src/motor_R.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 812              		.loc 1 225 0
 813 00b2 1493     		str	r3, [sp, #80]
 226:./Src/motor_R.c ****   //CH1,CH2,CH3
 814              		.loc 1 226 0
 815 00b4 CDF85480 		str	r8, [sp, #84]
 228:./Src/motor_R.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 816              		.loc 1 228 0
 817 00b8 4FF48073 		mov	r3, #256
 818 00bc 1293     		str	r3, [sp, #72]
 229:./Src/motor_R.c ****   GPIO_InitStruct.Pin = GPIO_PIN_9;
 819              		.loc 1 229 0
 820 00be A5F58065 		sub	r5, r5, #1024
ARM GAS  /tmp/cc1joHbP.s 			page 22


 821 00c2 2146     		mov	r1, r4
 822 00c4 2846     		mov	r0, r5
 823 00c6 FFF7FEFF 		bl	HAL_GPIO_Init
 824              	.LVL30:
 230:./Src/motor_R.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 825              		.loc 1 230 0
 826 00ca 4FF40073 		mov	r3, #512
 827 00ce 1293     		str	r3, [sp, #72]
 231:./Src/motor_R.c ****   GPIO_InitStruct.Pin = GPIO_PIN_10;
 828              		.loc 1 231 0
 829 00d0 2146     		mov	r1, r4
 830 00d2 2846     		mov	r0, r5
 831 00d4 FFF7FEFF 		bl	HAL_GPIO_Init
 832              	.LVL31:
 232:./Src/motor_R.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 833              		.loc 1 232 0
 834 00d8 4FF48068 		mov	r8, #1024
 835 00dc CDF84880 		str	r8, [sp, #72]
 233:./Src/motor_R.c **** 
 836              		.loc 1 233 0
 837 00e0 2146     		mov	r1, r4
 838 00e2 2846     		mov	r0, r5
 839 00e4 FFF7FEFF 		bl	HAL_GPIO_Init
 840              	.LVL32:
 235:./Src/motor_R.c ****   htim1.Init.Prescaler         = 0;
 841              		.loc 1 235 0
 842 00e8 364D     		ldr	r5, .L59+20
 843 00ea 374B     		ldr	r3, .L59+24
 844 00ec 2B60     		str	r3, [r5]
 236:./Src/motor_R.c ****   htim1.Init.Period            = motorR.uwPeriodValue;
 845              		.loc 1 236 0
 846 00ee 0024     		movs	r4, #0
 847 00f0 6C60     		str	r4, [r5, #4]
 237:./Src/motor_R.c ****   htim1.Init.ClockDivision     = 0;
 848              		.loc 1 237 0
 849 00f2 3B68     		ldr	r3, [r7]
 850 00f4 EB60     		str	r3, [r5, #12]
 238:./Src/motor_R.c ****   htim1.Init.CounterMode       = TIM_COUNTERMODE_UP;
 851              		.loc 1 238 0
 852 00f6 2C61     		str	r4, [r5, #16]
 239:./Src/motor_R.c ****   htim1.Init.RepetitionCounter = 0;
 853              		.loc 1 239 0
 854 00f8 AC60     		str	r4, [r5, #8]
 240:./Src/motor_R.c ****   HAL_TIM_PWM_Init(&htim1); 
 855              		.loc 1 240 0
 856 00fa 6C61     		str	r4, [r5, #20]
 241:./Src/motor_R.c ****   
 857              		.loc 1 241 0
 858 00fc 2846     		mov	r0, r5
 859 00fe FFF7FEFF 		bl	HAL_TIM_PWM_Init
 860              	.LVL33:
 243:./Src/motor_R.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW; // TIM_BREAKPOLARITY_HIGH; //
 861              		.loc 1 243 0
 862 0102 0A94     		str	r4, [sp, #40]
 244:./Src/motor_R.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 863              		.loc 1 244 0
 864 0104 0994     		str	r4, [sp, #36]
ARM GAS  /tmp/cc1joHbP.s 			page 23


 245:./Src/motor_R.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 865              		.loc 1 245 0
 866 0106 0894     		str	r4, [sp, #32]
 246:./Src/motor_R.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE; //TIM_OSSI_DISABLE;
 867              		.loc 1 246 0
 868 0108 0694     		str	r4, [sp, #24]
 247:./Src/motor_R.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE; //TIM_OSSR_DISABLE;  
 869              		.loc 1 247 0
 870 010a CDF81480 		str	r8, [sp, #20]
 248:./Src/motor_R.c ****   sBreakDeadTimeConfig.DeadTime = 40;   //10;  
 871              		.loc 1 248 0
 872 010e 4FF40063 		mov	r3, #2048
 873 0112 0493     		str	r3, [sp, #16]
 249:./Src/motor_R.c ****   HAL_TIMEx_ConfigBreakDeadTime(&htim1,&sBreakDeadTimeConfig);
 874              		.loc 1 249 0
 875 0114 2823     		movs	r3, #40
 876 0116 0793     		str	r3, [sp, #28]
 250:./Src/motor_R.c ****   
 877              		.loc 1 250 0
 878 0118 04A9     		add	r1, sp, #16
 879 011a 2846     		mov	r0, r5
 880 011c FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 881              	.LVL34:
 255:./Src/motor_R.c ****   sConfigOC.OCFastMode  = TIM_OCFAST_DISABLE; // TIM_OCFAST_DISABLE;
 882              		.loc 1 255 0
 883 0120 6023     		movs	r3, #96
 884 0122 0B93     		str	r3, [sp, #44]
 256:./Src/motor_R.c ****   sConfigOC.OCPolarity  = TIM_OCPOLARITY_HIGH; //TIM_OCPOLARITY_LOW;//TIM_OCPOLARITY_HIGH; //TIM_OC
 885              		.loc 1 256 0
 886 0124 0F94     		str	r4, [sp, #60]
 257:./Src/motor_R.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW; //TIM_OCNPOLARITY_HIGH; //TIM_OCNPOLARITY_HIGH;
 887              		.loc 1 257 0
 888 0126 0D94     		str	r4, [sp, #52]
 258:./Src/motor_R.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET; //TIM_OCIDLESTATE_SET; //TIM_OCNIDLESTATE_RESET; /
 889              		.loc 1 258 0
 890 0128 4FF00808 		mov	r8, #8
 891 012c CDF83880 		str	r8, [sp, #56]
 259:./Src/motor_R.c ****   sConfigOC.OCNIdleState= TIM_OCNIDLESTATE_RESET; //TIM_OCNIDLESTATE_SET ; //TIM_OCIDLESTATE_SET; /
 892              		.loc 1 259 0
 893 0130 1094     		str	r4, [sp, #64]
 260:./Src/motor_R.c ****   
 894              		.loc 1 260 0
 895 0132 1194     		str	r4, [sp, #68]
 263:./Src/motor_R.c ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1); 
 896              		.loc 1 263 0
 897 0134 0C94     		str	r4, [sp, #48]
 264:./Src/motor_R.c ****   sConfigOC.Pulse = 0;
 898              		.loc 1 264 0
 899 0136 2246     		mov	r2, r4
 900 0138 0BA9     		add	r1, sp, #44
 901 013a 2846     		mov	r0, r5
 902 013c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 903              	.LVL35:
 265:./Src/motor_R.c ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 904              		.loc 1 265 0
 905 0140 0C94     		str	r4, [sp, #48]
 266:./Src/motor_R.c ****   sConfigOC.Pulse = 0;
ARM GAS  /tmp/cc1joHbP.s 			page 24


 906              		.loc 1 266 0
 907 0142 0422     		movs	r2, #4
 908 0144 0BA9     		add	r1, sp, #44
 909 0146 2846     		mov	r0, r5
 910 0148 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 911              	.LVL36:
 267:./Src/motor_R.c ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 912              		.loc 1 267 0
 913 014c 0C94     		str	r4, [sp, #48]
 268:./Src/motor_R.c **** 
 914              		.loc 1 268 0
 915 014e 4246     		mov	r2, r8
 916 0150 0BA9     		add	r1, sp, #44
 917 0152 2846     		mov	r0, r5
 918 0154 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 919              	.LVL37:
 271:./Src/motor_R.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);         //CH2
 920              		.loc 1 271 0
 921 0158 2146     		mov	r1, r4
 922 015a 2846     		mov	r0, r5
 923 015c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 924              	.LVL38:
 272:./Src/motor_R.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);         //CH3
 925              		.loc 1 272 0
 926 0160 0421     		movs	r1, #4
 927 0162 2846     		mov	r0, r5
 928 0164 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 929              	.LVL39:
 273:./Src/motor_R.c ****   HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);         //CH4  
 930              		.loc 1 273 0
 931 0168 4146     		mov	r1, r8
 932 016a 2846     		mov	r0, r5
 933 016c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 934              	.LVL40:
 274:./Src/motor_R.c ****   
 935              		.loc 1 274 0
 936 0170 0C21     		movs	r1, #12
 937 0172 2846     		mov	r0, r5
 938 0174 FFF7FEFF 		bl	HAL_TIM_PWM_Start_IT
 939              	.LVL41:
 276:./Src/motor_R.c ****   
 940              		.loc 1 276 0
 941 0178 2046     		mov	r0, r4
 942 017a FFF7FEFF 		bl	mR_PWM_Set_ChALL
 943              	.LVL42:
 278:./Src/motor_R.c ****   mR_Low_CH2_OFF();
 944              		.loc 1 278 0
 945 017e FFF7FEFF 		bl	mR_Low_CH1_OFF
 946              	.LVL43:
 279:./Src/motor_R.c ****   mR_Low_CH3_OFF();
 947              		.loc 1 279 0
 948 0182 FFF7FEFF 		bl	mR_Low_CH2_OFF
 949              	.LVL44:
 280:./Src/motor_R.c ****   mR_AHigh__OFF();
 950              		.loc 1 280 0
 951 0186 FFF7FEFF 		bl	mR_Low_CH3_OFF
 952              	.LVL45:
ARM GAS  /tmp/cc1joHbP.s 			page 25


 281:./Src/motor_R.c ****   mR_BHigh__OFF();
 953              		.loc 1 281 0
 954 018a FFF7FEFF 		bl	mR_AHigh__OFF
 955              	.LVL46:
 282:./Src/motor_R.c ****   mR_CHigh__OFF();
 956              		.loc 1 282 0
 957 018e FFF7FEFF 		bl	mR_BHigh__OFF
 958              	.LVL47:
 283:./Src/motor_R.c ****   
 959              		.loc 1 283 0
 960 0192 FFF7FEFF 		bl	mR_CHigh__OFF
 961              	.LVL48:
 285:./Src/motor_R.c ****   /* Peripheral interrupt init */
 962              		.loc 1 285 0
 963 0196 BE73     		strb	r6, [r7, #14]
 287:./Src/motor_R.c ****   HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 964              		.loc 1 287 0
 965 0198 3246     		mov	r2, r6
 966 019a 2146     		mov	r1, r4
 967 019c 1B20     		movs	r0, #27
 968 019e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 969              	.LVL49:
 288:./Src/motor_R.c ****   
 970              		.loc 1 288 0
 971 01a2 1B20     		movs	r0, #27
 972 01a4 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 973              	.LVL50:
 290:./Src/motor_R.c **** 
 974              		.loc 1 290 0
 975 01a8 16B0     		add	sp, sp, #88
 976              	.LCFI6:
 977              		.cfi_def_cfa_offset 24
 978              		@ sp needed
 979 01aa BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 980              	.L60:
 981 01ae 00BF     		.align	2
 982              	.L59:
 983 01b0 00100240 		.word	1073876992
 984 01b4 00000000 		.word	SystemCoreClock
 985 01b8 89B5F814 		.word	351843721
 986 01bc 00000000 		.word	motorR
 987 01c0 000C0140 		.word	1073810432
 988 01c4 00000000 		.word	htim1
 989 01c8 002C0140 		.word	1073818624
 990              		.cfi_endproc
 991              	.LFE70:
 993              		.section	.text.MotorR_init,"ax",%progbits
 994              		.align	1
 995              		.global	MotorR_init
 996              		.syntax unified
 997              		.thumb
 998              		.thumb_func
 999              		.fpu softvfp
 1001              	MotorR_init:
 1002              	.LFB66:
  11:./Src/motor_R.c ****   MX_TIM1_Init();
 1003              		.loc 1 11 0
ARM GAS  /tmp/cc1joHbP.s 			page 26


 1004              		.cfi_startproc
 1005              		@ args = 0, pretend = 0, frame = 0
 1006              		@ frame_needed = 0, uses_anonymous_args = 0
 1007 0000 08B5     		push	{r3, lr}
 1008              	.LCFI7:
 1009              		.cfi_def_cfa_offset 8
 1010              		.cfi_offset 3, -8
 1011              		.cfi_offset 14, -4
  12:./Src/motor_R.c ****   mR_HallSensor_init();
 1012              		.loc 1 12 0
 1013 0002 FFF7FEFF 		bl	MX_TIM1_Init
 1014              	.LVL51:
  13:./Src/motor_R.c ****   motorR.BLDCMotorL_count= 0;
 1015              		.loc 1 13 0
 1016 0006 FFF7FEFF 		bl	mR_HallSensor_init
 1017              	.LVL52:
  14:./Src/motor_R.c ****   motorR.BLDCMotorL_flag = 0; 
 1018              		.loc 1 14 0
 1019 000a 044B     		ldr	r3, .L63
 1020 000c 0022     		movs	r2, #0
 1021 000e 1A71     		strb	r2, [r3, #4]
  15:./Src/motor_R.c ****   motorR.BLDCMotorL_velRAW = 0;
 1022              		.loc 1 15 0
 1023 0010 5A71     		strb	r2, [r3, #5]
  16:./Src/motor_R.c ****   motorR.BLDCMotorL_deltavel = 0;
 1024              		.loc 1 16 0
 1025 0012 DA80     		strh	r2, [r3, #6]	@ movhi
  17:./Src/motor_R.c ****   
 1026              		.loc 1 17 0
 1027 0014 1A81     		strh	r2, [r3, #8]	@ movhi
  19:./Src/motor_R.c **** }
 1028              		.loc 1 19 0
 1029 0016 FFF7FEFF 		bl	MotorR_stop
 1030              	.LVL53:
  20:./Src/motor_R.c **** 
 1031              		.loc 1 20 0
 1032 001a 08BD     		pop	{r3, pc}
 1033              	.L64:
 1034              		.align	2
 1035              	.L63:
 1036 001c 00000000 		.word	motorR
 1037              		.cfi_endproc
 1038              	.LFE66:
 1040              		.section	.text.mR_BLDCMotor,"ax",%progbits
 1041              		.align	1
 1042              		.global	mR_BLDCMotor
 1043              		.syntax unified
 1044              		.thumb
 1045              		.thumb_func
 1046              		.fpu softvfp
 1048              	mR_BLDCMotor:
 1049              	.LFB88:
 375:./Src/motor_R.c **** 
 376:./Src/motor_R.c **** void mR_BLDCMotor(void){
 1050              		.loc 1 376 0
 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc1joHbP.s 			page 27


 1053              		@ frame_needed = 0, uses_anonymous_args = 0
 1054 0000 10B5     		push	{r4, lr}
 1055              	.LCFI8:
 1056              		.cfi_def_cfa_offset 8
 1057              		.cfi_offset 4, -8
 1058              		.cfi_offset 14, -4
 377:./Src/motor_R.c ****   motorR.newhallpos = (GPIOC->IDR & 0x1C00);
 1059              		.loc 1 377 0
 1060 0002 404B     		ldr	r3, .L89
 1061 0004 9B68     		ldr	r3, [r3, #8]
 1062 0006 03F4E053 		and	r3, r3, #7168
 1063 000a 3F4C     		ldr	r4, .L89+4
 1064 000c A381     		strh	r3, [r4, #12]	@ movhi
 378:./Src/motor_R.c ****   
 379:./Src/motor_R.c ****   mR_Low_CH1_OFF();
 1065              		.loc 1 379 0
 1066 000e FFF7FEFF 		bl	mR_Low_CH1_OFF
 1067              	.LVL54:
 380:./Src/motor_R.c ****   mR_Low_CH2_OFF();
 1068              		.loc 1 380 0
 1069 0012 FFF7FEFF 		bl	mR_Low_CH2_OFF
 1070              	.LVL55:
 381:./Src/motor_R.c ****   mR_Low_CH3_OFF();
 1071              		.loc 1 381 0
 1072 0016 FFF7FEFF 		bl	mR_Low_CH3_OFF
 1073              	.LVL56:
 382:./Src/motor_R.c ****   mR_AHigh__OFF();
 1074              		.loc 1 382 0
 1075 001a FFF7FEFF 		bl	mR_AHigh__OFF
 1076              	.LVL57:
 383:./Src/motor_R.c ****   mR_BHigh__OFF();
 1077              		.loc 1 383 0
 1078 001e FFF7FEFF 		bl	mR_BHigh__OFF
 1079              	.LVL58:
 384:./Src/motor_R.c ****   mR_CHigh__OFF();
 1080              		.loc 1 384 0
 1081 0022 FFF7FEFF 		bl	mR_CHigh__OFF
 1082              	.LVL59:
 385:./Src/motor_R.c **** 
 386:./Src/motor_R.c ****   if(motorR.stop){
 1083              		.loc 1 386 0
 1084 0026 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 1085 0028 0BBB     		cbnz	r3, .L65
 387:./Src/motor_R.c ****     return;
 388:./Src/motor_R.c ****   }
 389:./Src/motor_R.c ****   
 390:./Src/motor_R.c ****   if(motorR.reverse!=0){
 1086              		.loc 1 390 0
 1087 002a A37A     		ldrb	r3, [r4, #10]	@ zero_extendqisi2
 1088 002c A3B3     		cbz	r3, .L67
 391:./Src/motor_R.c ****     switch (motorR.newhallpos){
 1089              		.loc 1 391 0
 1090 002e A389     		ldrh	r3, [r4, #12]
 1091 0030 9BB2     		uxth	r3, r3
 1092 0032 B3F5406F 		cmp	r3, #3072
 1093 0036 1BD0     		beq	.L69
 1094 0038 0AD9     		bls	.L85
ARM GAS  /tmp/cc1joHbP.s 			page 28


 1095 003a B3F5A05F 		cmp	r3, #5120
 1096 003e 21D0     		beq	.L73
 1097 0040 B3F5C05F 		cmp	r3, #6144
 1098 0044 23D0     		beq	.L74
 1099 0046 B3F5805F 		cmp	r3, #4096
 1100 004a 16D0     		beq	.L86
 1101              	.L68:
 1102              	.LBB11:
 1103              	.LBB12:
 1104              		.file 2 "./Drivers/CMSIS/Include/cmsis_gcc.h"
   1:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:./Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:./Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:./Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:./Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
ARM GAS  /tmp/cc1joHbP.s 			page 29


  48:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc1joHbP.s 			page 30


 105:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc1joHbP.s 			page 31


 162:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc1joHbP.s 			page 32


 219:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:./Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cc1joHbP.s 			page 33


 276:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:./Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
ARM GAS  /tmp/cc1joHbP.s 			page 34


 333:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:./Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:./Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:./Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:./Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 1105              		.loc 2 375 0
 1106              		.syntax unified
 1107              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1108 004c 00BF     		nop
 1109              	@ 0 "" 2
 1110              		.thumb
 1111              		.syntax unified
 1112 004e 0EE0     		b	.L65
 1113              	.L85:
 1114              	.LBE12:
 1115              	.LBE11:
 1116              		.loc 1 391 0
 1117 0050 B3F5806F 		cmp	r3, #1024
 1118 0054 07D0     		beq	.L71
ARM GAS  /tmp/cc1joHbP.s 			page 35


 1119 0056 B3F5006F 		cmp	r3, #2048
 1120 005a F7D1     		bne	.L68
 392:./Src/motor_R.c ****       case (0x400):               //1
 393:./Src/motor_R.c ****         mR_Low_CH1_ON();
 394:./Src/motor_R.c ****         mR_BHigh__ON();
 395:./Src/motor_R.c ****       break;
 396:./Src/motor_R.c ****       case (0x800):               //2
 397:./Src/motor_R.c ****         mR_Low_CH2_ON();
 1121              		.loc 1 397 0
 1122 005c FFF7FEFF 		bl	mR_Low_CH2_ON
 1123              	.LVL60:
 398:./Src/motor_R.c ****         mR_CHigh__ON();        
 1124              		.loc 1 398 0
 1125 0060 FFF7FEFF 		bl	mR_CHigh__ON
 1126              	.LVL61:
 399:./Src/motor_R.c ****       break;
 1127              		.loc 1 399 0
 1128 0064 03E0     		b	.L65
 1129              	.L71:
 393:./Src/motor_R.c ****         mR_BHigh__ON();
 1130              		.loc 1 393 0
 1131 0066 FFF7FEFF 		bl	mR_Low_CH1_ON
 1132              	.LVL62:
 394:./Src/motor_R.c ****       break;
 1133              		.loc 1 394 0
 1134 006a FFF7FEFF 		bl	mR_BHigh__ON
 1135              	.LVL63:
 1136              	.L65:
 400:./Src/motor_R.c ****       case (0xC00):               //3
 401:./Src/motor_R.c ****         mR_Low_CH1_ON();        
 402:./Src/motor_R.c ****         mR_CHigh__ON();
 403:./Src/motor_R.c ****       break;
 404:./Src/motor_R.c ****       case (0x1000):              //4
 405:./Src/motor_R.c ****         mR_AHigh__ON();
 406:./Src/motor_R.c ****         mR_Low_CH3_ON();        
 407:./Src/motor_R.c ****       break;
 408:./Src/motor_R.c ****       case (0x1400):              //5
 409:./Src/motor_R.c ****         mR_BHigh__ON();
 410:./Src/motor_R.c ****         mR_Low_CH3_ON();        
 411:./Src/motor_R.c ****       break;
 412:./Src/motor_R.c ****       case (0x1800):              //6
 413:./Src/motor_R.c ****         mR_AHigh__ON();
 414:./Src/motor_R.c ****         mR_Low_CH2_ON();        
 415:./Src/motor_R.c ****       break;  
 416:./Src/motor_R.c ****       default:
 417:./Src/motor_R.c ****         __NOP();
 418:./Src/motor_R.c ****       break;
 419:./Src/motor_R.c ****     }   
 420:./Src/motor_R.c ****   }else{
 421:./Src/motor_R.c ****     switch (motorR.newhallpos){
 422:./Src/motor_R.c ****       case (0x400):               //1
 423:./Src/motor_R.c ****         mR_AHigh__ON();
 424:./Src/motor_R.c ****         mR_Low_CH2_ON();
 425:./Src/motor_R.c ****       break;
 426:./Src/motor_R.c ****       case (0x800):               //2
 427:./Src/motor_R.c ****         mR_BHigh__ON();
 428:./Src/motor_R.c ****         mR_Low_CH3_ON();    
ARM GAS  /tmp/cc1joHbP.s 			page 36


 429:./Src/motor_R.c ****       break;
 430:./Src/motor_R.c ****       case (0xC00):               //3
 431:./Src/motor_R.c ****         mR_AHigh__ON();
 432:./Src/motor_R.c ****         mR_Low_CH3_ON();    
 433:./Src/motor_R.c ****       break;
 434:./Src/motor_R.c ****       case (0x1000):              //4
 435:./Src/motor_R.c ****         mR_Low_CH1_ON();    
 436:./Src/motor_R.c ****         mR_CHigh__ON();
 437:./Src/motor_R.c ****       break;
 438:./Src/motor_R.c ****       case (0x1400):              //5
 439:./Src/motor_R.c ****         mR_Low_CH2_ON();    
 440:./Src/motor_R.c ****         mR_CHigh__ON();
 441:./Src/motor_R.c ****       break;
 442:./Src/motor_R.c ****       case (0x1800):              //6
 443:./Src/motor_R.c ****         mR_Low_CH1_ON();    
 444:./Src/motor_R.c ****         mR_BHigh__ON();
 445:./Src/motor_R.c ****       break;  
 446:./Src/motor_R.c ****       default:
 447:./Src/motor_R.c ****         __NOP();
 448:./Src/motor_R.c ****       break;      
 449:./Src/motor_R.c ****     }     
 450:./Src/motor_R.c ****   }
 451:./Src/motor_R.c **** }
 1137              		.loc 1 451 0
 1138 006e 10BD     		pop	{r4, pc}
 1139              	.L69:
 401:./Src/motor_R.c ****         mR_CHigh__ON();
 1140              		.loc 1 401 0
 1141 0070 FFF7FEFF 		bl	mR_Low_CH1_ON
 1142              	.LVL64:
 402:./Src/motor_R.c ****       break;
 1143              		.loc 1 402 0
 1144 0074 FFF7FEFF 		bl	mR_CHigh__ON
 1145              	.LVL65:
 403:./Src/motor_R.c ****       case (0x1000):              //4
 1146              		.loc 1 403 0
 1147 0078 F9E7     		b	.L65
 1148              	.L86:
 405:./Src/motor_R.c ****         mR_Low_CH3_ON();        
 1149              		.loc 1 405 0
 1150 007a FFF7FEFF 		bl	mR_AHigh__ON
 1151              	.LVL66:
 406:./Src/motor_R.c ****       break;
 1152              		.loc 1 406 0
 1153 007e FFF7FEFF 		bl	mR_Low_CH3_ON
 1154              	.LVL67:
 407:./Src/motor_R.c ****       case (0x1400):              //5
 1155              		.loc 1 407 0
 1156 0082 F4E7     		b	.L65
 1157              	.L73:
 409:./Src/motor_R.c ****         mR_Low_CH3_ON();        
 1158              		.loc 1 409 0
 1159 0084 FFF7FEFF 		bl	mR_BHigh__ON
 1160              	.LVL68:
 410:./Src/motor_R.c ****       break;
 1161              		.loc 1 410 0
 1162 0088 FFF7FEFF 		bl	mR_Low_CH3_ON
ARM GAS  /tmp/cc1joHbP.s 			page 37


 1163              	.LVL69:
 411:./Src/motor_R.c ****       case (0x1800):              //6
 1164              		.loc 1 411 0
 1165 008c EFE7     		b	.L65
 1166              	.L74:
 413:./Src/motor_R.c ****         mR_Low_CH2_ON();        
 1167              		.loc 1 413 0
 1168 008e FFF7FEFF 		bl	mR_AHigh__ON
 1169              	.LVL70:
 414:./Src/motor_R.c ****       break;  
 1170              		.loc 1 414 0
 1171 0092 FFF7FEFF 		bl	mR_Low_CH2_ON
 1172              	.LVL71:
 415:./Src/motor_R.c ****       default:
 1173              		.loc 1 415 0
 1174 0096 EAE7     		b	.L65
 1175              	.L67:
 421:./Src/motor_R.c ****       case (0x400):               //1
 1176              		.loc 1 421 0
 1177 0098 1B4B     		ldr	r3, .L89+4
 1178 009a 9B89     		ldrh	r3, [r3, #12]
 1179 009c 9BB2     		uxth	r3, r3
 1180 009e B3F5406F 		cmp	r3, #3072
 1181 00a2 1BD0     		beq	.L77
 1182 00a4 0AD9     		bls	.L87
 1183 00a6 B3F5A05F 		cmp	r3, #5120
 1184 00aa 21D0     		beq	.L81
 1185 00ac B3F5C05F 		cmp	r3, #6144
 1186 00b0 23D0     		beq	.L82
 1187 00b2 B3F5805F 		cmp	r3, #4096
 1188 00b6 16D0     		beq	.L88
 1189              	.L76:
 1190              	.LBB13:
 1191              	.LBB14:
 1192              		.loc 2 375 0
 1193              		.syntax unified
 1194              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1195 00b8 00BF     		nop
 1196              	@ 0 "" 2
 1197              		.thumb
 1198              		.syntax unified
 1199 00ba D8E7     		b	.L65
 1200              	.L87:
 1201              	.LBE14:
 1202              	.LBE13:
 421:./Src/motor_R.c ****       case (0x400):               //1
 1203              		.loc 1 421 0
 1204 00bc B3F5806F 		cmp	r3, #1024
 1205 00c0 07D0     		beq	.L79
 1206 00c2 B3F5006F 		cmp	r3, #2048
 1207 00c6 F7D1     		bne	.L76
 427:./Src/motor_R.c ****         mR_Low_CH3_ON();    
 1208              		.loc 1 427 0
 1209 00c8 FFF7FEFF 		bl	mR_BHigh__ON
 1210              	.LVL72:
 428:./Src/motor_R.c ****       break;
 1211              		.loc 1 428 0
ARM GAS  /tmp/cc1joHbP.s 			page 38


 1212 00cc FFF7FEFF 		bl	mR_Low_CH3_ON
 1213              	.LVL73:
 429:./Src/motor_R.c ****       case (0xC00):               //3
 1214              		.loc 1 429 0
 1215 00d0 CDE7     		b	.L65
 1216              	.L79:
 423:./Src/motor_R.c ****         mR_Low_CH2_ON();
 1217              		.loc 1 423 0
 1218 00d2 FFF7FEFF 		bl	mR_AHigh__ON
 1219              	.LVL74:
 424:./Src/motor_R.c ****       break;
 1220              		.loc 1 424 0
 1221 00d6 FFF7FEFF 		bl	mR_Low_CH2_ON
 1222              	.LVL75:
 425:./Src/motor_R.c ****       case (0x800):               //2
 1223              		.loc 1 425 0
 1224 00da C8E7     		b	.L65
 1225              	.L77:
 431:./Src/motor_R.c ****         mR_Low_CH3_ON();    
 1226              		.loc 1 431 0
 1227 00dc FFF7FEFF 		bl	mR_AHigh__ON
 1228              	.LVL76:
 432:./Src/motor_R.c ****       break;
 1229              		.loc 1 432 0
 1230 00e0 FFF7FEFF 		bl	mR_Low_CH3_ON
 1231              	.LVL77:
 433:./Src/motor_R.c ****       case (0x1000):              //4
 1232              		.loc 1 433 0
 1233 00e4 C3E7     		b	.L65
 1234              	.L88:
 435:./Src/motor_R.c ****         mR_CHigh__ON();
 1235              		.loc 1 435 0
 1236 00e6 FFF7FEFF 		bl	mR_Low_CH1_ON
 1237              	.LVL78:
 436:./Src/motor_R.c ****       break;
 1238              		.loc 1 436 0
 1239 00ea FFF7FEFF 		bl	mR_CHigh__ON
 1240              	.LVL79:
 437:./Src/motor_R.c ****       case (0x1400):              //5
 1241              		.loc 1 437 0
 1242 00ee BEE7     		b	.L65
 1243              	.L81:
 439:./Src/motor_R.c ****         mR_CHigh__ON();
 1244              		.loc 1 439 0
 1245 00f0 FFF7FEFF 		bl	mR_Low_CH2_ON
 1246              	.LVL80:
 440:./Src/motor_R.c ****       break;
 1247              		.loc 1 440 0
 1248 00f4 FFF7FEFF 		bl	mR_CHigh__ON
 1249              	.LVL81:
 441:./Src/motor_R.c ****       case (0x1800):              //6
 1250              		.loc 1 441 0
 1251 00f8 B9E7     		b	.L65
 1252              	.L82:
 443:./Src/motor_R.c ****         mR_BHigh__ON();
 1253              		.loc 1 443 0
 1254 00fa FFF7FEFF 		bl	mR_Low_CH1_ON
ARM GAS  /tmp/cc1joHbP.s 			page 39


 1255              	.LVL82:
 444:./Src/motor_R.c ****       break;  
 1256              		.loc 1 444 0
 1257 00fe FFF7FEFF 		bl	mR_BHigh__ON
 1258              	.LVL83:
 445:./Src/motor_R.c ****       default:
 1259              		.loc 1 445 0
 1260 0102 B4E7     		b	.L65
 1261              	.L90:
 1262              		.align	2
 1263              	.L89:
 1264 0104 00100140 		.word	1073811456
 1265 0108 00000000 		.word	motorR
 1266              		.cfi_endproc
 1267              	.LFE88:
 1269              		.section	.text.MotorR_start,"ax",%progbits
 1270              		.align	1
 1271              		.global	MotorR_start
 1272              		.syntax unified
 1273              		.thumb
 1274              		.thumb_func
 1275              		.fpu softvfp
 1277              	MotorR_start:
 1278              	.LFB67:
  22:./Src/motor_R.c ****   mR_PWM_Set_ChALL(0); 
 1279              		.loc 1 22 0
 1280              		.cfi_startproc
 1281              		@ args = 0, pretend = 0, frame = 0
 1282              		@ frame_needed = 0, uses_anonymous_args = 0
 1283 0000 38B5     		push	{r3, r4, r5, lr}
 1284              	.LCFI9:
 1285              		.cfi_def_cfa_offset 16
 1286              		.cfi_offset 3, -16
 1287              		.cfi_offset 4, -12
 1288              		.cfi_offset 5, -8
 1289              		.cfi_offset 14, -4
  23:./Src/motor_R.c ****   motorR.BLDCMotorL_deltavel = 0;
 1290              		.loc 1 23 0
 1291 0002 0020     		movs	r0, #0
 1292 0004 FFF7FEFF 		bl	mR_PWM_Set_ChALL
 1293              	.LVL84:
  24:./Src/motor_R.c ****   motorR.BLDCMotorL_velRAW = 0;
 1294              		.loc 1 24 0
 1295 0008 094D     		ldr	r5, .L93
 1296 000a 0024     		movs	r4, #0
 1297 000c 2C81     		strh	r4, [r5, #8]	@ movhi
  25:./Src/motor_R.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 1298              		.loc 1 25 0
 1299 000e EC80     		strh	r4, [r5, #6]	@ movhi
  26:./Src/motor_R.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);  
 1300              		.loc 1 26 0
 1301 0010 2246     		mov	r2, r4
 1302 0012 2146     		mov	r1, r4
 1303 0014 2820     		movs	r0, #40
 1304 0016 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1305              	.LVL85:
  27:./Src/motor_R.c ****   mR_PWM_Set_ChALL(0);
ARM GAS  /tmp/cc1joHbP.s 			page 40


 1306              		.loc 1 27 0
 1307 001a 2820     		movs	r0, #40
 1308 001c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1309              	.LVL86:
  28:./Src/motor_R.c ****   motorR.stop = 0;
 1310              		.loc 1 28 0
 1311 0020 2046     		mov	r0, r4
 1312 0022 FFF7FEFF 		bl	mR_PWM_Set_ChALL
 1313              	.LVL87:
  29:./Src/motor_R.c ****   mR_BLDCMotor();
 1314              		.loc 1 29 0
 1315 0026 AC73     		strb	r4, [r5, #14]
  30:./Src/motor_R.c **** }
 1316              		.loc 1 30 0
 1317 0028 FFF7FEFF 		bl	mR_BLDCMotor
 1318              	.LVL88:
  31:./Src/motor_R.c **** 
 1319              		.loc 1 31 0
 1320 002c 38BD     		pop	{r3, r4, r5, pc}
 1321              	.L94:
 1322 002e 00BF     		.align	2
 1323              	.L93:
 1324 0030 00000000 		.word	motorR
 1325              		.cfi_endproc
 1326              	.LFE67:
 1328              		.section	.text.MotorR_pwm,"ax",%progbits
 1329              		.align	1
 1330              		.global	MotorR_pwm
 1331              		.syntax unified
 1332              		.thumb
 1333              		.thumb_func
 1334              		.fpu softvfp
 1336              	MotorR_pwm:
 1337              	.LFB68:
  33:./Src/motor_R.c ****   static uint8_t last_motorR=0;
 1338              		.loc 1 33 0
 1339              		.cfi_startproc
 1340              		@ args = 0, pretend = 0, frame = 0
 1341              		@ frame_needed = 0, uses_anonymous_args = 0
 1342              	.LVL89:
 1343 0000 10B5     		push	{r4, lr}
 1344              	.LCFI10:
 1345              		.cfi_def_cfa_offset 8
 1346              		.cfi_offset 4, -8
 1347              		.cfi_offset 14, -4
  37:./Src/motor_R.c ****     value_percent = 1000;
 1348              		.loc 1 37 0
 1349 0002 B0F57A7F 		cmp	r0, #1000
 1350 0006 21DC     		bgt	.L105
 1351 0008 0446     		mov	r4, r0
  40:./Src/motor_R.c ****     value_percent = -1000;
 1352              		.loc 1 40 0
 1353 000a 10F57A7F 		cmn	r0, #1000
 1354 000e 1FDA     		bge	.L96
  41:./Src/motor_R.c ****   }
 1355              		.loc 1 41 0
 1356 0010 1D4C     		ldr	r4, .L112
ARM GAS  /tmp/cc1joHbP.s 			page 41


 1357              	.LVL90:
 1358              	.L97:
  44:./Src/motor_R.c **** 
 1359              		.loc 1 44 0
 1360 0012 6042     		negs	r0, r4
 1361 0014 80B2     		uxth	r0, r0
 1362 0016 04B2     		sxth	r4, r0
 1363              	.LVL91:
  46:./Src/motor_R.c ****       mR_PWM_Set_ChALL(value_percent);
 1364              		.loc 1 46 0
 1365 0018 1C4B     		ldr	r3, .L112+4
 1366 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1367 001c 23B3     		cbz	r3, .L108
 1368              	.L99:
  49:./Src/motor_R.c ****     last_motorR = 1;
 1369              		.loc 1 49 0
 1370 001e 0123     		movs	r3, #1
 1371 0020 1B4A     		ldr	r2, .L112+8
 1372 0022 9372     		strb	r3, [r2, #10]
  50:./Src/motor_R.c ****   }else{
 1373              		.loc 1 50 0
 1374 0024 194A     		ldr	r2, .L112+4
 1375 0026 1370     		strb	r3, [r2]
 1376              	.L100:
  59:./Src/motor_R.c ****     motorR.stop = 1;    //ferma motore
 1377              		.loc 1 59 0
 1378 0028 A4B2     		uxth	r4, r4
 1379 002a 631D     		adds	r3, r4, #5
 1380 002c 9BB2     		uxth	r3, r3
 1381 002e 0A2B     		cmp	r3, #10
 1382 0030 21D9     		bls	.L109
  63:./Src/motor_R.c ****     if(last_motorRStop){
 1383              		.loc 1 63 0
 1384 0032 174B     		ldr	r3, .L112+8
 1385 0034 0022     		movs	r2, #0
 1386 0036 9A73     		strb	r2, [r3, #14]
  64:./Src/motor_R.c ****         //riattiva
 1387              		.loc 1 64 0
 1388 0038 164B     		ldr	r3, .L112+12
 1389 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1390 003c 0BBB     		cbnz	r3, .L110
 1391              	.L104:
  68:./Src/motor_R.c ****   }
 1392              		.loc 1 68 0
 1393 003e 154B     		ldr	r3, .L112+12
 1394 0040 0022     		movs	r2, #0
 1395 0042 1A70     		strb	r2, [r3]
 1396              	.L103:
  71:./Src/motor_R.c **** }
 1397              		.loc 1 71 0
 1398 0044 2046     		mov	r0, r4
 1399 0046 FFF7FEFF 		bl	mR_PWM_Set_ChALL
 1400              	.LVL92:
  72:./Src/motor_R.c **** 
 1401              		.loc 1 72 0
 1402 004a 10BD     		pop	{r4, pc}
 1403              	.LVL93:
ARM GAS  /tmp/cc1joHbP.s 			page 42


 1404              	.L105:
  38:./Src/motor_R.c ****   }
 1405              		.loc 1 38 0
 1406 004c 4FF47A74 		mov	r4, #1000
 1407              	.L96:
 1408              	.LVL94:
  43:./Src/motor_R.c ****     value_percent = value_percent * -1;
 1409              		.loc 1 43 0
 1410 0050 002C     		cmp	r4, #0
 1411 0052 DEDB     		blt	.L97
  52:./Src/motor_R.c ****       mR_PWM_Set_ChALL(value_percent);
 1412              		.loc 1 52 0
 1413 0054 0D4B     		ldr	r3, .L112+4
 1414 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1415 0058 012B     		cmp	r3, #1
 1416 005a 08D0     		beq	.L111
 1417              	.L101:
  55:./Src/motor_R.c ****      last_motorR = 0;
 1418              		.loc 1 55 0
 1419 005c 0023     		movs	r3, #0
 1420 005e 0C4A     		ldr	r2, .L112+8
 1421 0060 9372     		strb	r3, [r2, #10]
  56:./Src/motor_R.c ****   }
 1422              		.loc 1 56 0
 1423 0062 0A4A     		ldr	r2, .L112+4
 1424 0064 1370     		strb	r3, [r2]
 1425 0066 DFE7     		b	.L100
 1426              	.L108:
  47:./Src/motor_R.c ****     }
 1427              		.loc 1 47 0
 1428 0068 FFF7FEFF 		bl	mR_PWM_Set_ChALL
 1429              	.LVL95:
 1430 006c D7E7     		b	.L99
 1431              	.L111:
  53:./Src/motor_R.c ****     }
 1432              		.loc 1 53 0
 1433 006e A0B2     		uxth	r0, r4
 1434 0070 FFF7FEFF 		bl	mR_PWM_Set_ChALL
 1435              	.LVL96:
 1436 0074 F2E7     		b	.L101
 1437              	.L109:
  60:./Src/motor_R.c ****     last_motorRStop = 1;    
 1438              		.loc 1 60 0
 1439 0076 0123     		movs	r3, #1
 1440 0078 054A     		ldr	r2, .L112+8
 1441 007a 9373     		strb	r3, [r2, #14]
  61:./Src/motor_R.c ****   }else{
 1442              		.loc 1 61 0
 1443 007c 054A     		ldr	r2, .L112+12
 1444 007e 1370     		strb	r3, [r2]
 1445 0080 E0E7     		b	.L103
 1446              	.L110:
  66:./Src/motor_R.c ****     }
 1447              		.loc 1 66 0
 1448 0082 FFF7FEFF 		bl	mR_BLDCMotor
 1449              	.LVL97:
 1450 0086 DAE7     		b	.L104
ARM GAS  /tmp/cc1joHbP.s 			page 43


 1451              	.L113:
 1452              		.align	2
 1453              	.L112:
 1454 0088 18FCFFFF 		.word	-1000
 1455 008c 00000000 		.word	.LANCHOR0
 1456 0090 00000000 		.word	motorR
 1457 0094 00000000 		.word	.LANCHOR1
 1458              		.cfi_endproc
 1459              	.LFE68:
 1461              		.section	.text.HALL_R_ISR_Callback,"ax",%progbits
 1462              		.align	1
 1463              		.global	HALL_R_ISR_Callback
 1464              		.syntax unified
 1465              		.thumb
 1466              		.thumb_func
 1467              		.fpu softvfp
 1469              	HALL_R_ISR_Callback:
 1470              	.LFB89:
 452:./Src/motor_R.c **** 
 453:./Src/motor_R.c **** void HALL_R_ISR_Callback(void){
 1471              		.loc 1 453 0
 1472              		.cfi_startproc
 1473              		@ args = 0, pretend = 0, frame = 0
 1474              		@ frame_needed = 0, uses_anonymous_args = 0
 1475              		@ link register save eliminated.
 454:./Src/motor_R.c ****     motorR.BLDCMotorL_count= 1;        //Delay x ritardo x debounce
 1476              		.loc 1 454 0
 1477 0000 024B     		ldr	r3, .L115
 1478 0002 0122     		movs	r2, #1
 1479 0004 1A71     		strb	r2, [r3, #4]
 455:./Src/motor_R.c ****     motorR.BLDCMotorL_flag = 1;        //Update motor
 1480              		.loc 1 455 0
 1481 0006 5A71     		strb	r2, [r3, #5]
 456:./Src/motor_R.c **** }
 1482              		.loc 1 456 0
 1483 0008 7047     		bx	lr
 1484              	.L116:
 1485 000a 00BF     		.align	2
 1486              	.L115:
 1487 000c 00000000 		.word	motorR
 1488              		.cfi_endproc
 1489              	.LFE89:
 1491              		.section	.text.PWM_R_ISR_Callback,"ax",%progbits
 1492              		.align	1
 1493              		.global	PWM_R_ISR_Callback
 1494              		.syntax unified
 1495              		.thumb
 1496              		.thumb_func
 1497              		.fpu softvfp
 1499              	PWM_R_ISR_Callback:
 1500              	.LFB90:
 457:./Src/motor_R.c **** 
 458:./Src/motor_R.c **** //40uS Interrupt -- 25Khz
 459:./Src/motor_R.c **** void PWM_R_ISR_Callback(void){
 1501              		.loc 1 459 0
 1502              		.cfi_startproc
 1503              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc1joHbP.s 			page 44


 1504              		@ frame_needed = 0, uses_anonymous_args = 0
 1505 0000 08B5     		push	{r3, lr}
 1506              	.LCFI11:
 1507              		.cfi_def_cfa_offset 8
 1508              		.cfi_offset 3, -8
 1509              		.cfi_offset 14, -4
 460:./Src/motor_R.c ****    if((motorR.BLDCMotorL_flag)&&(motorR.BLDCMotorL_count==0)){
 1510              		.loc 1 460 0
 1511 0002 164B     		ldr	r3, .L123
 1512 0004 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1513 0006 13B1     		cbz	r3, .L118
 1514              		.loc 1 460 0 is_stmt 0 discriminator 1
 1515 0008 144B     		ldr	r3, .L123
 1516 000a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1517 000c E3B1     		cbz	r3, .L122
 1518              	.L118:
 461:./Src/motor_R.c ****       mR_BLDCMotor();        //5uS
 462:./Src/motor_R.c ****       motorR.BLDCMotorL_flag = 0;      
 463:./Src/motor_R.c ****       //---
 464:./Src/motor_R.c ****       motorR.BLDCMotorL_velRAW = motorR.BLDCMotorL_deltavel;
 465:./Src/motor_R.c ****       motorR.BLDCMotorL_deltavel = 0;      
 466:./Src/motor_R.c ****       
 467:./Src/motor_R.c ****    }else if((motorR.BLDCMotorL_flag)&&(motorR.BLDCMotorL_count!=0)){
 1519              		.loc 1 467 0 is_stmt 1
 1520 000e 134B     		ldr	r3, .L123
 1521 0010 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1522 0012 3BB1     		cbz	r3, .L119
 1523              		.loc 1 467 0 is_stmt 0 discriminator 1
 1524 0014 114B     		ldr	r3, .L123
 1525 0016 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1526 0018 23B1     		cbz	r3, .L119
 468:./Src/motor_R.c ****       motorR.BLDCMotorL_count--;
 1527              		.loc 1 468 0 is_stmt 1
 1528 001a 104A     		ldr	r2, .L123
 1529 001c 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 1530 001e 013B     		subs	r3, r3, #1
 1531 0020 DBB2     		uxtb	r3, r3
 1532 0022 1371     		strb	r3, [r2, #4]
 1533              	.L119:
 469:./Src/motor_R.c ****    }
 470:./Src/motor_R.c ****    motorR.BLDCMotorL_deltavel++;       //Calcolo velocita motore inc ogni 40uS
 1534              		.loc 1 470 0
 1535 0024 0D4A     		ldr	r2, .L123
 1536 0026 1389     		ldrh	r3, [r2, #8]
 1537 0028 0133     		adds	r3, r3, #1
 1538 002a 9BB2     		uxth	r3, r3
 1539 002c 1381     		strh	r3, [r2, #8]	@ movhi
 471:./Src/motor_R.c ****    if(motorR.BLDCMotorL_deltavel>=5000){
 1540              		.loc 1 471 0
 1541 002e 1389     		ldrh	r3, [r2, #8]
 1542 0030 9BB2     		uxth	r3, r3
 1543 0032 41F28732 		movw	r2, #4999
 1544 0036 9342     		cmp	r3, r2
 1545 0038 05D9     		bls	.L117
 472:./Src/motor_R.c ****     motorR.BLDCMotorL_deltavel = 5000;
 1546              		.loc 1 472 0
 1547 003a 084B     		ldr	r3, .L123
ARM GAS  /tmp/cc1joHbP.s 			page 45


 1548 003c 41F28832 		movw	r2, #5000
 1549 0040 1A81     		strh	r2, [r3, #8]	@ movhi
 473:./Src/motor_R.c ****     motorR.BLDCMotorL_velRAW = 0;     //Minima vel, motore fermo
 1550              		.loc 1 473 0
 1551 0042 0022     		movs	r2, #0
 1552 0044 DA80     		strh	r2, [r3, #6]	@ movhi
 1553              	.L117:
 474:./Src/motor_R.c ****    }
 475:./Src/motor_R.c **** }
 1554              		.loc 1 475 0
 1555 0046 08BD     		pop	{r3, pc}
 1556              	.L122:
 461:./Src/motor_R.c ****       motorR.BLDCMotorL_flag = 0;      
 1557              		.loc 1 461 0
 1558 0048 FFF7FEFF 		bl	mR_BLDCMotor
 1559              	.LVL98:
 462:./Src/motor_R.c ****       //---
 1560              		.loc 1 462 0
 1561 004c 034B     		ldr	r3, .L123
 1562 004e 0021     		movs	r1, #0
 1563 0050 5971     		strb	r1, [r3, #5]
 464:./Src/motor_R.c ****       motorR.BLDCMotorL_deltavel = 0;      
 1564              		.loc 1 464 0
 1565 0052 1A89     		ldrh	r2, [r3, #8]
 1566 0054 92B2     		uxth	r2, r2
 1567 0056 DA80     		strh	r2, [r3, #6]	@ movhi
 465:./Src/motor_R.c ****       
 1568              		.loc 1 465 0
 1569 0058 1981     		strh	r1, [r3, #8]	@ movhi
 1570 005a E3E7     		b	.L119
 1571              	.L124:
 1572              		.align	2
 1573              	.L123:
 1574 005c 00000000 		.word	motorR
 1575              		.cfi_endproc
 1576              	.LFE90:
 1578              		.comm	motorR,16,4
 1579              		.comm	htim1,60,4
 1580              		.section	.bss.last_motorR.7409,"aw",%nobits
 1581              		.set	.LANCHOR0,. + 0
 1584              	last_motorR.7409:
 1585 0000 00       		.space	1
 1586              		.section	.bss.last_motorRStop.7410,"aw",%nobits
 1587              		.set	.LANCHOR1,. + 0
 1590              	last_motorRStop.7410:
 1591 0000 00       		.space	1
 1592              		.text
 1593              	.Letext0:
 1594              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1595              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1596              		.file 5 "./Drivers/CMSIS/Include/core_cm3.h"
 1597              		.file 6 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1598              		.file 7 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 1599              		.file 8 "/usr/arm-none-eabi/include/sys/lock.h"
 1600              		.file 9 "/usr/arm-none-eabi/include/sys/_types.h"
 1601              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.2.0/include/stddef.h"
 1602              		.file 11 "/usr/arm-none-eabi/include/sys/reent.h"
ARM GAS  /tmp/cc1joHbP.s 			page 46


 1603              		.file 12 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1604              		.file 13 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1605              		.file 14 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1606              		.file 15 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 1607              		.file 16 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 1608              		.file 17 "./Inc/motor_R.h"
 1609              		.file 18 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
ARM GAS  /tmp/cc1joHbP.s 			page 47


DEFINED SYMBOLS
                            *ABS*:0000000000000000 motor_R.c
     /tmp/cc1joHbP.s:16     .text.mR_Low_CH1_ON:0000000000000000 $t
     /tmp/cc1joHbP.s:23     .text.mR_Low_CH1_ON:0000000000000000 mR_Low_CH1_ON
     /tmp/cc1joHbP.s:40     .text.mR_Low_CH1_ON:000000000000000c $d
     /tmp/cc1joHbP.s:45     .text.mR_Low_CH1_OFF:0000000000000000 $t
     /tmp/cc1joHbP.s:52     .text.mR_Low_CH1_OFF:0000000000000000 mR_Low_CH1_OFF
     /tmp/cc1joHbP.s:68     .text.mR_Low_CH1_OFF:000000000000000c $d
     /tmp/cc1joHbP.s:73     .text.mR_Low_CH2_ON:0000000000000000 $t
     /tmp/cc1joHbP.s:80     .text.mR_Low_CH2_ON:0000000000000000 mR_Low_CH2_ON
     /tmp/cc1joHbP.s:96     .text.mR_Low_CH2_ON:000000000000000c $d
     /tmp/cc1joHbP.s:101    .text.mR_Low_CH2_OFF:0000000000000000 $t
     /tmp/cc1joHbP.s:108    .text.mR_Low_CH2_OFF:0000000000000000 mR_Low_CH2_OFF
     /tmp/cc1joHbP.s:124    .text.mR_Low_CH2_OFF:000000000000000c $d
     /tmp/cc1joHbP.s:129    .text.mR_Low_CH3_ON:0000000000000000 $t
     /tmp/cc1joHbP.s:136    .text.mR_Low_CH3_ON:0000000000000000 mR_Low_CH3_ON
     /tmp/cc1joHbP.s:152    .text.mR_Low_CH3_ON:000000000000000c $d
     /tmp/cc1joHbP.s:157    .text.mR_Low_CH3_OFF:0000000000000000 $t
     /tmp/cc1joHbP.s:164    .text.mR_Low_CH3_OFF:0000000000000000 mR_Low_CH3_OFF
     /tmp/cc1joHbP.s:180    .text.mR_Low_CH3_OFF:000000000000000c $d
     /tmp/cc1joHbP.s:185    .text.mR_HallSensor_init:0000000000000000 $t
     /tmp/cc1joHbP.s:192    .text.mR_HallSensor_init:0000000000000000 mR_HallSensor_init
     /tmp/cc1joHbP.s:253    .text.mR_HallSensor_init:0000000000000048 $d
     /tmp/cc1joHbP.s:260    .text.mR_AHigh__ON:0000000000000000 $t
     /tmp/cc1joHbP.s:267    .text.mR_AHigh__ON:0000000000000000 mR_AHigh__ON
     /tmp/cc1joHbP.s:285    .text.mR_AHigh__ON:0000000000000010 $d
                            *COM*:000000000000003c htim1
     /tmp/cc1joHbP.s:290    .text.mR_AHigh__OFF:0000000000000000 $t
     /tmp/cc1joHbP.s:297    .text.mR_AHigh__OFF:0000000000000000 mR_AHigh__OFF
     /tmp/cc1joHbP.s:317    .text.mR_AHigh__OFF:0000000000000014 $d
     /tmp/cc1joHbP.s:322    .text.mR_BHigh__ON:0000000000000000 $t
     /tmp/cc1joHbP.s:329    .text.mR_BHigh__ON:0000000000000000 mR_BHigh__ON
     /tmp/cc1joHbP.s:347    .text.mR_BHigh__ON:0000000000000010 $d
     /tmp/cc1joHbP.s:352    .text.mR_BHigh__OFF:0000000000000000 $t
     /tmp/cc1joHbP.s:359    .text.mR_BHigh__OFF:0000000000000000 mR_BHigh__OFF
     /tmp/cc1joHbP.s:379    .text.mR_BHigh__OFF:0000000000000014 $d
     /tmp/cc1joHbP.s:384    .text.mR_CHigh__ON:0000000000000000 $t
     /tmp/cc1joHbP.s:391    .text.mR_CHigh__ON:0000000000000000 mR_CHigh__ON
     /tmp/cc1joHbP.s:409    .text.mR_CHigh__ON:0000000000000010 $d
     /tmp/cc1joHbP.s:414    .text.mR_CHigh__OFF:0000000000000000 $t
     /tmp/cc1joHbP.s:421    .text.mR_CHigh__OFF:0000000000000000 mR_CHigh__OFF
     /tmp/cc1joHbP.s:441    .text.mR_CHigh__OFF:0000000000000014 $d
     /tmp/cc1joHbP.s:446    .text.mR_PWM_Set_Ch1:0000000000000000 $t
     /tmp/cc1joHbP.s:453    .text.mR_PWM_Set_Ch1:0000000000000000 mR_PWM_Set_Ch1
     /tmp/cc1joHbP.s:479    .text.mR_PWM_Set_Ch1:0000000000000018 $d
                            *COM*:0000000000000010 motorR
     /tmp/cc1joHbP.s:486    .text.mR_PWM_Set_Ch2:0000000000000000 $t
     /tmp/cc1joHbP.s:493    .text.mR_PWM_Set_Ch2:0000000000000000 mR_PWM_Set_Ch2
     /tmp/cc1joHbP.s:519    .text.mR_PWM_Set_Ch2:0000000000000018 $d
     /tmp/cc1joHbP.s:526    .text.mR_PWM_Set_Ch3:0000000000000000 $t
     /tmp/cc1joHbP.s:533    .text.mR_PWM_Set_Ch3:0000000000000000 mR_PWM_Set_Ch3
     /tmp/cc1joHbP.s:559    .text.mR_PWM_Set_Ch3:0000000000000018 $d
     /tmp/cc1joHbP.s:566    .text.mR_PWM_Set_ChALL:0000000000000000 $t
     /tmp/cc1joHbP.s:573    .text.mR_PWM_Set_ChALL:0000000000000000 mR_PWM_Set_ChALL
     /tmp/cc1joHbP.s:603    .text.mR_PWM_Set_ChALL:000000000000001c $d
     /tmp/cc1joHbP.s:610    .text.MotorR_stop:0000000000000000 $t
     /tmp/cc1joHbP.s:617    .text.MotorR_stop:0000000000000000 MotorR_stop
ARM GAS  /tmp/cc1joHbP.s 			page 48


     /tmp/cc1joHbP.s:684    .text.MotorR_stop:0000000000000054 $d
     /tmp/cc1joHbP.s:690    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/cc1joHbP.s:697    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/cc1joHbP.s:983    .text.MX_TIM1_Init:00000000000001b0 $d
     /tmp/cc1joHbP.s:994    .text.MotorR_init:0000000000000000 $t
     /tmp/cc1joHbP.s:1001   .text.MotorR_init:0000000000000000 MotorR_init
     /tmp/cc1joHbP.s:1036   .text.MotorR_init:000000000000001c $d
     /tmp/cc1joHbP.s:1041   .text.mR_BLDCMotor:0000000000000000 $t
     /tmp/cc1joHbP.s:1048   .text.mR_BLDCMotor:0000000000000000 mR_BLDCMotor
     /tmp/cc1joHbP.s:1264   .text.mR_BLDCMotor:0000000000000104 $d
     /tmp/cc1joHbP.s:1270   .text.MotorR_start:0000000000000000 $t
     /tmp/cc1joHbP.s:1277   .text.MotorR_start:0000000000000000 MotorR_start
     /tmp/cc1joHbP.s:1324   .text.MotorR_start:0000000000000030 $d
     /tmp/cc1joHbP.s:1329   .text.MotorR_pwm:0000000000000000 $t
     /tmp/cc1joHbP.s:1336   .text.MotorR_pwm:0000000000000000 MotorR_pwm
     /tmp/cc1joHbP.s:1454   .text.MotorR_pwm:0000000000000088 $d
     /tmp/cc1joHbP.s:1462   .text.HALL_R_ISR_Callback:0000000000000000 $t
     /tmp/cc1joHbP.s:1469   .text.HALL_R_ISR_Callback:0000000000000000 HALL_R_ISR_Callback
     /tmp/cc1joHbP.s:1487   .text.HALL_R_ISR_Callback:000000000000000c $d
     /tmp/cc1joHbP.s:1492   .text.PWM_R_ISR_Callback:0000000000000000 $t
     /tmp/cc1joHbP.s:1499   .text.PWM_R_ISR_Callback:0000000000000000 PWM_R_ISR_Callback
     /tmp/cc1joHbP.s:1574   .text.PWM_R_ISR_Callback:000000000000005c $d
     /tmp/cc1joHbP.s:1584   .bss.last_motorR.7409:0000000000000000 last_motorR.7409
     /tmp/cc1joHbP.s:1585   .bss.last_motorR.7409:0000000000000000 $d
     /tmp/cc1joHbP.s:1590   .bss.last_motorRStop.7410:0000000000000000 last_motorRStop.7410
     /tmp/cc1joHbP.s:1591   .bss.last_motorRStop.7410:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_NVIC_DisableIRQ
HAL_TIM_PWM_Init
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_PWM_ConfigChannel
HAL_TIM_PWM_Start
HAL_TIM_PWM_Start_IT
SystemCoreClock
