ARM GAS  /tmp/ccBcR8ou.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	NMI_Handler:
  24              	.LFB66:
  25              		.file 1 "./Src/stm32f1xx_it.c"
   1:./Src/stm32f1xx_it.c **** /**
   2:./Src/stm32f1xx_it.c ****   ******************************************************************************
   3:./Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   4:./Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   5:./Src/stm32f1xx_it.c ****   ******************************************************************************
   6:./Src/stm32f1xx_it.c ****   *
   7:./Src/stm32f1xx_it.c ****   * COPYRIGHT(c) 2017 STMicroelectronics
   8:./Src/stm32f1xx_it.c ****   *
   9:./Src/stm32f1xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:./Src/stm32f1xx_it.c ****   * are permitted provided that the following conditions are met:
  11:./Src/stm32f1xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:./Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:./Src/stm32f1xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:./Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:./Src/stm32f1xx_it.c ****   *      and/or other materials provided with the distribution.
  16:./Src/stm32f1xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:./Src/stm32f1xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:./Src/stm32f1xx_it.c ****   *      without specific prior written permission.
  19:./Src/stm32f1xx_it.c ****   *
  20:./Src/stm32f1xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:./Src/stm32f1xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:./Src/stm32f1xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:./Src/stm32f1xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:./Src/stm32f1xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:./Src/stm32f1xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:./Src/stm32f1xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:./Src/stm32f1xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:./Src/stm32f1xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:./Src/stm32f1xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:./Src/stm32f1xx_it.c ****   *
  31:./Src/stm32f1xx_it.c ****   ******************************************************************************
  32:./Src/stm32f1xx_it.c ****   */
  33:./Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
ARM GAS  /tmp/ccBcR8ou.s 			page 2


  34:./Src/stm32f1xx_it.c **** #include "stm32f1xx_hal.h"
  35:./Src/stm32f1xx_it.c **** #include "stm32f1xx.h"
  36:./Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  37:./Src/stm32f1xx_it.c **** #include "motor_L.h"
  38:./Src/stm32f1xx_it.c **** #include "motor_R.h"
  39:./Src/stm32f1xx_it.c **** #include "varie.h"
  40:./Src/stm32f1xx_it.c **** #include "pid.h"
  41:./Src/stm32f1xx_it.c **** 
  42:./Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  43:./Src/stm32f1xx_it.c **** 
  44:./Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  45:./Src/stm32f1xx_it.c **** 
  46:./Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  47:./Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_adc1;
  48:./Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_adc3;
  49:./Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_i2c2_rx;
  50:./Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_i2c2_tx;
  51:./Src/stm32f1xx_it.c **** extern I2C_HandleTypeDef hi2c2;
  52:./Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim1;
  53:./Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim8;
  54:./Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart2_rx;
  55:./Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart2_tx;
  56:./Src/stm32f1xx_it.c **** extern void PWM_L_ISR_Callback(void);
  57:./Src/stm32f1xx_it.c **** extern void HALL_L_ISR_Callback(void);
  58:./Src/stm32f1xx_it.c **** extern void PWM_R_ISR_Callback(void);
  59:./Src/stm32f1xx_it.c **** extern void HALL_R_ISR_Callback(void);
  60:./Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef Tim3PID;
  61:./Src/stm32f1xx_it.c **** /******************************************************************************/
  62:./Src/stm32f1xx_it.c **** /*            Cortex-M3 Processor Interruption and Exception Handlers         */ 
  63:./Src/stm32f1xx_it.c **** /******************************************************************************/
  64:./Src/stm32f1xx_it.c **** extern ADC_HandleTypeDef hadc1;
  65:./Src/stm32f1xx_it.c **** extern ADC_HandleTypeDef hadc3;
  66:./Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_adc3;
  67:./Src/stm32f1xx_it.c **** 
  68:./Src/stm32f1xx_it.c **** /**
  69:./Src/stm32f1xx_it.c **** * @brief This function handles Non maskable interrupt.
  70:./Src/stm32f1xx_it.c **** */
  71:./Src/stm32f1xx_it.c **** void NMI_Handler(void)
  72:./Src/stm32f1xx_it.c **** {
  26              		.loc 1 72 0
  27              		.cfi_startproc
  28              		@ Volatile: function does not return.
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.L2:
  33              	.LBB20:
  34              	.LBB21:
  35              		.file 2 "./Drivers/CMSIS/Include/cmsis_gcc.h"
   1:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccBcR8ou.s 			page 3


   9:./Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:./Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:./Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:./Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
ARM GAS  /tmp/ccBcR8ou.s 			page 4


  66:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccBcR8ou.s 			page 5


 123:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccBcR8ou.s 			page 6


 180:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccBcR8ou.s 			page 7


 237:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:./Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccBcR8ou.s 			page 8


 294:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:./Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:./Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:./Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccBcR8ou.s 			page 9


 351:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:./Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:./Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
  36              		.loc 2 375 0 discriminator 1
  37              		.syntax unified
  38              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
  39 0000 00BF     		nop
  40              	@ 0 "" 2
  41              		.thumb
  42              		.syntax unified
  43              	.LBE21:
  44              	.LBE20:
  45              	.LBB22:
  46              	.LBB23:
  47              		.syntax unified
  48              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
  49 0002 00BF     		nop
  50              	@ 0 "" 2
  51              		.thumb
  52              		.syntax unified
  53              	.LBE23:
  54              	.LBE22:
  55              	.LBB24:
  56              	.LBB25:
  57              		.syntax unified
  58              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
  59 0004 00BF     		nop
  60              	@ 0 "" 2
  61              		.thumb
  62              		.syntax unified
  63 0006 FBE7     		b	.L2
  64              	.LBE25:
  65              	.LBE24:
  66              		.cfi_endproc
  67              	.LFE66:
ARM GAS  /tmp/ccBcR8ou.s 			page 10


  69              		.section	.text.HardFault_Handler,"ax",%progbits
  70              		.align	1
  71              		.global	HardFault_Handler
  72              		.syntax unified
  73              		.thumb
  74              		.thumb_func
  75              		.fpu softvfp
  77              	HardFault_Handler:
  78              	.LFB67:
  73:./Src/stm32f1xx_it.c ****   while(1){
  74:./Src/stm32f1xx_it.c ****     __NOP();
  75:./Src/stm32f1xx_it.c ****     __NOP();
  76:./Src/stm32f1xx_it.c ****     __NOP();
  77:./Src/stm32f1xx_it.c ****   }
  78:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  79:./Src/stm32f1xx_it.c **** 
  80:./Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  81:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  82:./Src/stm32f1xx_it.c **** 
  83:./Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  84:./Src/stm32f1xx_it.c **** }
  85:./Src/stm32f1xx_it.c **** 
  86:./Src/stm32f1xx_it.c **** /**
  87:./Src/stm32f1xx_it.c **** * @brief This function handles Hard fault interrupt.
  88:./Src/stm32f1xx_it.c **** */
  89:./Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  90:./Src/stm32f1xx_it.c **** {
  79              		.loc 1 90 0
  80              		.cfi_startproc
  81              		@ Volatile: function does not return.
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84 0000 08B5     		push	{r3, lr}
  85              	.LCFI0:
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 3, -8
  88              		.cfi_offset 14, -4
  91:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  92:./Src/stm32f1xx_it.c ****   MotorR_stop();
  89              		.loc 1 92 0
  90 0002 FFF7FEFF 		bl	MotorR_stop
  91              	.LVL0:
  93:./Src/stm32f1xx_it.c ****   MotorL_stop();  
  92              		.loc 1 93 0
  93 0006 FFF7FEFF 		bl	MotorL_stop
  94              	.LVL1:
  95              	.L4:
  96 000a FEE7     		b	.L4
  97              		.cfi_endproc
  98              	.LFE67:
 100              		.section	.text.MemManage_Handler,"ax",%progbits
 101              		.align	1
 102              		.global	MemManage_Handler
 103              		.syntax unified
 104              		.thumb
 105              		.thumb_func
 106              		.fpu softvfp
ARM GAS  /tmp/ccBcR8ou.s 			page 11


 108              	MemManage_Handler:
 109              	.LFB68:
  94:./Src/stm32f1xx_it.c **** 
  95:./Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  96:./Src/stm32f1xx_it.c ****   while (1)
  97:./Src/stm32f1xx_it.c ****   {
  98:./Src/stm32f1xx_it.c ****   }
  99:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
 100:./Src/stm32f1xx_it.c **** 
 101:./Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
 102:./Src/stm32f1xx_it.c **** }
 103:./Src/stm32f1xx_it.c **** 
 104:./Src/stm32f1xx_it.c **** /**
 105:./Src/stm32f1xx_it.c **** * @brief This function handles Memory management fault.
 106:./Src/stm32f1xx_it.c **** */
 107:./Src/stm32f1xx_it.c **** void MemManage_Handler(void)
 108:./Src/stm32f1xx_it.c **** {
 110              		.loc 1 108 0
 111              		.cfi_startproc
 112              		@ Volatile: function does not return.
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115 0000 08B5     		push	{r3, lr}
 116              	.LCFI1:
 117              		.cfi_def_cfa_offset 8
 118              		.cfi_offset 3, -8
 119              		.cfi_offset 14, -4
 109:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 110:./Src/stm32f1xx_it.c ****   MotorR_stop();
 120              		.loc 1 110 0
 121 0002 FFF7FEFF 		bl	MotorR_stop
 122              	.LVL2:
 111:./Src/stm32f1xx_it.c ****   MotorL_stop();  
 123              		.loc 1 111 0
 124 0006 FFF7FEFF 		bl	MotorL_stop
 125              	.LVL3:
 126              	.L7:
 127 000a FEE7     		b	.L7
 128              		.cfi_endproc
 129              	.LFE68:
 131              		.section	.text.BusFault_Handler,"ax",%progbits
 132              		.align	1
 133              		.global	BusFault_Handler
 134              		.syntax unified
 135              		.thumb
 136              		.thumb_func
 137              		.fpu softvfp
 139              	BusFault_Handler:
 140              	.LFB69:
 112:./Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 113:./Src/stm32f1xx_it.c ****   while (1)
 114:./Src/stm32f1xx_it.c ****   {
 115:./Src/stm32f1xx_it.c ****   }
 116:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
 117:./Src/stm32f1xx_it.c **** 
 118:./Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
 119:./Src/stm32f1xx_it.c **** }
ARM GAS  /tmp/ccBcR8ou.s 			page 12


 120:./Src/stm32f1xx_it.c **** 
 121:./Src/stm32f1xx_it.c **** /**
 122:./Src/stm32f1xx_it.c **** * @brief This function handles Prefetch fault, memory access fault.
 123:./Src/stm32f1xx_it.c **** */
 124:./Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 125:./Src/stm32f1xx_it.c **** {
 141              		.loc 1 125 0
 142              		.cfi_startproc
 143              		@ Volatile: function does not return.
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146 0000 08B5     		push	{r3, lr}
 147              	.LCFI2:
 148              		.cfi_def_cfa_offset 8
 149              		.cfi_offset 3, -8
 150              		.cfi_offset 14, -4
 126:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 127:./Src/stm32f1xx_it.c ****   MotorR_stop();
 151              		.loc 1 127 0
 152 0002 FFF7FEFF 		bl	MotorR_stop
 153              	.LVL4:
 128:./Src/stm32f1xx_it.c ****   MotorL_stop();  
 154              		.loc 1 128 0
 155 0006 FFF7FEFF 		bl	MotorL_stop
 156              	.LVL5:
 157              	.L10:
 158 000a FEE7     		b	.L10
 159              		.cfi_endproc
 160              	.LFE69:
 162              		.section	.text.UsageFault_Handler,"ax",%progbits
 163              		.align	1
 164              		.global	UsageFault_Handler
 165              		.syntax unified
 166              		.thumb
 167              		.thumb_func
 168              		.fpu softvfp
 170              	UsageFault_Handler:
 171              	.LFB70:
 129:./Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 130:./Src/stm32f1xx_it.c ****   while (1)
 131:./Src/stm32f1xx_it.c ****   {
 132:./Src/stm32f1xx_it.c ****   }
 133:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 134:./Src/stm32f1xx_it.c **** 
 135:./Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 136:./Src/stm32f1xx_it.c **** }
 137:./Src/stm32f1xx_it.c **** 
 138:./Src/stm32f1xx_it.c **** /**
 139:./Src/stm32f1xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 140:./Src/stm32f1xx_it.c **** */
 141:./Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 142:./Src/stm32f1xx_it.c **** {
 172              		.loc 1 142 0
 173              		.cfi_startproc
 174              		@ Volatile: function does not return.
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccBcR8ou.s 			page 13


 177 0000 08B5     		push	{r3, lr}
 178              	.LCFI3:
 179              		.cfi_def_cfa_offset 8
 180              		.cfi_offset 3, -8
 181              		.cfi_offset 14, -4
 143:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 144:./Src/stm32f1xx_it.c ****   MotorR_stop();
 182              		.loc 1 144 0
 183 0002 FFF7FEFF 		bl	MotorR_stop
 184              	.LVL6:
 145:./Src/stm32f1xx_it.c ****   MotorL_stop();  
 185              		.loc 1 145 0
 186 0006 FFF7FEFF 		bl	MotorL_stop
 187              	.LVL7:
 188              	.L13:
 189 000a FEE7     		b	.L13
 190              		.cfi_endproc
 191              	.LFE70:
 193              		.section	.text.SVC_Handler,"ax",%progbits
 194              		.align	1
 195              		.global	SVC_Handler
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 199              		.fpu softvfp
 201              	SVC_Handler:
 202              	.LFB71:
 146:./Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 147:./Src/stm32f1xx_it.c ****   while (1)
 148:./Src/stm32f1xx_it.c ****   {
 149:./Src/stm32f1xx_it.c ****   }
 150:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 151:./Src/stm32f1xx_it.c **** 
 152:./Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 153:./Src/stm32f1xx_it.c **** }
 154:./Src/stm32f1xx_it.c **** 
 155:./Src/stm32f1xx_it.c **** /**
 156:./Src/stm32f1xx_it.c **** * @brief This function handles System service call via SWI instruction.
 157:./Src/stm32f1xx_it.c **** */
 158:./Src/stm32f1xx_it.c **** void SVC_Handler(void)
 159:./Src/stm32f1xx_it.c **** {
 203              		.loc 1 159 0
 204              		.cfi_startproc
 205              		@ Volatile: function does not return.
 206              		@ args = 0, pretend = 0, frame = 0
 207              		@ frame_needed = 0, uses_anonymous_args = 0
 208              		@ link register save eliminated.
 209              	.L16:
 210              	.LBB26:
 211              	.LBB27:
 212              		.loc 2 375 0 discriminator 1
 213              		.syntax unified
 214              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 215 0000 00BF     		nop
 216              	@ 0 "" 2
 217              		.thumb
 218              		.syntax unified
ARM GAS  /tmp/ccBcR8ou.s 			page 14


 219              	.LBE27:
 220              	.LBE26:
 221              	.LBB28:
 222              	.LBB29:
 223              		.syntax unified
 224              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 225 0002 00BF     		nop
 226              	@ 0 "" 2
 227              		.thumb
 228              		.syntax unified
 229              	.LBE29:
 230              	.LBE28:
 231              	.LBB30:
 232              	.LBB31:
 233              		.syntax unified
 234              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 235 0004 00BF     		nop
 236              	@ 0 "" 2
 237              		.thumb
 238              		.syntax unified
 239 0006 FBE7     		b	.L16
 240              	.LBE31:
 241              	.LBE30:
 242              		.cfi_endproc
 243              	.LFE71:
 245              		.section	.text.DebugMon_Handler,"ax",%progbits
 246              		.align	1
 247              		.global	DebugMon_Handler
 248              		.syntax unified
 249              		.thumb
 250              		.thumb_func
 251              		.fpu softvfp
 253              	DebugMon_Handler:
 254              	.LFB72:
 160:./Src/stm32f1xx_it.c ****   while(1){
 161:./Src/stm32f1xx_it.c ****     __NOP();
 162:./Src/stm32f1xx_it.c ****     __NOP();
 163:./Src/stm32f1xx_it.c ****     __NOP();
 164:./Src/stm32f1xx_it.c ****   }
 165:./Src/stm32f1xx_it.c **** 
 166:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 167:./Src/stm32f1xx_it.c **** 
 168:./Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 169:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 170:./Src/stm32f1xx_it.c **** 
 171:./Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 172:./Src/stm32f1xx_it.c **** }
 173:./Src/stm32f1xx_it.c **** 
 174:./Src/stm32f1xx_it.c **** /**
 175:./Src/stm32f1xx_it.c **** * @brief This function handles Debug monitor.
 176:./Src/stm32f1xx_it.c **** */
 177:./Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 178:./Src/stm32f1xx_it.c **** {
 255              		.loc 1 178 0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 0
 258              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccBcR8ou.s 			page 15


 259              		@ link register save eliminated.
 179:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 180:./Src/stm32f1xx_it.c **** 
 181:./Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 182:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 183:./Src/stm32f1xx_it.c **** 
 184:./Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 185:./Src/stm32f1xx_it.c **** }
 260              		.loc 1 185 0
 261 0000 7047     		bx	lr
 262              		.cfi_endproc
 263              	.LFE72:
 265              		.section	.text.PendSV_Handler,"ax",%progbits
 266              		.align	1
 267              		.global	PendSV_Handler
 268              		.syntax unified
 269              		.thumb
 270              		.thumb_func
 271              		.fpu softvfp
 273              	PendSV_Handler:
 274              	.LFB73:
 186:./Src/stm32f1xx_it.c **** 
 187:./Src/stm32f1xx_it.c **** /**
 188:./Src/stm32f1xx_it.c **** * @brief This function handles Pendable request for system service.
 189:./Src/stm32f1xx_it.c **** */
 190:./Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 191:./Src/stm32f1xx_it.c **** {
 275              		.loc 1 191 0
 276              		.cfi_startproc
 277              		@ Volatile: function does not return.
 278              		@ args = 0, pretend = 0, frame = 0
 279              		@ frame_needed = 0, uses_anonymous_args = 0
 280              		@ link register save eliminated.
 281              	.L19:
 282              	.LBB32:
 283              	.LBB33:
 284              		.loc 2 375 0 discriminator 1
 285              		.syntax unified
 286              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 287 0000 00BF     		nop
 288              	@ 0 "" 2
 289              		.thumb
 290              		.syntax unified
 291              	.LBE33:
 292              	.LBE32:
 293              	.LBB34:
 294              	.LBB35:
 295              		.syntax unified
 296              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 297 0002 00BF     		nop
 298              	@ 0 "" 2
 299              		.thumb
 300              		.syntax unified
 301              	.LBE35:
 302              	.LBE34:
 303              	.LBB36:
 304              	.LBB37:
ARM GAS  /tmp/ccBcR8ou.s 			page 16


 305              		.syntax unified
 306              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 307 0004 00BF     		nop
 308              	@ 0 "" 2
 309              		.thumb
 310              		.syntax unified
 311 0006 FBE7     		b	.L19
 312              	.LBE37:
 313              	.LBE36:
 314              		.cfi_endproc
 315              	.LFE73:
 317              		.section	.text.SysTick_Handler,"ax",%progbits
 318              		.align	1
 319              		.global	SysTick_Handler
 320              		.syntax unified
 321              		.thumb
 322              		.thumb_func
 323              		.fpu softvfp
 325              	SysTick_Handler:
 326              	.LFB74:
 192:./Src/stm32f1xx_it.c ****   while(1){
 193:./Src/stm32f1xx_it.c ****     __NOP();
 194:./Src/stm32f1xx_it.c ****     __NOP();
 195:./Src/stm32f1xx_it.c ****     __NOP();
 196:./Src/stm32f1xx_it.c ****   }
 197:./Src/stm32f1xx_it.c **** 
 198:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 199:./Src/stm32f1xx_it.c **** 
 200:./Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 201:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 202:./Src/stm32f1xx_it.c **** 
 203:./Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 204:./Src/stm32f1xx_it.c **** }
 205:./Src/stm32f1xx_it.c **** 
 206:./Src/stm32f1xx_it.c **** /**
 207:./Src/stm32f1xx_it.c **** * @brief This function handles System tick timer.
 208:./Src/stm32f1xx_it.c **** */
 209:./Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 210:./Src/stm32f1xx_it.c **** {
 327              		.loc 1 210 0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 331 0000 08B5     		push	{r3, lr}
 332              	.LCFI4:
 333              		.cfi_def_cfa_offset 8
 334              		.cfi_offset 3, -8
 335              		.cfi_offset 14, -4
 211:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 212:./Src/stm32f1xx_it.c **** 
 213:./Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 214:./Src/stm32f1xx_it.c ****   HAL_IncTick();
 336              		.loc 1 214 0
 337 0002 FFF7FEFF 		bl	HAL_IncTick
 338              	.LVL8:
 215:./Src/stm32f1xx_it.c ****   HAL_SYSTICK_IRQHandler();
 339              		.loc 1 215 0
ARM GAS  /tmp/ccBcR8ou.s 			page 17


 340 0006 FFF7FEFF 		bl	HAL_SYSTICK_IRQHandler
 341              	.LVL9:
 216:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 217:./Src/stm32f1xx_it.c **** 
 218:./Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 219:./Src/stm32f1xx_it.c **** }
 342              		.loc 1 219 0
 343 000a 08BD     		pop	{r3, pc}
 344              		.cfi_endproc
 345              	.LFE74:
 347              		.section	.text.I2C1_EV_IRQHandler,"ax",%progbits
 348              		.align	1
 349              		.global	I2C1_EV_IRQHandler
 350              		.syntax unified
 351              		.thumb
 352              		.thumb_func
 353              		.fpu softvfp
 355              	I2C1_EV_IRQHandler:
 356              	.LFB75:
 220:./Src/stm32f1xx_it.c **** 
 221:./Src/stm32f1xx_it.c **** /******************************************************************************/
 222:./Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 223:./Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 224:./Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 225:./Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 226:./Src/stm32f1xx_it.c **** /******************************************************************************/
 227:./Src/stm32f1xx_it.c **** 
 228:./Src/stm32f1xx_it.c **** extern I2C_HandleTypeDef hi2c2;
 229:./Src/stm32f1xx_it.c **** void I2C1_EV_IRQHandler(void)
 230:./Src/stm32f1xx_it.c **** {
 357              		.loc 1 230 0
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 0
 360              		@ frame_needed = 0, uses_anonymous_args = 0
 361 0000 08B5     		push	{r3, lr}
 362              	.LCFI5:
 363              		.cfi_def_cfa_offset 8
 364              		.cfi_offset 3, -8
 365              		.cfi_offset 14, -4
 231:./Src/stm32f1xx_it.c ****   HAL_I2C_EV_IRQHandler(&hi2c2);
 366              		.loc 1 231 0
 367 0002 0248     		ldr	r0, .L24
 368 0004 FFF7FEFF 		bl	HAL_I2C_EV_IRQHandler
 369              	.LVL10:
 232:./Src/stm32f1xx_it.c **** }
 370              		.loc 1 232 0
 371 0008 08BD     		pop	{r3, pc}
 372              	.L25:
 373 000a 00BF     		.align	2
 374              	.L24:
 375 000c 00000000 		.word	hi2c2
 376              		.cfi_endproc
 377              	.LFE75:
 379              		.section	.text.I2C1_ER_IRQHandler,"ax",%progbits
 380              		.align	1
 381              		.global	I2C1_ER_IRQHandler
 382              		.syntax unified
ARM GAS  /tmp/ccBcR8ou.s 			page 18


 383              		.thumb
 384              		.thumb_func
 385              		.fpu softvfp
 387              	I2C1_ER_IRQHandler:
 388              	.LFB76:
 233:./Src/stm32f1xx_it.c **** 
 234:./Src/stm32f1xx_it.c **** void I2C1_ER_IRQHandler(void)
 235:./Src/stm32f1xx_it.c **** {
 389              		.loc 1 235 0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 0
 392              		@ frame_needed = 0, uses_anonymous_args = 0
 393 0000 08B5     		push	{r3, lr}
 394              	.LCFI6:
 395              		.cfi_def_cfa_offset 8
 396              		.cfi_offset 3, -8
 397              		.cfi_offset 14, -4
 236:./Src/stm32f1xx_it.c ****   HAL_I2C_ER_IRQHandler(&hi2c2);
 398              		.loc 1 236 0
 399 0002 0248     		ldr	r0, .L28
 400 0004 FFF7FEFF 		bl	HAL_I2C_ER_IRQHandler
 401              	.LVL11:
 237:./Src/stm32f1xx_it.c **** }
 402              		.loc 1 237 0
 403 0008 08BD     		pop	{r3, pc}
 404              	.L29:
 405 000a 00BF     		.align	2
 406              	.L28:
 407 000c 00000000 		.word	hi2c2
 408              		.cfi_endproc
 409              	.LFE76:
 411              		.section	.text.DMA1_Channel4_IRQHandler,"ax",%progbits
 412              		.align	1
 413              		.global	DMA1_Channel4_IRQHandler
 414              		.syntax unified
 415              		.thumb
 416              		.thumb_func
 417              		.fpu softvfp
 419              	DMA1_Channel4_IRQHandler:
 420              	.LFB77:
 238:./Src/stm32f1xx_it.c **** 
 239:./Src/stm32f1xx_it.c **** 
 240:./Src/stm32f1xx_it.c **** /**
 241:./Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel4 global interrupt.
 242:./Src/stm32f1xx_it.c **** */
 243:./Src/stm32f1xx_it.c **** void DMA1_Channel4_IRQHandler(void)
 244:./Src/stm32f1xx_it.c **** {
 421              		.loc 1 244 0
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 0
 424              		@ frame_needed = 0, uses_anonymous_args = 0
 425 0000 08B5     		push	{r3, lr}
 426              	.LCFI7:
 427              		.cfi_def_cfa_offset 8
 428              		.cfi_offset 3, -8
 429              		.cfi_offset 14, -4
 245:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
ARM GAS  /tmp/ccBcR8ou.s 			page 19


 246:./Src/stm32f1xx_it.c **** 
 247:./Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 0 */
 248:./Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 430              		.loc 1 248 0
 431 0002 0248     		ldr	r0, .L32
 432 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 433              	.LVL12:
 249:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
 250:./Src/stm32f1xx_it.c **** 
 251:./Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 1 */
 252:./Src/stm32f1xx_it.c **** }
 434              		.loc 1 252 0
 435 0008 08BD     		pop	{r3, pc}
 436              	.L33:
 437 000a 00BF     		.align	2
 438              	.L32:
 439 000c 00000000 		.word	hdma_i2c2_tx
 440              		.cfi_endproc
 441              	.LFE77:
 443              		.section	.text.DMA1_Channel5_IRQHandler,"ax",%progbits
 444              		.align	1
 445              		.global	DMA1_Channel5_IRQHandler
 446              		.syntax unified
 447              		.thumb
 448              		.thumb_func
 449              		.fpu softvfp
 451              	DMA1_Channel5_IRQHandler:
 452              	.LFB78:
 253:./Src/stm32f1xx_it.c **** 
 254:./Src/stm32f1xx_it.c **** /**
 255:./Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel5 global interrupt.
 256:./Src/stm32f1xx_it.c **** */
 257:./Src/stm32f1xx_it.c **** void DMA1_Channel5_IRQHandler(void)
 258:./Src/stm32f1xx_it.c **** {
 453              		.loc 1 258 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 0, uses_anonymous_args = 0
 457 0000 08B5     		push	{r3, lr}
 458              	.LCFI8:
 459              		.cfi_def_cfa_offset 8
 460              		.cfi_offset 3, -8
 461              		.cfi_offset 14, -4
 259:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
 260:./Src/stm32f1xx_it.c **** 
 261:./Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 262:./Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 462              		.loc 1 262 0
 463 0002 0248     		ldr	r0, .L36
 464 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 465              	.LVL13:
 263:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
 264:./Src/stm32f1xx_it.c **** 
 265:./Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 1 */
 266:./Src/stm32f1xx_it.c **** }
 466              		.loc 1 266 0
 467 0008 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccBcR8ou.s 			page 20


 468              	.L37:
 469 000a 00BF     		.align	2
 470              	.L36:
 471 000c 00000000 		.word	hdma_i2c2_rx
 472              		.cfi_endproc
 473              	.LFE78:
 475              		.section	.text.DMA1_Channel6_IRQHandler,"ax",%progbits
 476              		.align	1
 477              		.global	DMA1_Channel6_IRQHandler
 478              		.syntax unified
 479              		.thumb
 480              		.thumb_func
 481              		.fpu softvfp
 483              	DMA1_Channel6_IRQHandler:
 484              	.LFB79:
 267:./Src/stm32f1xx_it.c **** 
 268:./Src/stm32f1xx_it.c **** /**
 269:./Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel6 global interrupt.
 270:./Src/stm32f1xx_it.c **** */
 271:./Src/stm32f1xx_it.c **** void DMA1_Channel6_IRQHandler(void)
 272:./Src/stm32f1xx_it.c **** {
 485              		.loc 1 272 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489 0000 08B5     		push	{r3, lr}
 490              	.LCFI9:
 491              		.cfi_def_cfa_offset 8
 492              		.cfi_offset 3, -8
 493              		.cfi_offset 14, -4
 273:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
 274:./Src/stm32f1xx_it.c **** 
 275:./Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel6_IRQn 0 */
 276:./Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart2_rx);
 494              		.loc 1 276 0
 495 0002 0248     		ldr	r0, .L40
 496 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 497              	.LVL14:
 277:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
 278:./Src/stm32f1xx_it.c **** 
 279:./Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel6_IRQn 1 */
 280:./Src/stm32f1xx_it.c **** }
 498              		.loc 1 280 0
 499 0008 08BD     		pop	{r3, pc}
 500              	.L41:
 501 000a 00BF     		.align	2
 502              	.L40:
 503 000c 00000000 		.word	hdma_usart2_rx
 504              		.cfi_endproc
 505              	.LFE79:
 507              		.section	.text.DMA1_Channel7_IRQHandler,"ax",%progbits
 508              		.align	1
 509              		.global	DMA1_Channel7_IRQHandler
 510              		.syntax unified
 511              		.thumb
 512              		.thumb_func
 513              		.fpu softvfp
ARM GAS  /tmp/ccBcR8ou.s 			page 21


 515              	DMA1_Channel7_IRQHandler:
 516              	.LFB80:
 281:./Src/stm32f1xx_it.c **** 
 282:./Src/stm32f1xx_it.c **** /**
 283:./Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel7 global interrupt.
 284:./Src/stm32f1xx_it.c **** */
 285:./Src/stm32f1xx_it.c **** void DMA1_Channel7_IRQHandler(void)
 286:./Src/stm32f1xx_it.c **** {
 517              		.loc 1 286 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521 0000 08B5     		push	{r3, lr}
 522              	.LCFI10:
 523              		.cfi_def_cfa_offset 8
 524              		.cfi_offset 3, -8
 525              		.cfi_offset 14, -4
 287:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
 288:./Src/stm32f1xx_it.c **** 
 289:./Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel7_IRQn 0 */
 290:./Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart2_tx);
 526              		.loc 1 290 0
 527 0002 0248     		ldr	r0, .L44
 528 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 529              	.LVL15:
 291:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */
 292:./Src/stm32f1xx_it.c **** 
 293:./Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel7_IRQn 1 */
 294:./Src/stm32f1xx_it.c **** }
 530              		.loc 1 294 0
 531 0008 08BD     		pop	{r3, pc}
 532              	.L45:
 533 000a 00BF     		.align	2
 534              	.L44:
 535 000c 00000000 		.word	hdma_usart2_tx
 536              		.cfi_endproc
 537              	.LFE80:
 539              		.section	.text.I2C2_ER_IRQHandler,"ax",%progbits
 540              		.align	1
 541              		.global	I2C2_ER_IRQHandler
 542              		.syntax unified
 543              		.thumb
 544              		.thumb_func
 545              		.fpu softvfp
 547              	I2C2_ER_IRQHandler:
 548              	.LFB81:
 295:./Src/stm32f1xx_it.c **** 
 296:./Src/stm32f1xx_it.c **** 
 297:./Src/stm32f1xx_it.c **** 
 298:./Src/stm32f1xx_it.c **** /**
 299:./Src/stm32f1xx_it.c **** * @brief This function handles I2C2 error interrupt.
 300:./Src/stm32f1xx_it.c **** */
 301:./Src/stm32f1xx_it.c **** void I2C2_ER_IRQHandler(void)
 302:./Src/stm32f1xx_it.c **** {
 549              		.loc 1 302 0
 550              		.cfi_startproc
 551              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccBcR8ou.s 			page 22


 552              		@ frame_needed = 0, uses_anonymous_args = 0
 553 0000 08B5     		push	{r3, lr}
 554              	.LCFI11:
 555              		.cfi_def_cfa_offset 8
 556              		.cfi_offset 3, -8
 557              		.cfi_offset 14, -4
 303:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN I2C2_ER_IRQn 0 */
 304:./Src/stm32f1xx_it.c **** 
 305:./Src/stm32f1xx_it.c ****   /* USER CODE END I2C2_ER_IRQn 0 */
 306:./Src/stm32f1xx_it.c ****   HAL_I2C_ER_IRQHandler(&hi2c2);
 558              		.loc 1 306 0
 559 0002 0248     		ldr	r0, .L48
 560 0004 FFF7FEFF 		bl	HAL_I2C_ER_IRQHandler
 561              	.LVL16:
 307:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN I2C2_ER_IRQn 1 */
 308:./Src/stm32f1xx_it.c **** 
 309:./Src/stm32f1xx_it.c ****   /* USER CODE END I2C2_ER_IRQn 1 */
 310:./Src/stm32f1xx_it.c **** }
 562              		.loc 1 310 0
 563 0008 08BD     		pop	{r3, pc}
 564              	.L49:
 565 000a 00BF     		.align	2
 566              	.L48:
 567 000c 00000000 		.word	hi2c2
 568              		.cfi_endproc
 569              	.LFE81:
 571              		.section	.text.EXTI15_10_IRQHandler,"ax",%progbits
 572              		.align	1
 573              		.global	EXTI15_10_IRQHandler
 574              		.syntax unified
 575              		.thumb
 576              		.thumb_func
 577              		.fpu softvfp
 579              	EXTI15_10_IRQHandler:
 580              	.LFB82:
 311:./Src/stm32f1xx_it.c **** 
 312:./Src/stm32f1xx_it.c **** /**
 313:./Src/stm32f1xx_it.c **** * @brief This function handles EXTI line[15:10] interrupts.
 314:./Src/stm32f1xx_it.c **** */
 315:./Src/stm32f1xx_it.c **** void EXTI15_10_IRQHandler(void)
 316:./Src/stm32f1xx_it.c **** {
 581              		.loc 1 316 0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 0
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 585 0000 08B5     		push	{r3, lr}
 586              	.LCFI12:
 587              		.cfi_def_cfa_offset 8
 588              		.cfi_offset 3, -8
 589              		.cfi_offset 14, -4
 317:./Src/stm32f1xx_it.c ****   if((__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != RESET)||
 590              		.loc 1 317 0
 591 0002 0E4B     		ldr	r3, .L54
 592 0004 5B69     		ldr	r3, [r3, #20]
 593 0006 13F4806F 		tst	r3, #1024
 594 000a 09D1     		bne	.L51
 318:./Src/stm32f1xx_it.c ****     (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_11) != RESET)||
ARM GAS  /tmp/ccBcR8ou.s 			page 23


 595              		.loc 1 318 0 discriminator 1
 596 000c 0B4B     		ldr	r3, .L54
 597 000e 5B69     		ldr	r3, [r3, #20]
 317:./Src/stm32f1xx_it.c ****   if((__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != RESET)||
 598              		.loc 1 317 0 discriminator 1
 599 0010 13F4006F 		tst	r3, #2048
 600 0014 04D1     		bne	.L51
 319:./Src/stm32f1xx_it.c ****     (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_12) != RESET))
 601              		.loc 1 319 0
 602 0016 094B     		ldr	r3, .L54
 603 0018 5B69     		ldr	r3, [r3, #20]
 318:./Src/stm32f1xx_it.c ****     (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_11) != RESET)||
 604              		.loc 1 318 0
 605 001a 13F4805F 		tst	r3, #4096
 606 001e 0BD0     		beq	.L50
 607              	.L51:
 320:./Src/stm32f1xx_it.c ****   {
 321:./Src/stm32f1xx_it.c **** 
 322:./Src/stm32f1xx_it.c ****     HALL_R_ISR_Callback();
 608              		.loc 1 322 0
 609 0020 FFF7FEFF 		bl	HALL_R_ISR_Callback
 610              	.LVL17:
 323:./Src/stm32f1xx_it.c ****      
 324:./Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 611              		.loc 1 324 0
 612 0024 054B     		ldr	r3, .L54
 613 0026 4FF48062 		mov	r2, #1024
 614 002a 5A61     		str	r2, [r3, #20]
 325:./Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 615              		.loc 1 325 0
 616 002c 4FF40062 		mov	r2, #2048
 617 0030 5A61     		str	r2, [r3, #20]
 326:./Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 618              		.loc 1 326 0
 619 0032 4FF48052 		mov	r2, #4096
 620 0036 5A61     		str	r2, [r3, #20]
 621              	.L50:
 327:./Src/stm32f1xx_it.c ****   }  
 328:./Src/stm32f1xx_it.c **** }
 622              		.loc 1 328 0
 623 0038 08BD     		pop	{r3, pc}
 624              	.L55:
 625 003a 00BF     		.align	2
 626              	.L54:
 627 003c 00040140 		.word	1073808384
 628              		.cfi_endproc
 629              	.LFE82:
 631              		.section	.text.EXTI9_5_IRQHandler,"ax",%progbits
 632              		.align	1
 633              		.global	EXTI9_5_IRQHandler
 634              		.syntax unified
 635              		.thumb
 636              		.thumb_func
 637              		.fpu softvfp
 639              	EXTI9_5_IRQHandler:
 640              	.LFB83:
 329:./Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccBcR8ou.s 			page 24


 330:./Src/stm32f1xx_it.c **** /**
 331:./Src/stm32f1xx_it.c **** * @brief This function handles TIM1 capture compare interrupt.
 332:./Src/stm32f1xx_it.c **** */
 333:./Src/stm32f1xx_it.c **** 
 334:./Src/stm32f1xx_it.c **** 
 335:./Src/stm32f1xx_it.c **** /**
 336:./Src/stm32f1xx_it.c **** * @brief This function handles EXTI line[9:5] interrupts.
 337:./Src/stm32f1xx_it.c **** */
 338:./Src/stm32f1xx_it.c **** void EXTI9_5_IRQHandler(void)
 339:./Src/stm32f1xx_it.c **** {
 641              		.loc 1 339 0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645 0000 08B5     		push	{r3, lr}
 646              	.LCFI13:
 647              		.cfi_def_cfa_offset 8
 648              		.cfi_offset 3, -8
 649              		.cfi_offset 14, -4
 340:./Src/stm32f1xx_it.c ****   if((__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5) != RESET)||
 650              		.loc 1 340 0
 651 0002 0C4B     		ldr	r3, .L60
 652 0004 5B69     		ldr	r3, [r3, #20]
 653 0006 13F0200F 		tst	r3, #32
 654 000a 09D1     		bne	.L57
 341:./Src/stm32f1xx_it.c ****     (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET)||
 655              		.loc 1 341 0 discriminator 1
 656 000c 094B     		ldr	r3, .L60
 657 000e 5B69     		ldr	r3, [r3, #20]
 340:./Src/stm32f1xx_it.c ****   if((__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5) != RESET)||
 658              		.loc 1 340 0 discriminator 1
 659 0010 13F0400F 		tst	r3, #64
 660 0014 04D1     		bne	.L57
 342:./Src/stm32f1xx_it.c ****     (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET))
 661              		.loc 1 342 0
 662 0016 074B     		ldr	r3, .L60
 663 0018 5B69     		ldr	r3, [r3, #20]
 341:./Src/stm32f1xx_it.c ****     (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET)||
 664              		.loc 1 341 0
 665 001a 13F0800F 		tst	r3, #128
 666 001e 08D0     		beq	.L56
 667              	.L57:
 343:./Src/stm32f1xx_it.c ****   {
 344:./Src/stm32f1xx_it.c **** 
 345:./Src/stm32f1xx_it.c ****     HALL_L_ISR_Callback();
 668              		.loc 1 345 0
 669 0020 FFF7FEFF 		bl	HALL_L_ISR_Callback
 670              	.LVL18:
 346:./Src/stm32f1xx_it.c ****      
 347:./Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 671              		.loc 1 347 0
 672 0024 034B     		ldr	r3, .L60
 673 0026 2022     		movs	r2, #32
 674 0028 5A61     		str	r2, [r3, #20]
 348:./Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 675              		.loc 1 348 0
 676 002a 4022     		movs	r2, #64
ARM GAS  /tmp/ccBcR8ou.s 			page 25


 677 002c 5A61     		str	r2, [r3, #20]
 349:./Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 678              		.loc 1 349 0
 679 002e 8022     		movs	r2, #128
 680 0030 5A61     		str	r2, [r3, #20]
 681              	.L56:
 350:./Src/stm32f1xx_it.c ****   }  
 351:./Src/stm32f1xx_it.c **** }
 682              		.loc 1 351 0
 683 0032 08BD     		pop	{r3, pc}
 684              	.L61:
 685              		.align	2
 686              	.L60:
 687 0034 00040140 		.word	1073808384
 688              		.cfi_endproc
 689              	.LFE83:
 691              		.section	.text.TIM1_CC_IRQHandler,"ax",%progbits
 692              		.align	1
 693              		.global	TIM1_CC_IRQHandler
 694              		.syntax unified
 695              		.thumb
 696              		.thumb_func
 697              		.fpu softvfp
 699              	TIM1_CC_IRQHandler:
 700              	.LFB84:
 352:./Src/stm32f1xx_it.c **** 
 353:./Src/stm32f1xx_it.c **** /**
 354:./Src/stm32f1xx_it.c **** * @brief This function handles TIM8 capture compare interrupt.
 355:./Src/stm32f1xx_it.c **** */
 356:./Src/stm32f1xx_it.c **** void TIM1_CC_IRQHandler(void)
 357:./Src/stm32f1xx_it.c **** {
 701              		.loc 1 357 0
 702              		.cfi_startproc
 703              		@ args = 0, pretend = 0, frame = 0
 704              		@ frame_needed = 0, uses_anonymous_args = 0
 705 0000 08B5     		push	{r3, lr}
 706              	.LCFI14:
 707              		.cfi_def_cfa_offset 8
 708              		.cfi_offset 3, -8
 709              		.cfi_offset 14, -4
 358:./Src/stm32f1xx_it.c ****   //DebugPin4_ON();
 359:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC1);
 710              		.loc 1 359 0
 711 0002 0A4B     		ldr	r3, .L64
 712 0004 1B68     		ldr	r3, [r3]
 713 0006 6FF00202 		mvn	r2, #2
 714 000a 1A61     		str	r2, [r3, #16]
 360:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC2);
 715              		.loc 1 360 0
 716 000c 6FF00402 		mvn	r2, #4
 717 0010 1A61     		str	r2, [r3, #16]
 361:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC3);
 718              		.loc 1 361 0
 719 0012 6FF00802 		mvn	r2, #8
 720 0016 1A61     		str	r2, [r3, #16]
 362:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC4);
 721              		.loc 1 362 0
ARM GAS  /tmp/ccBcR8ou.s 			page 26


 722 0018 6FF01002 		mvn	r2, #16
 723 001c 1A61     		str	r2, [r3, #16]
 363:./Src/stm32f1xx_it.c ****   
 364:./Src/stm32f1xx_it.c ****   PWM_R_ISR_Callback();  
 724              		.loc 1 364 0
 725 001e FFF7FEFF 		bl	PWM_R_ISR_Callback
 726              	.LVL19:
 365:./Src/stm32f1xx_it.c ****   HAL_ADC_Start(&hadc1);
 727              		.loc 1 365 0
 728 0022 0348     		ldr	r0, .L64+4
 729 0024 FFF7FEFF 		bl	HAL_ADC_Start
 730              	.LVL20:
 366:./Src/stm32f1xx_it.c ****   //DebugPin4_OFF();  
 367:./Src/stm32f1xx_it.c **** }
 731              		.loc 1 367 0
 732 0028 08BD     		pop	{r3, pc}
 733              	.L65:
 734 002a 00BF     		.align	2
 735              	.L64:
 736 002c 00000000 		.word	htim1
 737 0030 00000000 		.word	hadc1
 738              		.cfi_endproc
 739              	.LFE84:
 741              		.section	.text.TIM8_CC_IRQHandler,"ax",%progbits
 742              		.align	1
 743              		.global	TIM8_CC_IRQHandler
 744              		.syntax unified
 745              		.thumb
 746              		.thumb_func
 747              		.fpu softvfp
 749              	TIM8_CC_IRQHandler:
 750              	.LFB85:
 368:./Src/stm32f1xx_it.c **** void TIM8_CC_IRQHandler(void)
 369:./Src/stm32f1xx_it.c **** {
 751              		.loc 1 369 0
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 0
 754              		@ frame_needed = 0, uses_anonymous_args = 0
 755 0000 08B5     		push	{r3, lr}
 756              	.LCFI15:
 757              		.cfi_def_cfa_offset 8
 758              		.cfi_offset 3, -8
 759              		.cfi_offset 14, -4
 370:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim8, TIM_IT_CC1);
 760              		.loc 1 370 0
 761 0002 0A4B     		ldr	r3, .L68
 762 0004 1B68     		ldr	r3, [r3]
 763 0006 6FF00202 		mvn	r2, #2
 764 000a 1A61     		str	r2, [r3, #16]
 371:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim8, TIM_IT_CC2);
 765              		.loc 1 371 0
 766 000c 6FF00402 		mvn	r2, #4
 767 0010 1A61     		str	r2, [r3, #16]
 372:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim8, TIM_IT_CC3);
 768              		.loc 1 372 0
 769 0012 6FF00802 		mvn	r2, #8
 770 0016 1A61     		str	r2, [r3, #16]
ARM GAS  /tmp/ccBcR8ou.s 			page 27


 373:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim8, TIM_IT_CC4);
 771              		.loc 1 373 0
 772 0018 6FF01002 		mvn	r2, #16
 773 001c 1A61     		str	r2, [r3, #16]
 374:./Src/stm32f1xx_it.c ****   
 375:./Src/stm32f1xx_it.c ****   PWM_L_ISR_Callback();  
 774              		.loc 1 375 0
 775 001e FFF7FEFF 		bl	PWM_L_ISR_Callback
 776              	.LVL21:
 376:./Src/stm32f1xx_it.c ****   HAL_ADC_Start(&hadc3);
 777              		.loc 1 376 0
 778 0022 0348     		ldr	r0, .L68+4
 779 0024 FFF7FEFF 		bl	HAL_ADC_Start
 780              	.LVL22:
 377:./Src/stm32f1xx_it.c **** }
 781              		.loc 1 377 0
 782 0028 08BD     		pop	{r3, pc}
 783              	.L69:
 784 002a 00BF     		.align	2
 785              	.L68:
 786 002c 00000000 		.word	htim8
 787 0030 00000000 		.word	hadc3
 788              		.cfi_endproc
 789              	.LFE85:
 791              		.section	.text.DMA1_Channel1_IRQHandler,"ax",%progbits
 792              		.align	1
 793              		.global	DMA1_Channel1_IRQHandler
 794              		.syntax unified
 795              		.thumb
 796              		.thumb_func
 797              		.fpu softvfp
 799              	DMA1_Channel1_IRQHandler:
 800              	.LFB86:
 378:./Src/stm32f1xx_it.c **** 
 379:./Src/stm32f1xx_it.c **** //ADC1 -PC1-PC2-
 380:./Src/stm32f1xx_it.c **** void DMA1_Channel1_IRQHandler(void)
 381:./Src/stm32f1xx_it.c **** {
 801              		.loc 1 381 0
 802              		.cfi_startproc
 803              		@ args = 0, pretend = 0, frame = 0
 804              		@ frame_needed = 0, uses_anonymous_args = 0
 805 0000 08B5     		push	{r3, lr}
 806              	.LCFI16:
 807              		.cfi_def_cfa_offset 8
 808              		.cfi_offset 3, -8
 809              		.cfi_offset 14, -4
 382:./Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_adc1); 
 810              		.loc 1 382 0
 811 0002 0248     		ldr	r0, .L72
 812 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 813              	.LVL23:
 383:./Src/stm32f1xx_it.c **** }
 814              		.loc 1 383 0
 815 0008 08BD     		pop	{r3, pc}
 816              	.L73:
 817 000a 00BF     		.align	2
 818              	.L72:
ARM GAS  /tmp/ccBcR8ou.s 			page 28


 819 000c 00000000 		.word	hdma_adc1
 820              		.cfi_endproc
 821              	.LFE86:
 823              		.section	.text.DMA2_Channel4_5_IRQHandler,"ax",%progbits
 824              		.align	1
 825              		.global	DMA2_Channel4_5_IRQHandler
 826              		.syntax unified
 827              		.thumb
 828              		.thumb_func
 829              		.fpu softvfp
 831              	DMA2_Channel4_5_IRQHandler:
 832              	.LFB87:
 384:./Src/stm32f1xx_it.c **** //ADC3 -PC0-
 385:./Src/stm32f1xx_it.c **** void DMA2_Channel4_5_IRQHandler(void)
 386:./Src/stm32f1xx_it.c **** {
 833              		.loc 1 386 0
 834              		.cfi_startproc
 835              		@ args = 0, pretend = 0, frame = 0
 836              		@ frame_needed = 0, uses_anonymous_args = 0
 837 0000 08B5     		push	{r3, lr}
 838              	.LCFI17:
 839              		.cfi_def_cfa_offset 8
 840              		.cfi_offset 3, -8
 841              		.cfi_offset 14, -4
 387:./Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_adc3);
 842              		.loc 1 387 0
 843 0002 0248     		ldr	r0, .L76
 844 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 845              	.LVL24:
 388:./Src/stm32f1xx_it.c **** }
 846              		.loc 1 388 0
 847 0008 08BD     		pop	{r3, pc}
 848              	.L77:
 849 000a 00BF     		.align	2
 850              	.L76:
 851 000c 00000000 		.word	hdma_adc3
 852              		.cfi_endproc
 853              	.LFE87:
 855              		.section	.text.TIM3_IRQHandler,"ax",%progbits
 856              		.align	1
 857              		.global	TIM3_IRQHandler
 858              		.syntax unified
 859              		.thumb
 860              		.thumb_func
 861              		.fpu softvfp
 863              	TIM3_IRQHandler:
 864              	.LFB88:
 389:./Src/stm32f1xx_it.c **** 
 390:./Src/stm32f1xx_it.c **** 
 391:./Src/stm32f1xx_it.c **** //extern volatile __IO int32_t testVelR;
 392:./Src/stm32f1xx_it.c **** 
 393:./Src/stm32f1xx_it.c **** //PID
 394:./Src/stm32f1xx_it.c **** void TIM3_IRQHandler(void)
 395:./Src/stm32f1xx_it.c **** {
 865              		.loc 1 395 0
 866              		.cfi_startproc
 867              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccBcR8ou.s 			page 29


 868              		@ frame_needed = 0, uses_anonymous_args = 0
 869              		@ link register save eliminated.
 396:./Src/stm32f1xx_it.c ****   //DebugPin4_ON(); 
 397:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&Tim3PID, TIM_IT_UPDATE);
 870              		.loc 1 397 0
 871 0000 024B     		ldr	r3, .L79
 872 0002 1B68     		ldr	r3, [r3]
 873 0004 6FF00102 		mvn	r2, #1
 874 0008 1A61     		str	r2, [r3, #16]
 398:./Src/stm32f1xx_it.c ****   //DebugPin4_OFF(); 
 399:./Src/stm32f1xx_it.c **** //testVelR = 0;  
 400:./Src/stm32f1xx_it.c **** }
 875              		.loc 1 400 0
 876 000a 7047     		bx	lr
 877              	.L80:
 878              		.align	2
 879              	.L79:
 880 000c 00000000 		.word	Tim3PID
 881              		.cfi_endproc
 882              	.LFE88:
 884              		.text
 885              	.Letext0:
 886              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 887              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 888              		.file 5 "./Drivers/CMSIS/Include/core_cm3.h"
 889              		.file 6 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 890              		.file 7 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 891              		.file 8 "/usr/arm-none-eabi/include/sys/lock.h"
 892              		.file 9 "/usr/arm-none-eabi/include/sys/_types.h"
 893              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.2.0/include/stddef.h"
 894              		.file 11 "/usr/arm-none-eabi/include/sys/reent.h"
 895              		.file 12 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 896              		.file 13 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 897              		.file 14 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 898              		.file 15 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 899              		.file 16 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 900              		.file 17 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 901              		.file 18 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 902              		.file 19 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 903              		.file 20 "./Inc/motor_R.h"
 904              		.file 21 "./Inc/motor_L.h"
ARM GAS  /tmp/ccBcR8ou.s 			page 30


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/ccBcR8ou.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccBcR8ou.s:23     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccBcR8ou.s:70     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccBcR8ou.s:77     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccBcR8ou.s:101    .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccBcR8ou.s:108    .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccBcR8ou.s:132    .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccBcR8ou.s:139    .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccBcR8ou.s:163    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccBcR8ou.s:170    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccBcR8ou.s:194    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccBcR8ou.s:201    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccBcR8ou.s:246    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccBcR8ou.s:253    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccBcR8ou.s:266    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccBcR8ou.s:273    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccBcR8ou.s:318    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccBcR8ou.s:325    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccBcR8ou.s:348    .text.I2C1_EV_IRQHandler:0000000000000000 $t
     /tmp/ccBcR8ou.s:355    .text.I2C1_EV_IRQHandler:0000000000000000 I2C1_EV_IRQHandler
     /tmp/ccBcR8ou.s:375    .text.I2C1_EV_IRQHandler:000000000000000c $d
     /tmp/ccBcR8ou.s:380    .text.I2C1_ER_IRQHandler:0000000000000000 $t
     /tmp/ccBcR8ou.s:387    .text.I2C1_ER_IRQHandler:0000000000000000 I2C1_ER_IRQHandler
     /tmp/ccBcR8ou.s:407    .text.I2C1_ER_IRQHandler:000000000000000c $d
     /tmp/ccBcR8ou.s:412    .text.DMA1_Channel4_IRQHandler:0000000000000000 $t
     /tmp/ccBcR8ou.s:419    .text.DMA1_Channel4_IRQHandler:0000000000000000 DMA1_Channel4_IRQHandler
     /tmp/ccBcR8ou.s:439    .text.DMA1_Channel4_IRQHandler:000000000000000c $d
     /tmp/ccBcR8ou.s:444    .text.DMA1_Channel5_IRQHandler:0000000000000000 $t
     /tmp/ccBcR8ou.s:451    .text.DMA1_Channel5_IRQHandler:0000000000000000 DMA1_Channel5_IRQHandler
     /tmp/ccBcR8ou.s:471    .text.DMA1_Channel5_IRQHandler:000000000000000c $d
     /tmp/ccBcR8ou.s:476    .text.DMA1_Channel6_IRQHandler:0000000000000000 $t
     /tmp/ccBcR8ou.s:483    .text.DMA1_Channel6_IRQHandler:0000000000000000 DMA1_Channel6_IRQHandler
     /tmp/ccBcR8ou.s:503    .text.DMA1_Channel6_IRQHandler:000000000000000c $d
     /tmp/ccBcR8ou.s:508    .text.DMA1_Channel7_IRQHandler:0000000000000000 $t
     /tmp/ccBcR8ou.s:515    .text.DMA1_Channel7_IRQHandler:0000000000000000 DMA1_Channel7_IRQHandler
     /tmp/ccBcR8ou.s:535    .text.DMA1_Channel7_IRQHandler:000000000000000c $d
     /tmp/ccBcR8ou.s:540    .text.I2C2_ER_IRQHandler:0000000000000000 $t
     /tmp/ccBcR8ou.s:547    .text.I2C2_ER_IRQHandler:0000000000000000 I2C2_ER_IRQHandler
     /tmp/ccBcR8ou.s:567    .text.I2C2_ER_IRQHandler:000000000000000c $d
     /tmp/ccBcR8ou.s:572    .text.EXTI15_10_IRQHandler:0000000000000000 $t
     /tmp/ccBcR8ou.s:579    .text.EXTI15_10_IRQHandler:0000000000000000 EXTI15_10_IRQHandler
     /tmp/ccBcR8ou.s:627    .text.EXTI15_10_IRQHandler:000000000000003c $d
     /tmp/ccBcR8ou.s:632    .text.EXTI9_5_IRQHandler:0000000000000000 $t
     /tmp/ccBcR8ou.s:639    .text.EXTI9_5_IRQHandler:0000000000000000 EXTI9_5_IRQHandler
     /tmp/ccBcR8ou.s:687    .text.EXTI9_5_IRQHandler:0000000000000034 $d
     /tmp/ccBcR8ou.s:692    .text.TIM1_CC_IRQHandler:0000000000000000 $t
     /tmp/ccBcR8ou.s:699    .text.TIM1_CC_IRQHandler:0000000000000000 TIM1_CC_IRQHandler
     /tmp/ccBcR8ou.s:736    .text.TIM1_CC_IRQHandler:000000000000002c $d
     /tmp/ccBcR8ou.s:742    .text.TIM8_CC_IRQHandler:0000000000000000 $t
     /tmp/ccBcR8ou.s:749    .text.TIM8_CC_IRQHandler:0000000000000000 TIM8_CC_IRQHandler
     /tmp/ccBcR8ou.s:786    .text.TIM8_CC_IRQHandler:000000000000002c $d
     /tmp/ccBcR8ou.s:792    .text.DMA1_Channel1_IRQHandler:0000000000000000 $t
     /tmp/ccBcR8ou.s:799    .text.DMA1_Channel1_IRQHandler:0000000000000000 DMA1_Channel1_IRQHandler
     /tmp/ccBcR8ou.s:819    .text.DMA1_Channel1_IRQHandler:000000000000000c $d
     /tmp/ccBcR8ou.s:824    .text.DMA2_Channel4_5_IRQHandler:0000000000000000 $t
ARM GAS  /tmp/ccBcR8ou.s 			page 31


     /tmp/ccBcR8ou.s:831    .text.DMA2_Channel4_5_IRQHandler:0000000000000000 DMA2_Channel4_5_IRQHandler
     /tmp/ccBcR8ou.s:851    .text.DMA2_Channel4_5_IRQHandler:000000000000000c $d
     /tmp/ccBcR8ou.s:856    .text.TIM3_IRQHandler:0000000000000000 $t
     /tmp/ccBcR8ou.s:863    .text.TIM3_IRQHandler:0000000000000000 TIM3_IRQHandler
     /tmp/ccBcR8ou.s:880    .text.TIM3_IRQHandler:000000000000000c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
MotorR_stop
MotorL_stop
HAL_IncTick
HAL_SYSTICK_IRQHandler
HAL_I2C_EV_IRQHandler
hi2c2
HAL_I2C_ER_IRQHandler
HAL_DMA_IRQHandler
hdma_i2c2_tx
hdma_i2c2_rx
hdma_usart2_rx
hdma_usart2_tx
HALL_R_ISR_Callback
HALL_L_ISR_Callback
PWM_R_ISR_Callback
HAL_ADC_Start
htim1
hadc1
PWM_L_ISR_Callback
htim8
hadc3
hdma_adc1
hdma_adc3
Tim3PID
