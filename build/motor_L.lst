ARM GAS  /tmp/ccX4v3II.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"motor_L.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.mL_HallSensor_init,"ax",%progbits
  16              		.align	1
  17              		.global	mL_HallSensor_init
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	mL_HallSensor_init:
  24              	.LFB71:
  25              		.file 1 "./Src/motor_L.c"
   1:./Src/motor_L.c **** #include "motor_L.h"
   2:./Src/motor_L.c **** #include "stm32f1xx_hal.h"
   3:./Src/motor_L.c **** #include "ADC_L.h"
   4:./Src/motor_L.c **** 
   5:./Src/motor_L.c **** TIM_HandleTypeDef htim8;
   6:./Src/motor_L.c **** 
   7:./Src/motor_L.c **** #define PWL_MOTOR_LEFT 25000                    //PWM
   8:./Src/motor_L.c **** volatile __IO struct MOTOR_Ldati motorL;
   9:./Src/motor_L.c **** 
  10:./Src/motor_L.c **** // PULBLIC
  11:./Src/motor_L.c **** void MotorL_init(void){
  12:./Src/motor_L.c ****   MX_TIM8_Init();
  13:./Src/motor_L.c ****   mL_HallSensor_init();
  14:./Src/motor_L.c ****   
  15:./Src/motor_L.c ****   motorL.BLDCMotorL_count= 0;
  16:./Src/motor_L.c ****   motorL.BLDCMotorL_flag = 0; 
  17:./Src/motor_L.c ****   motorL.BLDCMotorL_velRAW = 0;
  18:./Src/motor_L.c ****   motorL.BLDCMotorL_deltavel = 0;
  19:./Src/motor_L.c ****   
  20:./Src/motor_L.c ****   MotorL_stop();
  21:./Src/motor_L.c **** }
  22:./Src/motor_L.c **** 
  23:./Src/motor_L.c **** void MotorL_start(void){
  24:./Src/motor_L.c ****   mL_PWM_Set_ChALL(0);
  25:./Src/motor_L.c ****   motorL.BLDCMotorL_deltavel = 0;
  26:./Src/motor_L.c ****   motorL.BLDCMotorL_velRAW = 0;
  27:./Src/motor_L.c ****   HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  28:./Src/motor_L.c ****   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);  
  29:./Src/motor_L.c ****   mL_PWM_Set_ChALL(0);
  30:./Src/motor_L.c ****   motorL.stop = 0;  
  31:./Src/motor_L.c ****   mL_BLDCMotor();
  32:./Src/motor_L.c **** }
  33:./Src/motor_L.c **** 
ARM GAS  /tmp/ccX4v3II.s 			page 2


  34:./Src/motor_L.c **** void MotorL_pwm(int16_t value_percent){
  35:./Src/motor_L.c ****   static uint8_t last_motorL=0;
  36:./Src/motor_L.c ****   static uint8_t last_motorLStop=0;
  37:./Src/motor_L.c ****  
  38:./Src/motor_L.c ****   if(value_percent > 1000){
  39:./Src/motor_L.c ****     value_percent = 1000;
  40:./Src/motor_L.c ****   }
  41:./Src/motor_L.c ****   if(value_percent < -1000){
  42:./Src/motor_L.c ****     value_percent = -1000;
  43:./Src/motor_L.c ****   }
  44:./Src/motor_L.c ****   if(value_percent < 0){
  45:./Src/motor_L.c ****     value_percent = value_percent * -1;
  46:./Src/motor_L.c **** 
  47:./Src/motor_L.c ****     if(last_motorL==0){
  48:./Src/motor_L.c ****       mL_PWM_Set_ChALL(value_percent);
  49:./Src/motor_L.c ****     }
  50:./Src/motor_L.c ****     motorL.reverse = 1;
  51:./Src/motor_L.c ****     last_motorL = 1;
  52:./Src/motor_L.c ****   }else{
  53:./Src/motor_L.c ****     if(last_motorL==1){
  54:./Src/motor_L.c ****       mL_PWM_Set_ChALL(value_percent);
  55:./Src/motor_L.c ****     }
  56:./Src/motor_L.c ****      motorL.reverse = 0;
  57:./Src/motor_L.c ****      last_motorL = 0;
  58:./Src/motor_L.c ****   }
  59:./Src/motor_L.c ****   
  60:./Src/motor_L.c **** if((value_percent >= -5)&&(value_percent <= 5)){ //da fare > e < soglie !!
  61:./Src/motor_L.c ****     motorL.stop = 1;    //ferma motore
  62:./Src/motor_L.c ****     last_motorLStop = 1;    
  63:./Src/motor_L.c ****   }else{
  64:./Src/motor_L.c ****     motorL.stop = 0;
  65:./Src/motor_L.c ****     if(last_motorLStop){
  66:./Src/motor_L.c ****         //riattiva
  67:./Src/motor_L.c ****         mL_BLDCMotor();
  68:./Src/motor_L.c ****     }
  69:./Src/motor_L.c ****     last_motorLStop = 0;    
  70:./Src/motor_L.c ****   }
  71:./Src/motor_L.c ****   
  72:./Src/motor_L.c ****   mL_PWM_Set_ChALL(value_percent);
  73:./Src/motor_L.c **** }
  74:./Src/motor_L.c **** 
  75:./Src/motor_L.c **** void MotorL_stop(void){
  76:./Src/motor_L.c ****   mL_PWM_Set_ChALL(0);
  77:./Src/motor_L.c ****   motorL.stop = 1;
  78:./Src/motor_L.c ****   mL_Low_CH1_OFF();
  79:./Src/motor_L.c ****   mL_Low_CH2_OFF();
  80:./Src/motor_L.c ****   mL_Low_CH3_OFF();
  81:./Src/motor_L.c ****   mL_AHigh__OFF();
  82:./Src/motor_L.c ****   mL_BHigh__OFF();
  83:./Src/motor_L.c ****   mL_CHigh__OFF();
  84:./Src/motor_L.c **** 
  85:./Src/motor_L.c ****   HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  86:./Src/motor_L.c ****   HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
  87:./Src/motor_L.c ****   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
  88:./Src/motor_L.c ****   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
  89:./Src/motor_L.c ****   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);  
  90:./Src/motor_L.c ****     motorL.BLDCMotorL_count= 0;
ARM GAS  /tmp/ccX4v3II.s 			page 3


  91:./Src/motor_L.c ****     motorL.BLDCMotorL_flag = 0;
  92:./Src/motor_L.c **** }
  93:./Src/motor_L.c ****     
  94:./Src/motor_L.c **** // PRIVATE
  95:./Src/motor_L.c **** /* TIM8 init function */
  96:./Src/motor_L.c **** void MX_TIM8_Init(void)
  97:./Src/motor_L.c **** {
  98:./Src/motor_L.c ****   GPIO_InitTypeDef GPIO_InitStruct;
  99:./Src/motor_L.c ****   //TIM_MasterConfigTypeDef sMasterConfig;
 100:./Src/motor_L.c ****   TIM_OC_InitTypeDef sConfigOC;
 101:./Src/motor_L.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
 102:./Src/motor_L.c **** 
 103:./Src/motor_L.c ****    __HAL_RCC_TIM8_CLK_ENABLE();
 104:./Src/motor_L.c ****    
 105:./Src/motor_L.c ****   motorL.uwPeriodValue = (uint32_t) ((SystemCoreClock  / PWL_MOTOR_LEFT) - 1); //18000
 106:./Src/motor_L.c ****   
 107:./Src/motor_L.c ****   /*
 108:./Src/motor_L.c ****   htim8.Instance = TIM8;
 109:./Src/motor_L.c ****   htim8.Init.Prescaler = 0;
 110:./Src/motor_L.c ****   htim8.Init.CounterMode = TIM_COUNTERMODE_UP; //TIM_COUNTERMODE_UP;
 111:./Src/motor_L.c ****   htim8.Init.Period = motorL.uwPeriodValue;
 112:./Src/motor_L.c ****   htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 113:./Src/motor_L.c ****   htim8.Init.RepetitionCounter = 0;
 114:./Src/motor_L.c ****   if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 115:./Src/motor_L.c ****   {
 116:./Src/motor_L.c ****     Error_Handler();
 117:./Src/motor_L.c ****   }
 118:./Src/motor_L.c **** 
 119:./Src/motor_L.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET; //TIM_TRGO_RESET;
 120:./Src/motor_L.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 121:./Src/motor_L.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 122:./Src/motor_L.c ****   {
 123:./Src/motor_L.c ****     Error_Handler();
 124:./Src/motor_L.c ****   }
 125:./Src/motor_L.c **** 
 126:./Src/motor_L.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 127:./Src/motor_L.c ****   sConfigOC.Pulse = 0;
 128:./Src/motor_L.c ****   sConfigOC.OCPolarity = TIM_OCNPOLARITY_HIGH; //TIM_OCPOLARITY_LOW;
 129:./Src/motor_L.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 130:./Src/motor_L.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 131:./Src/motor_L.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 132:./Src/motor_L.c ****   sConfigOC.OCNIdleState = TIM_OCIDLESTATE_RESET; //TIM_OCNIDLESTATE_SET;
 133:./Src/motor_L.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 134:./Src/motor_L.c ****   {
 135:./Src/motor_L.c ****     Error_Handler();
 136:./Src/motor_L.c ****   }
 137:./Src/motor_L.c **** 
 138:./Src/motor_L.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 139:./Src/motor_L.c ****   {
 140:./Src/motor_L.c ****     Error_Handler();
 141:./Src/motor_L.c ****   }
 142:./Src/motor_L.c **** 
 143:./Src/motor_L.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 144:./Src/motor_L.c ****   {
 145:./Src/motor_L.c ****     Error_Handler();
 146:./Src/motor_L.c ****   }
 147:./Src/motor_L.c ****     sConfigOC.Pulse = 0;
ARM GAS  /tmp/ccX4v3II.s 			page 4


 148:./Src/motor_L.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 149:./Src/motor_L.c ****   {
 150:./Src/motor_L.c ****     Error_Handler();
 151:./Src/motor_L.c ****   }
 152:./Src/motor_L.c ****     
 153:./Src/motor_L.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 154:./Src/motor_L.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 155:./Src/motor_L.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 156:./Src/motor_L.c ****   sBreakDeadTimeConfig.DeadTime = 80;
 157:./Src/motor_L.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 158:./Src/motor_L.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 159:./Src/motor_L.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 160:./Src/motor_L.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 161:./Src/motor_L.c ****   {
 162:./Src/motor_L.c ****     Error_Handler();
 163:./Src/motor_L.c ****   }
 164:./Src/motor_L.c ****   
 165:./Src/motor_L.c ****   //CH1
 166:./Src/motor_L.c ****   htim8.Instance->CCER = htim8.Instance->CCER | 0x0008; //CC1NP = 1;
 167:./Src/motor_L.c ****   htim8.Instance->CCER = htim8.Instance->CCER & 0xFFFD; //cc1p = 0
 168:./Src/motor_L.c ****   //CH2   
 169:./Src/motor_L.c ****   htim8.Instance->CCER = htim8.Instance->CCER | 0x0080; //CC2NP = 1;
 170:./Src/motor_L.c ****   htim8.Instance->CCER = htim8.Instance->CCER & 0xFFDF; //cc2p = 0
 171:./Src/motor_L.c ****   //CH3     
 172:./Src/motor_L.c ****   htim8.Instance->CCER = htim8.Instance->CCER | 0x0800; //CC3NP = 1;
 173:./Src/motor_L.c ****   htim8.Instance->CCER = htim8.Instance->CCER & 0xFDFF; //cc3p = 0
 174:./Src/motor_L.c ****   
 175:./Src/motor_L.c **** 
 176:./Src/motor_L.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
 177:./Src/motor_L.c ****     __HAL_RCC_GPIOB_CLK_ENABLE();  
 178:./Src/motor_L.c ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 179:./Src/motor_L.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 180:./Src/motor_L.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 181:./Src/motor_L.c ****     GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 182:./Src/motor_L.c **** 
 183:./Src/motor_L.c ****     GPIO_InitStruct.Pin = GPIO_PIN_7;
 184:./Src/motor_L.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 185:./Src/motor_L.c **** 
 186:./Src/motor_L.c ****     GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 187:./Src/motor_L.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 188:./Src/motor_L.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 189:./Src/motor_L.c ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 190:./Src/motor_L.c **** 
 191:./Src/motor_L.c ****     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 192:./Src/motor_L.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 193:./Src/motor_L.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 194:./Src/motor_L.c ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 195:./Src/motor_L.c ****  
 196:./Src/motor_L.c ****     //Start PWM signals
 197:./Src/motor_L.c ****     HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);      //CH1N   
 198:./Src/motor_L.c ****     HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);      //CH1
 199:./Src/motor_L.c ****     mL_A__OFF();
 200:./Src/motor_L.c **** 
 201:./Src/motor_L.c ****     HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);         //CH2
 202:./Src/motor_L.c ****     HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);      //CH2N
 203:./Src/motor_L.c ****     mL_B__OFF();
 204:./Src/motor_L.c **** 
ARM GAS  /tmp/ccX4v3II.s 			page 5


 205:./Src/motor_L.c ****     HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);         //CH3
 206:./Src/motor_L.c ****     HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);      //CH3N
 207:./Src/motor_L.c ****     mL_C__OFF();  
 208:./Src/motor_L.c **** 
 209:./Src/motor_L.c ****     HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_4);      //x interrupt
 210:./Src/motor_L.c ****    */
 211:./Src/motor_L.c ****   
 212:./Src/motor_L.c **** __HAL_RCC_TIM8_CLK_ENABLE();
 213:./Src/motor_L.c **** __HAL_RCC_GPIOA_CLK_ENABLE();
 214:./Src/motor_L.c **** __HAL_RCC_GPIOB_CLK_ENABLE();
 215:./Src/motor_L.c **** __HAL_RCC_GPIOC_CLK_ENABLE();
 216:./Src/motor_L.c ****   mL_Low_CH1_OFF();
 217:./Src/motor_L.c ****   mL_Low_CH2_OFF();
 218:./Src/motor_L.c ****   mL_Low_CH3_OFF();
 219:./Src/motor_L.c ****   //CH1N,CH2N,CH3N -- MANUAL mode -- 
 220:./Src/motor_L.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 221:./Src/motor_L.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 222:./Src/motor_L.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;  
 223:./Src/motor_L.c ****   GPIO_InitStruct.Pin = GPIO_PIN_7;
 224:./Src/motor_L.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 225:./Src/motor_L.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0;
 226:./Src/motor_L.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 227:./Src/motor_L.c ****   GPIO_InitStruct.Pin = GPIO_PIN_1;
 228:./Src/motor_L.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 229:./Src/motor_L.c ****    
 230:./Src/motor_L.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 231:./Src/motor_L.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 232:./Src/motor_L.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 233:./Src/motor_L.c ****   GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 234:./Src/motor_L.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 235:./Src/motor_L.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 236:./Src/motor_L.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); 
 237:./Src/motor_L.c **** 
 238:./Src/motor_L.c ****   htim8.Instance = TIM8;
 239:./Src/motor_L.c ****   htim8.Init.Prescaler         = 0;
 240:./Src/motor_L.c ****   htim8.Init.Period            = motorL.uwPeriodValue;
 241:./Src/motor_L.c ****   htim8.Init.ClockDivision     = 0;
 242:./Src/motor_L.c ****   htim8.Init.CounterMode       = TIM_COUNTERMODE_UP;
 243:./Src/motor_L.c ****   htim8.Init.RepetitionCounter = 0;
 244:./Src/motor_L.c ****   HAL_TIM_PWM_Init(&htim8); 
 245:./Src/motor_L.c **** 
 246:./Src/motor_L.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE; //TIM_AUTOMATICOUTPUT_ENABLE;
 247:./Src/motor_L.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW; // TIM_BREAKPOLARITY_HIGH; //
 248:./Src/motor_L.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 249:./Src/motor_L.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 250:./Src/motor_L.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE; //TIM_OSSI_DISABLE;
 251:./Src/motor_L.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE; //TIM_OSSR_DISABLE;  
 252:./Src/motor_L.c ****   sBreakDeadTimeConfig.DeadTime = 40;   //10;  
 253:./Src/motor_L.c ****   HAL_TIMEx_ConfigBreakDeadTime(&htim8,&sBreakDeadTimeConfig);
 254:./Src/motor_L.c ****   
 255:./Src/motor_L.c ****                                 
 256:./Src/motor_L.c ****   //##-2- Configure the PWM channels #########################################
 257:./Src/motor_L.c ****   // Common configuration for all channels 
 258:./Src/motor_L.c ****   sConfigOC.OCMode      = TIM_OCMODE_PWM1; // TIM_OCMODE_PWM2;
 259:./Src/motor_L.c ****   sConfigOC.OCFastMode  = TIM_OCFAST_DISABLE; // TIM_OCFAST_DISABLE;
 260:./Src/motor_L.c ****   sConfigOC.OCPolarity  = TIM_OCPOLARITY_HIGH; //TIM_OCPOLARITY_LOW;//TIM_OCPOLARITY_HIGH; //TIM_OC
 261:./Src/motor_L.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW; //TIM_OCNPOLARITY_HIGH; //TIM_OCNPOLARITY_HIGH;
ARM GAS  /tmp/ccX4v3II.s 			page 6


 262:./Src/motor_L.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET; //TIM_OCIDLESTATE_SET; //TIM_OCNIDLESTATE_RESET; /
 263:./Src/motor_L.c ****   sConfigOC.OCNIdleState= TIM_OCNIDLESTATE_RESET; //TIM_OCNIDLESTATE_SET ; //TIM_OCIDLESTATE_SET; /
 264:./Src/motor_L.c ****   
 265:./Src/motor_L.c ****   //Set the pulse value
 266:./Src/motor_L.c ****   sConfigOC.Pulse = 0;
 267:./Src/motor_L.c ****   HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1); 
 268:./Src/motor_L.c ****   sConfigOC.Pulse = 0;
 269:./Src/motor_L.c ****   HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2);
 270:./Src/motor_L.c ****   sConfigOC.Pulse = 0;
 271:./Src/motor_L.c ****   HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 272:./Src/motor_L.c **** 
 273:./Src/motor_L.c ****   //Start PWM signals
 274:./Src/motor_L.c ****   HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);         //CH1
 275:./Src/motor_L.c ****   HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);         //CH2
 276:./Src/motor_L.c ****   HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);         //CH3
 277:./Src/motor_L.c ****   HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_4);         //CH4  
 278:./Src/motor_L.c ****   
 279:./Src/motor_L.c ****   mL_PWM_Set_ChALL(0);
 280:./Src/motor_L.c ****   
 281:./Src/motor_L.c ****   mL_Low_CH1_OFF();
 282:./Src/motor_L.c ****   mL_Low_CH2_OFF();
 283:./Src/motor_L.c ****   mL_Low_CH3_OFF();
 284:./Src/motor_L.c ****   mL_AHigh__OFF();
 285:./Src/motor_L.c ****   mL_BHigh__OFF();
 286:./Src/motor_L.c ****   mL_CHigh__OFF();
 287:./Src/motor_L.c ****     
 288:./Src/motor_L.c ****   motorL.stop = 1;
 289:./Src/motor_L.c ****  /* Peripheral interrupt init */
 290:./Src/motor_L.c ****   HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 1);
 291:./Src/motor_L.c ****   HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 292:./Src/motor_L.c **** }
 293:./Src/motor_L.c **** 
 294:./Src/motor_L.c **** void mL_HallSensor_init(void){
  26              		.loc 1 294 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  35 0002 86B0     		sub	sp, sp, #24
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 32
  38              	.LBB6:
 295:./Src/motor_L.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 296:./Src/motor_L.c **** 
 297:./Src/motor_L.c ****   /* GPIO Ports Clock Enable */
 298:./Src/motor_L.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  39              		.loc 1 298 0
  40 0004 0F4B     		ldr	r3, .L3
  41 0006 9A69     		ldr	r2, [r3, #24]
  42 0008 42F00802 		orr	r2, r2, #8
  43 000c 9A61     		str	r2, [r3, #24]
  44 000e 9B69     		ldr	r3, [r3, #24]
  45 0010 03F00803 		and	r3, r3, #8
ARM GAS  /tmp/ccX4v3II.s 			page 7


  46 0014 0193     		str	r3, [sp, #4]
  47 0016 019B     		ldr	r3, [sp, #4]
  48              	.LBE6:
 299:./Src/motor_L.c **** 
 300:./Src/motor_L.c ****   /*Configure GPIO pins : HALL_LEFT_A_Pin HALL_LEFT_B_Pin HALL_LEFT_C_Pin */
 301:./Src/motor_L.c ****   GPIO_InitStruct.Pin = HALL_LEFT_A_Pin|HALL_LEFT_B_Pin|HALL_LEFT_C_Pin;
  49              		.loc 1 301 0
  50 0018 E023     		movs	r3, #224
  51 001a 0293     		str	r3, [sp, #8]
 302:./Src/motor_L.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  52              		.loc 1 302 0
  53 001c 0A4B     		ldr	r3, .L3+4
  54 001e 0393     		str	r3, [sp, #12]
 303:./Src/motor_L.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;  
  55              		.loc 1 303 0
  56 0020 0323     		movs	r3, #3
  57 0022 0593     		str	r3, [sp, #20]
 304:./Src/motor_L.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  58              		.loc 1 304 0
  59 0024 0024     		movs	r4, #0
  60 0026 0494     		str	r4, [sp, #16]
 305:./Src/motor_L.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  61              		.loc 1 305 0
  62 0028 02A9     		add	r1, sp, #8
  63 002a 0848     		ldr	r0, .L3+8
  64 002c FFF7FEFF 		bl	HAL_GPIO_Init
  65              	.LVL0:
 306:./Src/motor_L.c **** 
 307:./Src/motor_L.c ****   /* EXTI interrupt init*/
 308:./Src/motor_L.c ****   HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  66              		.loc 1 308 0
  67 0030 2246     		mov	r2, r4
  68 0032 2146     		mov	r1, r4
  69 0034 1720     		movs	r0, #23
  70 0036 FFF7FEFF 		bl	HAL_NVIC_SetPriority
  71              	.LVL1:
 309:./Src/motor_L.c ****   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
  72              		.loc 1 309 0
  73 003a 1720     		movs	r0, #23
  74 003c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  75              	.LVL2:
 310:./Src/motor_L.c **** }
  76              		.loc 1 310 0
  77 0040 06B0     		add	sp, sp, #24
  78              	.LCFI2:
  79              		.cfi_def_cfa_offset 8
  80              		@ sp needed
  81 0042 10BD     		pop	{r4, pc}
  82              	.L4:
  83              		.align	2
  84              	.L3:
  85 0044 00100240 		.word	1073876992
  86 0048 00003110 		.word	271646720
  87 004c 000C0140 		.word	1073810432
  88              		.cfi_endproc
  89              	.LFE71:
  91              		.section	.text.mL_Low_CH1_ON,"ax",%progbits
ARM GAS  /tmp/ccX4v3II.s 			page 8


  92              		.align	1
  93              		.global	mL_Low_CH1_ON
  94              		.syntax unified
  95              		.thumb
  96              		.thumb_func
  97              		.fpu softvfp
  99              	mL_Low_CH1_ON:
 100              	.LFB72:
 311:./Src/motor_L.c **** 
 312:./Src/motor_L.c **** void mL_Low_CH1_ON(void){  
 101              		.loc 1 312 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              		@ link register save eliminated.
 313:./Src/motor_L.c ****   //Negato
 314:./Src/motor_L.c ****   GPIOA->BSRR = 0x00800000;
 106              		.loc 1 314 0
 107 0000 024B     		ldr	r3, .L6
 108 0002 4FF40002 		mov	r2, #8388608
 109 0006 1A61     		str	r2, [r3, #16]
 315:./Src/motor_L.c **** }
 110              		.loc 1 315 0
 111 0008 7047     		bx	lr
 112              	.L7:
 113 000a 00BF     		.align	2
 114              	.L6:
 115 000c 00080140 		.word	1073809408
 116              		.cfi_endproc
 117              	.LFE72:
 119              		.section	.text.mL_Low_CH1_OFF,"ax",%progbits
 120              		.align	1
 121              		.global	mL_Low_CH1_OFF
 122              		.syntax unified
 123              		.thumb
 124              		.thumb_func
 125              		.fpu softvfp
 127              	mL_Low_CH1_OFF:
 128              	.LFB73:
 316:./Src/motor_L.c **** void mL_Low_CH1_OFF(void){
 129              		.loc 1 316 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 317:./Src/motor_L.c ****   GPIOA->BSRR = GPIO_PIN_7;
 134              		.loc 1 317 0
 135 0000 014B     		ldr	r3, .L9
 136 0002 8022     		movs	r2, #128
 137 0004 1A61     		str	r2, [r3, #16]
 318:./Src/motor_L.c **** }
 138              		.loc 1 318 0
 139 0006 7047     		bx	lr
 140              	.L10:
 141              		.align	2
 142              	.L9:
 143 0008 00080140 		.word	1073809408
ARM GAS  /tmp/ccX4v3II.s 			page 9


 144              		.cfi_endproc
 145              	.LFE73:
 147              		.section	.text.mL_Low_CH2_ON,"ax",%progbits
 148              		.align	1
 149              		.global	mL_Low_CH2_ON
 150              		.syntax unified
 151              		.thumb
 152              		.thumb_func
 153              		.fpu softvfp
 155              	mL_Low_CH2_ON:
 156              	.LFB74:
 319:./Src/motor_L.c **** void mL_Low_CH2_ON(void){  
 157              		.loc 1 319 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161              		@ link register save eliminated.
 320:./Src/motor_L.c ****   //Negato
 321:./Src/motor_L.c ****   GPIOB->BSRR = 0x00010000;
 162              		.loc 1 321 0
 163 0000 024B     		ldr	r3, .L12
 164 0002 4FF48032 		mov	r2, #65536
 165 0006 1A61     		str	r2, [r3, #16]
 322:./Src/motor_L.c **** }
 166              		.loc 1 322 0
 167 0008 7047     		bx	lr
 168              	.L13:
 169 000a 00BF     		.align	2
 170              	.L12:
 171 000c 000C0140 		.word	1073810432
 172              		.cfi_endproc
 173              	.LFE74:
 175              		.section	.text.mL_Low_CH2_OFF,"ax",%progbits
 176              		.align	1
 177              		.global	mL_Low_CH2_OFF
 178              		.syntax unified
 179              		.thumb
 180              		.thumb_func
 181              		.fpu softvfp
 183              	mL_Low_CH2_OFF:
 184              	.LFB75:
 323:./Src/motor_L.c **** void mL_Low_CH2_OFF(void){
 185              		.loc 1 323 0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 0
 188              		@ frame_needed = 0, uses_anonymous_args = 0
 189              		@ link register save eliminated.
 324:./Src/motor_L.c ****   GPIOB->BSRR = GPIO_PIN_0;
 190              		.loc 1 324 0
 191 0000 014B     		ldr	r3, .L15
 192 0002 0122     		movs	r2, #1
 193 0004 1A61     		str	r2, [r3, #16]
 325:./Src/motor_L.c **** }
 194              		.loc 1 325 0
 195 0006 7047     		bx	lr
 196              	.L16:
 197              		.align	2
ARM GAS  /tmp/ccX4v3II.s 			page 10


 198              	.L15:
 199 0008 000C0140 		.word	1073810432
 200              		.cfi_endproc
 201              	.LFE75:
 203              		.section	.text.mL_Low_CH3_ON,"ax",%progbits
 204              		.align	1
 205              		.global	mL_Low_CH3_ON
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 209              		.fpu softvfp
 211              	mL_Low_CH3_ON:
 212              	.LFB76:
 326:./Src/motor_L.c **** void mL_Low_CH3_ON(void){  
 213              		.loc 1 326 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 0
 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217              		@ link register save eliminated.
 327:./Src/motor_L.c ****   //Negato
 328:./Src/motor_L.c ****   GPIOB->BSRR = 0x00020000;  
 218              		.loc 1 328 0
 219 0000 024B     		ldr	r3, .L18
 220 0002 4FF40032 		mov	r2, #131072
 221 0006 1A61     		str	r2, [r3, #16]
 329:./Src/motor_L.c **** }
 222              		.loc 1 329 0
 223 0008 7047     		bx	lr
 224              	.L19:
 225 000a 00BF     		.align	2
 226              	.L18:
 227 000c 000C0140 		.word	1073810432
 228              		.cfi_endproc
 229              	.LFE76:
 231              		.section	.text.mL_Low_CH3_OFF,"ax",%progbits
 232              		.align	1
 233              		.global	mL_Low_CH3_OFF
 234              		.syntax unified
 235              		.thumb
 236              		.thumb_func
 237              		.fpu softvfp
 239              	mL_Low_CH3_OFF:
 240              	.LFB77:
 330:./Src/motor_L.c **** void mL_Low_CH3_OFF(void){
 241              		.loc 1 330 0
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 0
 244              		@ frame_needed = 0, uses_anonymous_args = 0
 245              		@ link register save eliminated.
 331:./Src/motor_L.c ****   GPIOB->BSRR = GPIO_PIN_1;
 246              		.loc 1 331 0
 247 0000 014B     		ldr	r3, .L21
 248 0002 0222     		movs	r2, #2
 249 0004 1A61     		str	r2, [r3, #16]
 332:./Src/motor_L.c **** }
 250              		.loc 1 332 0
 251 0006 7047     		bx	lr
ARM GAS  /tmp/ccX4v3II.s 			page 11


 252              	.L22:
 253              		.align	2
 254              	.L21:
 255 0008 000C0140 		.word	1073810432
 256              		.cfi_endproc
 257              	.LFE77:
 259              		.section	.text.mL_AHigh__ON,"ax",%progbits
 260              		.align	1
 261              		.global	mL_AHigh__ON
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 265              		.fpu softvfp
 267              	mL_AHigh__ON:
 268              	.LFB78:
 333:./Src/motor_L.c **** 
 334:./Src/motor_L.c **** void mL_AHigh__ON(void){
 269              		.loc 1 334 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273              		@ link register save eliminated.
 335:./Src/motor_L.c ****   htim8.Instance->CCER = htim8.Instance->CCER | 0x0001;  //mR_AHigh__ON(); --> CC1E = 1
 274              		.loc 1 335 0
 275 0000 034B     		ldr	r3, .L24
 276 0002 1A68     		ldr	r2, [r3]
 277 0004 136A     		ldr	r3, [r2, #32]
 278 0006 43F00103 		orr	r3, r3, #1
 279 000a 1362     		str	r3, [r2, #32]
 336:./Src/motor_L.c **** }
 280              		.loc 1 336 0
 281 000c 7047     		bx	lr
 282              	.L25:
 283 000e 00BF     		.align	2
 284              	.L24:
 285 0010 00000000 		.word	htim8
 286              		.cfi_endproc
 287              	.LFE78:
 289              		.section	.text.mL_AHigh__OFF,"ax",%progbits
 290              		.align	1
 291              		.global	mL_AHigh__OFF
 292              		.syntax unified
 293              		.thumb
 294              		.thumb_func
 295              		.fpu softvfp
 297              	mL_AHigh__OFF:
 298              	.LFB79:
 337:./Src/motor_L.c **** void mL_AHigh__OFF(void){
 299              		.loc 1 337 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 0
 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303              		@ link register save eliminated.
 338:./Src/motor_L.c ****   htim8.Instance->CCER = htim8.Instance->CCER & 0xFFFE;  //mR_AHigh__ON(); --> CC1E = 0
 304              		.loc 1 338 0
 305 0000 044B     		ldr	r3, .L27
 306 0002 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccX4v3II.s 			page 12


 307 0004 136A     		ldr	r3, [r2, #32]
 308 0006 23F00103 		bic	r3, r3, #1
 309 000a 1B04     		lsls	r3, r3, #16
 310 000c 1B0C     		lsrs	r3, r3, #16
 311 000e 1362     		str	r3, [r2, #32]
 339:./Src/motor_L.c **** }
 312              		.loc 1 339 0
 313 0010 7047     		bx	lr
 314              	.L28:
 315 0012 00BF     		.align	2
 316              	.L27:
 317 0014 00000000 		.word	htim8
 318              		.cfi_endproc
 319              	.LFE79:
 321              		.section	.text.mL_BHigh__ON,"ax",%progbits
 322              		.align	1
 323              		.global	mL_BHigh__ON
 324              		.syntax unified
 325              		.thumb
 326              		.thumb_func
 327              		.fpu softvfp
 329              	mL_BHigh__ON:
 330              	.LFB80:
 340:./Src/motor_L.c **** void mL_BHigh__ON(void){
 331              		.loc 1 340 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335              		@ link register save eliminated.
 341:./Src/motor_L.c ****   htim8.Instance->CCER = htim8.Instance->CCER | 0x0010;  //--> CC2E = 1
 336              		.loc 1 341 0
 337 0000 034B     		ldr	r3, .L30
 338 0002 1A68     		ldr	r2, [r3]
 339 0004 136A     		ldr	r3, [r2, #32]
 340 0006 43F01003 		orr	r3, r3, #16
 341 000a 1362     		str	r3, [r2, #32]
 342:./Src/motor_L.c **** }
 342              		.loc 1 342 0
 343 000c 7047     		bx	lr
 344              	.L31:
 345 000e 00BF     		.align	2
 346              	.L30:
 347 0010 00000000 		.word	htim8
 348              		.cfi_endproc
 349              	.LFE80:
 351              		.section	.text.mL_BHigh__OFF,"ax",%progbits
 352              		.align	1
 353              		.global	mL_BHigh__OFF
 354              		.syntax unified
 355              		.thumb
 356              		.thumb_func
 357              		.fpu softvfp
 359              	mL_BHigh__OFF:
 360              	.LFB81:
 343:./Src/motor_L.c **** void mL_BHigh__OFF(void){
 361              		.loc 1 343 0
 362              		.cfi_startproc
ARM GAS  /tmp/ccX4v3II.s 			page 13


 363              		@ args = 0, pretend = 0, frame = 0
 364              		@ frame_needed = 0, uses_anonymous_args = 0
 365              		@ link register save eliminated.
 344:./Src/motor_L.c ****   htim8.Instance->CCER = htim8.Instance->CCER & 0xFFEF;  //--> CC2E = 0
 366              		.loc 1 344 0
 367 0000 044B     		ldr	r3, .L33
 368 0002 1A68     		ldr	r2, [r3]
 369 0004 136A     		ldr	r3, [r2, #32]
 370 0006 23F01003 		bic	r3, r3, #16
 371 000a 1B04     		lsls	r3, r3, #16
 372 000c 1B0C     		lsrs	r3, r3, #16
 373 000e 1362     		str	r3, [r2, #32]
 345:./Src/motor_L.c **** }
 374              		.loc 1 345 0
 375 0010 7047     		bx	lr
 376              	.L34:
 377 0012 00BF     		.align	2
 378              	.L33:
 379 0014 00000000 		.word	htim8
 380              		.cfi_endproc
 381              	.LFE81:
 383              		.section	.text.mL_CHigh__ON,"ax",%progbits
 384              		.align	1
 385              		.global	mL_CHigh__ON
 386              		.syntax unified
 387              		.thumb
 388              		.thumb_func
 389              		.fpu softvfp
 391              	mL_CHigh__ON:
 392              	.LFB82:
 346:./Src/motor_L.c **** void mL_CHigh__ON(void){
 393              		.loc 1 346 0
 394              		.cfi_startproc
 395              		@ args = 0, pretend = 0, frame = 0
 396              		@ frame_needed = 0, uses_anonymous_args = 0
 397              		@ link register save eliminated.
 347:./Src/motor_L.c ****   htim8.Instance->CCER = htim8.Instance->CCER | 0x0100;  //--> CC3E = 1
 398              		.loc 1 347 0
 399 0000 034B     		ldr	r3, .L36
 400 0002 1A68     		ldr	r2, [r3]
 401 0004 136A     		ldr	r3, [r2, #32]
 402 0006 43F48073 		orr	r3, r3, #256
 403 000a 1362     		str	r3, [r2, #32]
 348:./Src/motor_L.c **** }
 404              		.loc 1 348 0
 405 000c 7047     		bx	lr
 406              	.L37:
 407 000e 00BF     		.align	2
 408              	.L36:
 409 0010 00000000 		.word	htim8
 410              		.cfi_endproc
 411              	.LFE82:
 413              		.section	.text.mL_CHigh__OFF,"ax",%progbits
 414              		.align	1
 415              		.global	mL_CHigh__OFF
 416              		.syntax unified
 417              		.thumb
ARM GAS  /tmp/ccX4v3II.s 			page 14


 418              		.thumb_func
 419              		.fpu softvfp
 421              	mL_CHigh__OFF:
 422              	.LFB83:
 349:./Src/motor_L.c **** void mL_CHigh__OFF(void){
 423              		.loc 1 349 0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 0
 426              		@ frame_needed = 0, uses_anonymous_args = 0
 427              		@ link register save eliminated.
 350:./Src/motor_L.c ****   htim8.Instance->CCER = htim8.Instance->CCER & 0xFEFF;  //--> CC2E = 0
 428              		.loc 1 350 0
 429 0000 044B     		ldr	r3, .L39
 430 0002 1A68     		ldr	r2, [r3]
 431 0004 136A     		ldr	r3, [r2, #32]
 432 0006 23F48073 		bic	r3, r3, #256
 433 000a 1B04     		lsls	r3, r3, #16
 434 000c 1B0C     		lsrs	r3, r3, #16
 435 000e 1362     		str	r3, [r2, #32]
 351:./Src/motor_L.c **** }
 436              		.loc 1 351 0
 437 0010 7047     		bx	lr
 438              	.L40:
 439 0012 00BF     		.align	2
 440              	.L39:
 441 0014 00000000 		.word	htim8
 442              		.cfi_endproc
 443              	.LFE83:
 445              		.section	.text.mL_PWM_Set_Ch1,"ax",%progbits
 446              		.align	1
 447              		.global	mL_PWM_Set_Ch1
 448              		.syntax unified
 449              		.thumb
 450              		.thumb_func
 451              		.fpu softvfp
 453              	mL_PWM_Set_Ch1:
 454              	.LFB84:
 352:./Src/motor_L.c **** 
 353:./Src/motor_L.c **** 
 354:./Src/motor_L.c **** void mL_PWM_Set_Ch1(uint16_t value){
 455              		.loc 1 354 0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 459              		@ link register save eliminated.
 460              	.LVL3:
 355:./Src/motor_L.c ****   uint32_t vpwm;
 356:./Src/motor_L.c ****   vpwm = (uint32_t)(motorL.uwPeriodValue*value/1000);
 461              		.loc 1 356 0
 462 0000 054B     		ldr	r3, .L42
 463 0002 1B68     		ldr	r3, [r3]
 464 0004 03FB00F0 		mul	r0, r3, r0
 465              	.LVL4:
 466 0008 044B     		ldr	r3, .L42+4
 467 000a A3FB0030 		umull	r3, r0, r3, r0
 468 000e 8009     		lsrs	r0, r0, #6
 469              	.LVL5:
ARM GAS  /tmp/ccX4v3II.s 			page 15


 357:./Src/motor_L.c ****   __HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,vpwm);
 470              		.loc 1 357 0
 471 0010 034B     		ldr	r3, .L42+8
 472 0012 1B68     		ldr	r3, [r3]
 473 0014 5863     		str	r0, [r3, #52]
 358:./Src/motor_L.c **** }
 474              		.loc 1 358 0
 475 0016 7047     		bx	lr
 476              	.L43:
 477              		.align	2
 478              	.L42:
 479 0018 00000000 		.word	motorL
 480 001c D34D6210 		.word	274877907
 481 0020 00000000 		.word	htim8
 482              		.cfi_endproc
 483              	.LFE84:
 485              		.section	.text.mL_PWM_Set_Ch2,"ax",%progbits
 486              		.align	1
 487              		.global	mL_PWM_Set_Ch2
 488              		.syntax unified
 489              		.thumb
 490              		.thumb_func
 491              		.fpu softvfp
 493              	mL_PWM_Set_Ch2:
 494              	.LFB85:
 359:./Src/motor_L.c **** void mL_PWM_Set_Ch2(uint16_t value){
 495              		.loc 1 359 0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 0
 498              		@ frame_needed = 0, uses_anonymous_args = 0
 499              		@ link register save eliminated.
 500              	.LVL6:
 360:./Src/motor_L.c ****   uint32_t vpwm;
 361:./Src/motor_L.c ****   vpwm = (uint32_t)(motorL.uwPeriodValue*value/1000);
 501              		.loc 1 361 0
 502 0000 054B     		ldr	r3, .L45
 503 0002 1B68     		ldr	r3, [r3]
 504 0004 03FB00F0 		mul	r0, r3, r0
 505              	.LVL7:
 506 0008 044B     		ldr	r3, .L45+4
 507 000a A3FB0030 		umull	r3, r0, r3, r0
 508 000e 8009     		lsrs	r0, r0, #6
 509              	.LVL8:
 362:./Src/motor_L.c ****   __HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,vpwm);
 510              		.loc 1 362 0
 511 0010 034B     		ldr	r3, .L45+8
 512 0012 1B68     		ldr	r3, [r3]
 513 0014 9863     		str	r0, [r3, #56]
 363:./Src/motor_L.c **** }
 514              		.loc 1 363 0
 515 0016 7047     		bx	lr
 516              	.L46:
 517              		.align	2
 518              	.L45:
 519 0018 00000000 		.word	motorL
 520 001c D34D6210 		.word	274877907
 521 0020 00000000 		.word	htim8
ARM GAS  /tmp/ccX4v3II.s 			page 16


 522              		.cfi_endproc
 523              	.LFE85:
 525              		.section	.text.mL_PWM_Set_Ch3,"ax",%progbits
 526              		.align	1
 527              		.global	mL_PWM_Set_Ch3
 528              		.syntax unified
 529              		.thumb
 530              		.thumb_func
 531              		.fpu softvfp
 533              	mL_PWM_Set_Ch3:
 534              	.LFB86:
 364:./Src/motor_L.c **** void mL_PWM_Set_Ch3(uint16_t value){
 535              		.loc 1 364 0
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 0
 538              		@ frame_needed = 0, uses_anonymous_args = 0
 539              		@ link register save eliminated.
 540              	.LVL9:
 365:./Src/motor_L.c ****   uint32_t vpwm;
 366:./Src/motor_L.c ****   vpwm = (uint32_t)(motorL.uwPeriodValue*value/1000);
 541              		.loc 1 366 0
 542 0000 054B     		ldr	r3, .L48
 543 0002 1B68     		ldr	r3, [r3]
 544 0004 03FB00F0 		mul	r0, r3, r0
 545              	.LVL10:
 546 0008 044B     		ldr	r3, .L48+4
 547 000a A3FB0030 		umull	r3, r0, r3, r0
 548 000e 8009     		lsrs	r0, r0, #6
 549              	.LVL11:
 367:./Src/motor_L.c ****   __HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,vpwm);
 550              		.loc 1 367 0
 551 0010 034B     		ldr	r3, .L48+8
 552 0012 1B68     		ldr	r3, [r3]
 553 0014 D863     		str	r0, [r3, #60]
 368:./Src/motor_L.c **** }
 554              		.loc 1 368 0
 555 0016 7047     		bx	lr
 556              	.L49:
 557              		.align	2
 558              	.L48:
 559 0018 00000000 		.word	motorL
 560 001c D34D6210 		.word	274877907
 561 0020 00000000 		.word	htim8
 562              		.cfi_endproc
 563              	.LFE86:
 565              		.section	.text.mL_PWM_Set_ChALL,"ax",%progbits
 566              		.align	1
 567              		.global	mL_PWM_Set_ChALL
 568              		.syntax unified
 569              		.thumb
 570              		.thumb_func
 571              		.fpu softvfp
 573              	mL_PWM_Set_ChALL:
 574              	.LFB87:
 369:./Src/motor_L.c **** void mL_PWM_Set_ChALL(uint16_t value){
 575              		.loc 1 369 0
 576              		.cfi_startproc
ARM GAS  /tmp/ccX4v3II.s 			page 17


 577              		@ args = 0, pretend = 0, frame = 0
 578              		@ frame_needed = 0, uses_anonymous_args = 0
 579              		@ link register save eliminated.
 580              	.LVL12:
 370:./Src/motor_L.c ****   uint32_t vpwm;
 371:./Src/motor_L.c ****   vpwm = (uint32_t)(motorL.uwPeriodValue*value/1000);
 581              		.loc 1 371 0
 582 0000 064B     		ldr	r3, .L51
 583 0002 1B68     		ldr	r3, [r3]
 584 0004 03FB00F0 		mul	r0, r3, r0
 585              	.LVL13:
 586 0008 054B     		ldr	r3, .L51+4
 587 000a A3FB0030 		umull	r3, r0, r3, r0
 588 000e 8009     		lsrs	r0, r0, #6
 589              	.LVL14:
 372:./Src/motor_L.c ****   __HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,vpwm);
 590              		.loc 1 372 0
 591 0010 044B     		ldr	r3, .L51+8
 592 0012 1B68     		ldr	r3, [r3]
 593 0014 5863     		str	r0, [r3, #52]
 373:./Src/motor_L.c ****   __HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,vpwm);
 594              		.loc 1 373 0
 595 0016 9863     		str	r0, [r3, #56]
 374:./Src/motor_L.c ****   __HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,vpwm);  
 596              		.loc 1 374 0
 597 0018 D863     		str	r0, [r3, #60]
 375:./Src/motor_L.c **** }
 598              		.loc 1 375 0
 599 001a 7047     		bx	lr
 600              	.L52:
 601              		.align	2
 602              	.L51:
 603 001c 00000000 		.word	motorL
 604 0020 D34D6210 		.word	274877907
 605 0024 00000000 		.word	htim8
 606              		.cfi_endproc
 607              	.LFE87:
 609              		.section	.text.MotorL_stop,"ax",%progbits
 610              		.align	1
 611              		.global	MotorL_stop
 612              		.syntax unified
 613              		.thumb
 614              		.thumb_func
 615              		.fpu softvfp
 617              	MotorL_stop:
 618              	.LFB69:
  75:./Src/motor_L.c ****   mL_PWM_Set_ChALL(0);
 619              		.loc 1 75 0
 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 0
 622              		@ frame_needed = 0, uses_anonymous_args = 0
 623 0000 10B5     		push	{r4, lr}
 624              	.LCFI3:
 625              		.cfi_def_cfa_offset 8
 626              		.cfi_offset 4, -8
 627              		.cfi_offset 14, -4
  76:./Src/motor_L.c ****   motorL.stop = 1;
ARM GAS  /tmp/ccX4v3II.s 			page 18


 628              		.loc 1 76 0
 629 0002 0020     		movs	r0, #0
 630 0004 FFF7FEFF 		bl	mL_PWM_Set_ChALL
 631              	.LVL15:
  77:./Src/motor_L.c ****   mL_Low_CH1_OFF();
 632              		.loc 1 77 0
 633 0008 104C     		ldr	r4, .L55
 634 000a 0123     		movs	r3, #1
 635 000c A373     		strb	r3, [r4, #14]
  78:./Src/motor_L.c ****   mL_Low_CH2_OFF();
 636              		.loc 1 78 0
 637 000e FFF7FEFF 		bl	mL_Low_CH1_OFF
 638              	.LVL16:
  79:./Src/motor_L.c ****   mL_Low_CH3_OFF();
 639              		.loc 1 79 0
 640 0012 FFF7FEFF 		bl	mL_Low_CH2_OFF
 641              	.LVL17:
  80:./Src/motor_L.c ****   mL_AHigh__OFF();
 642              		.loc 1 80 0
 643 0016 FFF7FEFF 		bl	mL_Low_CH3_OFF
 644              	.LVL18:
  81:./Src/motor_L.c ****   mL_BHigh__OFF();
 645              		.loc 1 81 0
 646 001a FFF7FEFF 		bl	mL_AHigh__OFF
 647              	.LVL19:
  82:./Src/motor_L.c ****   mL_CHigh__OFF();
 648              		.loc 1 82 0
 649 001e FFF7FEFF 		bl	mL_BHigh__OFF
 650              	.LVL20:
  83:./Src/motor_L.c **** 
 651              		.loc 1 83 0
 652 0022 FFF7FEFF 		bl	mL_CHigh__OFF
 653              	.LVL21:
  85:./Src/motor_L.c ****   HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 654              		.loc 1 85 0
 655 0026 0022     		movs	r2, #0
 656 0028 1146     		mov	r1, r2
 657 002a 1720     		movs	r0, #23
 658 002c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 659              	.LVL22:
  86:./Src/motor_L.c ****   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 660              		.loc 1 86 0
 661 0030 1720     		movs	r0, #23
 662 0032 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 663              	.LVL23:
  87:./Src/motor_L.c ****   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 664              		.loc 1 87 0
 665 0036 064B     		ldr	r3, .L55+4
 666 0038 2022     		movs	r2, #32
 667 003a 5A61     		str	r2, [r3, #20]
  88:./Src/motor_L.c ****   __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);  
 668              		.loc 1 88 0
 669 003c 4022     		movs	r2, #64
 670 003e 5A61     		str	r2, [r3, #20]
  89:./Src/motor_L.c ****     motorL.BLDCMotorL_count= 0;
 671              		.loc 1 89 0
 672 0040 8022     		movs	r2, #128
ARM GAS  /tmp/ccX4v3II.s 			page 19


 673 0042 5A61     		str	r2, [r3, #20]
  90:./Src/motor_L.c ****     motorL.BLDCMotorL_flag = 0;
 674              		.loc 1 90 0
 675 0044 0023     		movs	r3, #0
 676 0046 2371     		strb	r3, [r4, #4]
  91:./Src/motor_L.c **** }
 677              		.loc 1 91 0
 678 0048 6371     		strb	r3, [r4, #5]
  92:./Src/motor_L.c ****     
 679              		.loc 1 92 0
 680 004a 10BD     		pop	{r4, pc}
 681              	.L56:
 682              		.align	2
 683              	.L55:
 684 004c 00000000 		.word	motorL
 685 0050 00040140 		.word	1073808384
 686              		.cfi_endproc
 687              	.LFE69:
 689              		.section	.text.MX_TIM8_Init,"ax",%progbits
 690              		.align	1
 691              		.global	MX_TIM8_Init
 692              		.syntax unified
 693              		.thumb
 694              		.thumb_func
 695              		.fpu softvfp
 697              	MX_TIM8_Init:
 698              	.LFB70:
  97:./Src/motor_L.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 699              		.loc 1 97 0
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 96
 702              		@ frame_needed = 0, uses_anonymous_args = 0
 703 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 704              	.LCFI4:
 705              		.cfi_def_cfa_offset 28
 706              		.cfi_offset 4, -28
 707              		.cfi_offset 5, -24
 708              		.cfi_offset 6, -20
 709              		.cfi_offset 7, -16
 710              		.cfi_offset 8, -12
 711              		.cfi_offset 9, -8
 712              		.cfi_offset 14, -4
 713 0004 99B0     		sub	sp, sp, #100
 714              	.LCFI5:
 715              		.cfi_def_cfa_offset 128
 716              	.LBB7:
 103:./Src/motor_L.c ****    
 717              		.loc 1 103 0
 718 0006 644B     		ldr	r3, .L59
 719 0008 9A69     		ldr	r2, [r3, #24]
 720 000a 42F40052 		orr	r2, r2, #8192
 721 000e 9A61     		str	r2, [r3, #24]
 722 0010 9A69     		ldr	r2, [r3, #24]
 723 0012 02F40052 		and	r2, r2, #8192
 724 0016 0192     		str	r2, [sp, #4]
 725 0018 019A     		ldr	r2, [sp, #4]
 726              	.LBE7:
ARM GAS  /tmp/ccX4v3II.s 			page 20


 105:./Src/motor_L.c ****   
 727              		.loc 1 105 0
 728 001a 604A     		ldr	r2, .L59+4
 729 001c 1268     		ldr	r2, [r2]
 730 001e D208     		lsrs	r2, r2, #3
 731 0020 5F49     		ldr	r1, .L59+8
 732 0022 A1FB0212 		umull	r1, r2, r1, r2
 733 0026 120A     		lsrs	r2, r2, #8
 734 0028 013A     		subs	r2, r2, #1
 735 002a 5E4F     		ldr	r7, .L59+12
 736 002c 3A60     		str	r2, [r7]
 737              	.LBB8:
 212:./Src/motor_L.c **** __HAL_RCC_GPIOA_CLK_ENABLE();
 738              		.loc 1 212 0
 739 002e 9A69     		ldr	r2, [r3, #24]
 740 0030 42F40052 		orr	r2, r2, #8192
 741 0034 9A61     		str	r2, [r3, #24]
 742 0036 9A69     		ldr	r2, [r3, #24]
 743 0038 02F40052 		and	r2, r2, #8192
 744 003c 0292     		str	r2, [sp, #8]
 745 003e 029A     		ldr	r2, [sp, #8]
 746              	.LBE8:
 747              	.LBB9:
 213:./Src/motor_L.c **** __HAL_RCC_GPIOB_CLK_ENABLE();
 748              		.loc 1 213 0
 749 0040 9A69     		ldr	r2, [r3, #24]
 750 0042 42F00402 		orr	r2, r2, #4
 751 0046 9A61     		str	r2, [r3, #24]
 752 0048 9A69     		ldr	r2, [r3, #24]
 753 004a 02F00402 		and	r2, r2, #4
 754 004e 0392     		str	r2, [sp, #12]
 755 0050 039A     		ldr	r2, [sp, #12]
 756              	.LBE9:
 757              	.LBB10:
 214:./Src/motor_L.c **** __HAL_RCC_GPIOC_CLK_ENABLE();
 758              		.loc 1 214 0
 759 0052 9A69     		ldr	r2, [r3, #24]
 760 0054 42F00802 		orr	r2, r2, #8
 761 0058 9A61     		str	r2, [r3, #24]
 762 005a 9A69     		ldr	r2, [r3, #24]
 763 005c 02F00802 		and	r2, r2, #8
 764 0060 0492     		str	r2, [sp, #16]
 765 0062 049A     		ldr	r2, [sp, #16]
 766              	.LBE10:
 767              	.LBB11:
 215:./Src/motor_L.c ****   mL_Low_CH1_OFF();
 768              		.loc 1 215 0
 769 0064 9A69     		ldr	r2, [r3, #24]
 770 0066 42F01002 		orr	r2, r2, #16
 771 006a 9A61     		str	r2, [r3, #24]
 772 006c 9B69     		ldr	r3, [r3, #24]
 773 006e 03F01003 		and	r3, r3, #16
 774 0072 0593     		str	r3, [sp, #20]
 775 0074 059B     		ldr	r3, [sp, #20]
 776              	.LBE11:
 216:./Src/motor_L.c ****   mL_Low_CH2_OFF();
 777              		.loc 1 216 0
ARM GAS  /tmp/ccX4v3II.s 			page 21


 778 0076 FFF7FEFF 		bl	mL_Low_CH1_OFF
 779              	.LVL24:
 217:./Src/motor_L.c ****   mL_Low_CH3_OFF();
 780              		.loc 1 217 0
 781 007a FFF7FEFF 		bl	mL_Low_CH2_OFF
 782              	.LVL25:
 218:./Src/motor_L.c ****   //CH1N,CH2N,CH3N -- MANUAL mode -- 
 783              		.loc 1 218 0
 784 007e FFF7FEFF 		bl	mL_Low_CH3_OFF
 785              	.LVL26:
 220:./Src/motor_L.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 786              		.loc 1 220 0
 787 0082 0126     		movs	r6, #1
 788 0084 1596     		str	r6, [sp, #84]
 221:./Src/motor_L.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;  
 789              		.loc 1 221 0
 790 0086 4FF00308 		mov	r8, #3
 791 008a CDF85C80 		str	r8, [sp, #92]
 222:./Src/motor_L.c ****   GPIO_InitStruct.Pin = GPIO_PIN_7;
 792              		.loc 1 222 0
 793 008e 1696     		str	r6, [sp, #88]
 223:./Src/motor_L.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 794              		.loc 1 223 0
 795 0090 18AC     		add	r4, sp, #96
 796 0092 8023     		movs	r3, #128
 797 0094 44F8103D 		str	r3, [r4, #-16]!
 224:./Src/motor_L.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0;
 798              		.loc 1 224 0
 799 0098 2146     		mov	r1, r4
 800 009a 4348     		ldr	r0, .L59+16
 801 009c FFF7FEFF 		bl	HAL_GPIO_Init
 802              	.LVL27:
 225:./Src/motor_L.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 803              		.loc 1 225 0
 804 00a0 1496     		str	r6, [sp, #80]
 226:./Src/motor_L.c ****   GPIO_InitStruct.Pin = GPIO_PIN_1;
 805              		.loc 1 226 0
 806 00a2 DFF81491 		ldr	r9, .L59+32
 807 00a6 2146     		mov	r1, r4
 808 00a8 4846     		mov	r0, r9
 809 00aa FFF7FEFF 		bl	HAL_GPIO_Init
 810              	.LVL28:
 227:./Src/motor_L.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 811              		.loc 1 227 0
 812 00ae 0225     		movs	r5, #2
 813 00b0 1495     		str	r5, [sp, #80]
 228:./Src/motor_L.c ****    
 814              		.loc 1 228 0
 815 00b2 2146     		mov	r1, r4
 816 00b4 4846     		mov	r0, r9
 817 00b6 FFF7FEFF 		bl	HAL_GPIO_Init
 818              	.LVL29:
 230:./Src/motor_L.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 819              		.loc 1 230 0
 820 00ba 1595     		str	r5, [sp, #84]
 231:./Src/motor_L.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 821              		.loc 1 231 0
ARM GAS  /tmp/ccX4v3II.s 			page 22


 822 00bc CDF85C80 		str	r8, [sp, #92]
 232:./Src/motor_L.c ****   GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 823              		.loc 1 232 0
 824 00c0 1695     		str	r5, [sp, #88]
 233:./Src/motor_L.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 825              		.loc 1 233 0
 826 00c2 4FF4E073 		mov	r3, #448
 827 00c6 1493     		str	r3, [sp, #80]
 236:./Src/motor_L.c **** 
 828              		.loc 1 236 0
 829 00c8 2146     		mov	r1, r4
 830 00ca 3848     		ldr	r0, .L59+20
 831 00cc FFF7FEFF 		bl	HAL_GPIO_Init
 832              	.LVL30:
 238:./Src/motor_L.c ****   htim8.Init.Prescaler         = 0;
 833              		.loc 1 238 0
 834 00d0 374D     		ldr	r5, .L59+24
 835 00d2 384B     		ldr	r3, .L59+28
 836 00d4 2B60     		str	r3, [r5]
 239:./Src/motor_L.c ****   htim8.Init.Period            = motorL.uwPeriodValue;
 837              		.loc 1 239 0
 838 00d6 0024     		movs	r4, #0
 839 00d8 6C60     		str	r4, [r5, #4]
 240:./Src/motor_L.c ****   htim8.Init.ClockDivision     = 0;
 840              		.loc 1 240 0
 841 00da 3B68     		ldr	r3, [r7]
 842 00dc EB60     		str	r3, [r5, #12]
 241:./Src/motor_L.c ****   htim8.Init.CounterMode       = TIM_COUNTERMODE_UP;
 843              		.loc 1 241 0
 844 00de 2C61     		str	r4, [r5, #16]
 242:./Src/motor_L.c ****   htim8.Init.RepetitionCounter = 0;
 845              		.loc 1 242 0
 846 00e0 AC60     		str	r4, [r5, #8]
 243:./Src/motor_L.c ****   HAL_TIM_PWM_Init(&htim8); 
 847              		.loc 1 243 0
 848 00e2 6C61     		str	r4, [r5, #20]
 244:./Src/motor_L.c **** 
 849              		.loc 1 244 0
 850 00e4 2846     		mov	r0, r5
 851 00e6 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 852              	.LVL31:
 246:./Src/motor_L.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW; // TIM_BREAKPOLARITY_HIGH; //
 853              		.loc 1 246 0
 854 00ea 0C94     		str	r4, [sp, #48]
 247:./Src/motor_L.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 855              		.loc 1 247 0
 856 00ec 0B94     		str	r4, [sp, #44]
 248:./Src/motor_L.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 857              		.loc 1 248 0
 858 00ee 0A94     		str	r4, [sp, #40]
 249:./Src/motor_L.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE; //TIM_OSSI_DISABLE;
 859              		.loc 1 249 0
 860 00f0 0894     		str	r4, [sp, #32]
 250:./Src/motor_L.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE; //TIM_OSSR_DISABLE;  
 861              		.loc 1 250 0
 862 00f2 4FF48063 		mov	r3, #1024
 863 00f6 0793     		str	r3, [sp, #28]
ARM GAS  /tmp/ccX4v3II.s 			page 23


 251:./Src/motor_L.c ****   sBreakDeadTimeConfig.DeadTime = 40;   //10;  
 864              		.loc 1 251 0
 865 00f8 4FF40063 		mov	r3, #2048
 866 00fc 0693     		str	r3, [sp, #24]
 252:./Src/motor_L.c ****   HAL_TIMEx_ConfigBreakDeadTime(&htim8,&sBreakDeadTimeConfig);
 867              		.loc 1 252 0
 868 00fe 2823     		movs	r3, #40
 869 0100 0993     		str	r3, [sp, #36]
 253:./Src/motor_L.c ****   
 870              		.loc 1 253 0
 871 0102 06A9     		add	r1, sp, #24
 872 0104 2846     		mov	r0, r5
 873 0106 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 874              	.LVL32:
 258:./Src/motor_L.c ****   sConfigOC.OCFastMode  = TIM_OCFAST_DISABLE; // TIM_OCFAST_DISABLE;
 875              		.loc 1 258 0
 876 010a 6023     		movs	r3, #96
 877 010c 0D93     		str	r3, [sp, #52]
 259:./Src/motor_L.c ****   sConfigOC.OCPolarity  = TIM_OCPOLARITY_HIGH; //TIM_OCPOLARITY_LOW;//TIM_OCPOLARITY_HIGH; //TIM_OC
 878              		.loc 1 259 0
 879 010e 1194     		str	r4, [sp, #68]
 260:./Src/motor_L.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW; //TIM_OCNPOLARITY_HIGH; //TIM_OCNPOLARITY_HIGH;
 880              		.loc 1 260 0
 881 0110 0F94     		str	r4, [sp, #60]
 261:./Src/motor_L.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET; //TIM_OCIDLESTATE_SET; //TIM_OCNIDLESTATE_RESET; /
 882              		.loc 1 261 0
 883 0112 4FF00808 		mov	r8, #8
 884 0116 CDF84080 		str	r8, [sp, #64]
 262:./Src/motor_L.c ****   sConfigOC.OCNIdleState= TIM_OCNIDLESTATE_RESET; //TIM_OCNIDLESTATE_SET ; //TIM_OCIDLESTATE_SET; /
 885              		.loc 1 262 0
 886 011a 1294     		str	r4, [sp, #72]
 263:./Src/motor_L.c ****   
 887              		.loc 1 263 0
 888 011c 1394     		str	r4, [sp, #76]
 266:./Src/motor_L.c ****   HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1); 
 889              		.loc 1 266 0
 890 011e 0E94     		str	r4, [sp, #56]
 267:./Src/motor_L.c ****   sConfigOC.Pulse = 0;
 891              		.loc 1 267 0
 892 0120 2246     		mov	r2, r4
 893 0122 0DA9     		add	r1, sp, #52
 894 0124 2846     		mov	r0, r5
 895 0126 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 896              	.LVL33:
 268:./Src/motor_L.c ****   HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2);
 897              		.loc 1 268 0
 898 012a 0E94     		str	r4, [sp, #56]
 269:./Src/motor_L.c ****   sConfigOC.Pulse = 0;
 899              		.loc 1 269 0
 900 012c 0422     		movs	r2, #4
 901 012e 0DA9     		add	r1, sp, #52
 902 0130 2846     		mov	r0, r5
 903 0132 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 904              	.LVL34:
 270:./Src/motor_L.c ****   HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 905              		.loc 1 270 0
 906 0136 0E94     		str	r4, [sp, #56]
ARM GAS  /tmp/ccX4v3II.s 			page 24


 271:./Src/motor_L.c **** 
 907              		.loc 1 271 0
 908 0138 4246     		mov	r2, r8
 909 013a 0DA9     		add	r1, sp, #52
 910 013c 2846     		mov	r0, r5
 911 013e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 912              	.LVL35:
 274:./Src/motor_L.c ****   HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);         //CH2
 913              		.loc 1 274 0
 914 0142 2146     		mov	r1, r4
 915 0144 2846     		mov	r0, r5
 916 0146 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 917              	.LVL36:
 275:./Src/motor_L.c ****   HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);         //CH3
 918              		.loc 1 275 0
 919 014a 0421     		movs	r1, #4
 920 014c 2846     		mov	r0, r5
 921 014e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 922              	.LVL37:
 276:./Src/motor_L.c ****   HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_4);         //CH4  
 923              		.loc 1 276 0
 924 0152 4146     		mov	r1, r8
 925 0154 2846     		mov	r0, r5
 926 0156 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 927              	.LVL38:
 277:./Src/motor_L.c ****   
 928              		.loc 1 277 0
 929 015a 0C21     		movs	r1, #12
 930 015c 2846     		mov	r0, r5
 931 015e FFF7FEFF 		bl	HAL_TIM_PWM_Start_IT
 932              	.LVL39:
 279:./Src/motor_L.c ****   
 933              		.loc 1 279 0
 934 0162 2046     		mov	r0, r4
 935 0164 FFF7FEFF 		bl	mL_PWM_Set_ChALL
 936              	.LVL40:
 281:./Src/motor_L.c ****   mL_Low_CH2_OFF();
 937              		.loc 1 281 0
 938 0168 FFF7FEFF 		bl	mL_Low_CH1_OFF
 939              	.LVL41:
 282:./Src/motor_L.c ****   mL_Low_CH3_OFF();
 940              		.loc 1 282 0
 941 016c FFF7FEFF 		bl	mL_Low_CH2_OFF
 942              	.LVL42:
 283:./Src/motor_L.c ****   mL_AHigh__OFF();
 943              		.loc 1 283 0
 944 0170 FFF7FEFF 		bl	mL_Low_CH3_OFF
 945              	.LVL43:
 284:./Src/motor_L.c ****   mL_BHigh__OFF();
 946              		.loc 1 284 0
 947 0174 FFF7FEFF 		bl	mL_AHigh__OFF
 948              	.LVL44:
 285:./Src/motor_L.c ****   mL_CHigh__OFF();
 949              		.loc 1 285 0
 950 0178 FFF7FEFF 		bl	mL_BHigh__OFF
 951              	.LVL45:
 286:./Src/motor_L.c ****     
ARM GAS  /tmp/ccX4v3II.s 			page 25


 952              		.loc 1 286 0
 953 017c FFF7FEFF 		bl	mL_CHigh__OFF
 954              	.LVL46:
 288:./Src/motor_L.c ****  /* Peripheral interrupt init */
 955              		.loc 1 288 0
 956 0180 BE73     		strb	r6, [r7, #14]
 290:./Src/motor_L.c ****   HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 957              		.loc 1 290 0
 958 0182 3246     		mov	r2, r6
 959 0184 2146     		mov	r1, r4
 960 0186 2E20     		movs	r0, #46
 961 0188 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 962              	.LVL47:
 291:./Src/motor_L.c **** }
 963              		.loc 1 291 0
 964 018c 2E20     		movs	r0, #46
 965 018e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 966              	.LVL48:
 292:./Src/motor_L.c **** 
 967              		.loc 1 292 0
 968 0192 19B0     		add	sp, sp, #100
 969              	.LCFI6:
 970              		.cfi_def_cfa_offset 28
 971              		@ sp needed
 972 0194 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 973              	.L60:
 974              		.align	2
 975              	.L59:
 976 0198 00100240 		.word	1073876992
 977 019c 00000000 		.word	SystemCoreClock
 978 01a0 89B5F814 		.word	351843721
 979 01a4 00000000 		.word	motorL
 980 01a8 00080140 		.word	1073809408
 981 01ac 00100140 		.word	1073811456
 982 01b0 00000000 		.word	htim8
 983 01b4 00340140 		.word	1073820672
 984 01b8 000C0140 		.word	1073810432
 985              		.cfi_endproc
 986              	.LFE70:
 988              		.section	.text.MotorL_init,"ax",%progbits
 989              		.align	1
 990              		.global	MotorL_init
 991              		.syntax unified
 992              		.thumb
 993              		.thumb_func
 994              		.fpu softvfp
 996              	MotorL_init:
 997              	.LFB66:
  11:./Src/motor_L.c ****   MX_TIM8_Init();
 998              		.loc 1 11 0
 999              		.cfi_startproc
 1000              		@ args = 0, pretend = 0, frame = 0
 1001              		@ frame_needed = 0, uses_anonymous_args = 0
 1002 0000 08B5     		push	{r3, lr}
 1003              	.LCFI7:
 1004              		.cfi_def_cfa_offset 8
 1005              		.cfi_offset 3, -8
ARM GAS  /tmp/ccX4v3II.s 			page 26


 1006              		.cfi_offset 14, -4
  12:./Src/motor_L.c ****   mL_HallSensor_init();
 1007              		.loc 1 12 0
 1008 0002 FFF7FEFF 		bl	MX_TIM8_Init
 1009              	.LVL49:
  13:./Src/motor_L.c ****   
 1010              		.loc 1 13 0
 1011 0006 FFF7FEFF 		bl	mL_HallSensor_init
 1012              	.LVL50:
  15:./Src/motor_L.c ****   motorL.BLDCMotorL_flag = 0; 
 1013              		.loc 1 15 0
 1014 000a 044B     		ldr	r3, .L63
 1015 000c 0022     		movs	r2, #0
 1016 000e 1A71     		strb	r2, [r3, #4]
  16:./Src/motor_L.c ****   motorL.BLDCMotorL_velRAW = 0;
 1017              		.loc 1 16 0
 1018 0010 5A71     		strb	r2, [r3, #5]
  17:./Src/motor_L.c ****   motorL.BLDCMotorL_deltavel = 0;
 1019              		.loc 1 17 0
 1020 0012 DA80     		strh	r2, [r3, #6]	@ movhi
  18:./Src/motor_L.c ****   
 1021              		.loc 1 18 0
 1022 0014 1A81     		strh	r2, [r3, #8]	@ movhi
  20:./Src/motor_L.c **** }
 1023              		.loc 1 20 0
 1024 0016 FFF7FEFF 		bl	MotorL_stop
 1025              	.LVL51:
  21:./Src/motor_L.c **** 
 1026              		.loc 1 21 0
 1027 001a 08BD     		pop	{r3, pc}
 1028              	.L64:
 1029              		.align	2
 1030              	.L63:
 1031 001c 00000000 		.word	motorL
 1032              		.cfi_endproc
 1033              	.LFE66:
 1035              		.section	.text.mL_BLDCMotor,"ax",%progbits
 1036              		.align	1
 1037              		.global	mL_BLDCMotor
 1038              		.syntax unified
 1039              		.thumb
 1040              		.thumb_func
 1041              		.fpu softvfp
 1043              	mL_BLDCMotor:
 1044              	.LFB88:
 376:./Src/motor_L.c **** 
 377:./Src/motor_L.c **** 
 378:./Src/motor_L.c **** 
 379:./Src/motor_L.c **** 
 380:./Src/motor_L.c **** void mL_BLDCMotor(void){
 1045              		.loc 1 380 0
 1046              		.cfi_startproc
 1047              		@ args = 0, pretend = 0, frame = 0
 1048              		@ frame_needed = 0, uses_anonymous_args = 0
 1049 0000 10B5     		push	{r4, lr}
 1050              	.LCFI8:
 1051              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccX4v3II.s 			page 27


 1052              		.cfi_offset 4, -8
 1053              		.cfi_offset 14, -4
 381:./Src/motor_L.c ****   motorL.newhallpos = (GPIOB->IDR & 0x00E0);    //b5,b6,b7
 1054              		.loc 1 381 0
 1055 0002 3A4B     		ldr	r3, .L89
 1056 0004 9B68     		ldr	r3, [r3, #8]
 1057 0006 03F0E003 		and	r3, r3, #224
 1058 000a 394C     		ldr	r4, .L89+4
 1059 000c A381     		strh	r3, [r4, #12]	@ movhi
 382:./Src/motor_L.c ****     
 383:./Src/motor_L.c ****   mL_Low_CH1_OFF();
 1060              		.loc 1 383 0
 1061 000e FFF7FEFF 		bl	mL_Low_CH1_OFF
 1062              	.LVL52:
 384:./Src/motor_L.c ****   mL_Low_CH2_OFF();
 1063              		.loc 1 384 0
 1064 0012 FFF7FEFF 		bl	mL_Low_CH2_OFF
 1065              	.LVL53:
 385:./Src/motor_L.c ****   mL_Low_CH3_OFF();
 1066              		.loc 1 385 0
 1067 0016 FFF7FEFF 		bl	mL_Low_CH3_OFF
 1068              	.LVL54:
 386:./Src/motor_L.c ****   mL_AHigh__OFF();
 1069              		.loc 1 386 0
 1070 001a FFF7FEFF 		bl	mL_AHigh__OFF
 1071              	.LVL55:
 387:./Src/motor_L.c ****   mL_BHigh__OFF();
 1072              		.loc 1 387 0
 1073 001e FFF7FEFF 		bl	mL_BHigh__OFF
 1074              	.LVL56:
 388:./Src/motor_L.c ****   mL_CHigh__OFF();
 1075              		.loc 1 388 0
 1076 0022 FFF7FEFF 		bl	mL_CHigh__OFF
 1077              	.LVL57:
 389:./Src/motor_L.c **** 
 390:./Src/motor_L.c ****   if(motorL.stop){
 1078              		.loc 1 390 0
 1079 0026 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 1080 0028 DBB9     		cbnz	r3, .L65
 391:./Src/motor_L.c ****     return;
 392:./Src/motor_L.c ****   }
 393:./Src/motor_L.c ****   
 394:./Src/motor_L.c ****   if(motorL.reverse!=0){
 1081              		.loc 1 394 0
 1082 002a A37A     		ldrb	r3, [r4, #10]	@ zero_extendqisi2
 1083 002c 73B3     		cbz	r3, .L67
 395:./Src/motor_L.c ****     switch (motorL.newhallpos){
 1084              		.loc 1 395 0
 1085 002e A389     		ldrh	r3, [r4, #12]
 1086 0030 9BB2     		uxth	r3, r3
 1087 0032 602B     		cmp	r3, #96
 1088 0034 16D0     		beq	.L69
 1089 0036 07D9     		bls	.L85
 1090 0038 A02B     		cmp	r3, #160
 1091 003a 1DD0     		beq	.L73
 1092 003c C02B     		cmp	r3, #192
 1093 003e 20D0     		beq	.L74
ARM GAS  /tmp/ccX4v3II.s 			page 28


 1094 0040 802B     		cmp	r3, #128
 1095 0042 14D0     		beq	.L86
 1096              	.L68:
 1097              	.LBB12:
 1098              	.LBB13:
 1099              		.file 2 "./Drivers/CMSIS/Include/cmsis_gcc.h"
   1:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:./Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:./Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:./Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:./Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccX4v3II.s 			page 29


  52:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccX4v3II.s 			page 30


 109:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccX4v3II.s 			page 31


 166:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
ARM GAS  /tmp/ccX4v3II.s 			page 32


 223:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:./Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccX4v3II.s 			page 33


 280:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:./Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccX4v3II.s 			page 34


 337:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:./Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:./Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:./Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:./Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 1100              		.loc 2 375 0
 1101              		.syntax unified
 1102              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1103 0044 00BF     		nop
 1104              	@ 0 "" 2
 1105              		.thumb
 1106              		.syntax unified
 1107 0046 0CE0     		b	.L65
 1108              	.L85:
 1109              	.LBE13:
 1110              	.LBE12:
 1111              		.loc 1 395 0
 1112 0048 202B     		cmp	r3, #32
 1113 004a 06D0     		beq	.L71
 1114 004c 402B     		cmp	r3, #64
 1115 004e F9D1     		bne	.L68
 396:./Src/motor_L.c ****       case (0x0020):               //1
 397:./Src/motor_L.c ****         mL_AHigh__ON();
ARM GAS  /tmp/ccX4v3II.s 			page 35


 398:./Src/motor_L.c ****         mL_Low_CH2_ON();
 399:./Src/motor_L.c ****       break;
 400:./Src/motor_L.c ****       case (0x0040):               //2
 401:./Src/motor_L.c ****         mL_BHigh__ON();
 1116              		.loc 1 401 0
 1117 0050 FFF7FEFF 		bl	mL_BHigh__ON
 1118              	.LVL58:
 402:./Src/motor_L.c ****         mL_Low_CH3_ON();    
 1119              		.loc 1 402 0
 1120 0054 FFF7FEFF 		bl	mL_Low_CH3_ON
 1121              	.LVL59:
 403:./Src/motor_L.c ****       break;
 1122              		.loc 1 403 0
 1123 0058 03E0     		b	.L65
 1124              	.L71:
 397:./Src/motor_L.c ****         mL_Low_CH2_ON();
 1125              		.loc 1 397 0
 1126 005a FFF7FEFF 		bl	mL_AHigh__ON
 1127              	.LVL60:
 398:./Src/motor_L.c ****       break;
 1128              		.loc 1 398 0
 1129 005e FFF7FEFF 		bl	mL_Low_CH2_ON
 1130              	.LVL61:
 1131              	.L65:
 404:./Src/motor_L.c ****       case (0x0060):               //3
 405:./Src/motor_L.c ****         mL_AHigh__ON();
 406:./Src/motor_L.c ****         mL_Low_CH3_ON();    
 407:./Src/motor_L.c ****       break;
 408:./Src/motor_L.c ****       case (0x0080):              //4
 409:./Src/motor_L.c ****         mL_Low_CH1_ON();    
 410:./Src/motor_L.c ****         mL_CHigh__ON();
 411:./Src/motor_L.c ****       break;
 412:./Src/motor_L.c ****       case (0x00A0):              //5
 413:./Src/motor_L.c ****         mL_Low_CH2_ON();    
 414:./Src/motor_L.c ****         mL_CHigh__ON();
 415:./Src/motor_L.c ****       break;
 416:./Src/motor_L.c ****       case (0x00C0):              //6
 417:./Src/motor_L.c ****         mL_Low_CH1_ON();    
 418:./Src/motor_L.c ****         mL_BHigh__ON();
 419:./Src/motor_L.c ****       break;  
 420:./Src/motor_L.c ****       default:
 421:./Src/motor_L.c ****         __NOP();
 422:./Src/motor_L.c ****       break;      
 423:./Src/motor_L.c ****     }    
 424:./Src/motor_L.c ****   }else{
 425:./Src/motor_L.c ****     switch (motorL.newhallpos){
 426:./Src/motor_L.c ****       case (0x0020):               //1
 427:./Src/motor_L.c ****         mL_Low_CH1_ON();
 428:./Src/motor_L.c ****         mL_BHigh__ON();
 429:./Src/motor_L.c ****       break;
 430:./Src/motor_L.c ****       case (0x0040):               //2
 431:./Src/motor_L.c ****         mL_Low_CH2_ON();
 432:./Src/motor_L.c ****         mL_CHigh__ON();        
 433:./Src/motor_L.c ****       break;
 434:./Src/motor_L.c ****       case (0x0060):               //3
 435:./Src/motor_L.c ****         mL_Low_CH1_ON();        
 436:./Src/motor_L.c ****         mL_CHigh__ON();
ARM GAS  /tmp/ccX4v3II.s 			page 36


 437:./Src/motor_L.c ****       break;
 438:./Src/motor_L.c ****       case (0x0080):              //4
 439:./Src/motor_L.c ****         mL_AHigh__ON();
 440:./Src/motor_L.c ****         mL_Low_CH3_ON();        
 441:./Src/motor_L.c ****       break;
 442:./Src/motor_L.c ****       case (0x00A0):              //5
 443:./Src/motor_L.c ****         mL_BHigh__ON();
 444:./Src/motor_L.c ****         mL_Low_CH3_ON();        
 445:./Src/motor_L.c ****       break;
 446:./Src/motor_L.c ****       case (0x00C0):              //6
 447:./Src/motor_L.c ****         mL_AHigh__ON();
 448:./Src/motor_L.c ****         mL_Low_CH2_ON();        
 449:./Src/motor_L.c ****       break;  
 450:./Src/motor_L.c ****       default:
 451:./Src/motor_L.c ****         __NOP();
 452:./Src/motor_L.c ****       break;
 453:./Src/motor_L.c ****     }   
 454:./Src/motor_L.c ****   }
 455:./Src/motor_L.c **** }
 1132              		.loc 1 455 0
 1133 0062 10BD     		pop	{r4, pc}
 1134              	.L69:
 405:./Src/motor_L.c ****         mL_Low_CH3_ON();    
 1135              		.loc 1 405 0
 1136 0064 FFF7FEFF 		bl	mL_AHigh__ON
 1137              	.LVL62:
 406:./Src/motor_L.c ****       break;
 1138              		.loc 1 406 0
 1139 0068 FFF7FEFF 		bl	mL_Low_CH3_ON
 1140              	.LVL63:
 407:./Src/motor_L.c ****       case (0x0080):              //4
 1141              		.loc 1 407 0
 1142 006c F9E7     		b	.L65
 1143              	.L86:
 409:./Src/motor_L.c ****         mL_CHigh__ON();
 1144              		.loc 1 409 0
 1145 006e FFF7FEFF 		bl	mL_Low_CH1_ON
 1146              	.LVL64:
 410:./Src/motor_L.c ****       break;
 1147              		.loc 1 410 0
 1148 0072 FFF7FEFF 		bl	mL_CHigh__ON
 1149              	.LVL65:
 411:./Src/motor_L.c ****       case (0x00A0):              //5
 1150              		.loc 1 411 0
 1151 0076 F4E7     		b	.L65
 1152              	.L73:
 413:./Src/motor_L.c ****         mL_CHigh__ON();
 1153              		.loc 1 413 0
 1154 0078 FFF7FEFF 		bl	mL_Low_CH2_ON
 1155              	.LVL66:
 414:./Src/motor_L.c ****       break;
 1156              		.loc 1 414 0
 1157 007c FFF7FEFF 		bl	mL_CHigh__ON
 1158              	.LVL67:
 415:./Src/motor_L.c ****       case (0x00C0):              //6
 1159              		.loc 1 415 0
 1160 0080 EFE7     		b	.L65
ARM GAS  /tmp/ccX4v3II.s 			page 37


 1161              	.L74:
 417:./Src/motor_L.c ****         mL_BHigh__ON();
 1162              		.loc 1 417 0
 1163 0082 FFF7FEFF 		bl	mL_Low_CH1_ON
 1164              	.LVL68:
 418:./Src/motor_L.c ****       break;  
 1165              		.loc 1 418 0
 1166 0086 FFF7FEFF 		bl	mL_BHigh__ON
 1167              	.LVL69:
 419:./Src/motor_L.c ****       default:
 1168              		.loc 1 419 0
 1169 008a EAE7     		b	.L65
 1170              	.L67:
 425:./Src/motor_L.c ****       case (0x0020):               //1
 1171              		.loc 1 425 0
 1172 008c 184B     		ldr	r3, .L89+4
 1173 008e 9B89     		ldrh	r3, [r3, #12]
 1174 0090 9BB2     		uxth	r3, r3
 1175 0092 602B     		cmp	r3, #96
 1176 0094 16D0     		beq	.L77
 1177 0096 07D9     		bls	.L87
 1178 0098 A02B     		cmp	r3, #160
 1179 009a 1DD0     		beq	.L81
 1180 009c C02B     		cmp	r3, #192
 1181 009e 20D0     		beq	.L82
 1182 00a0 802B     		cmp	r3, #128
 1183 00a2 14D0     		beq	.L88
 1184              	.L76:
 1185              	.LBB14:
 1186              	.LBB15:
 1187              		.loc 2 375 0
 1188              		.syntax unified
 1189              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1190 00a4 00BF     		nop
 1191              	@ 0 "" 2
 1192              		.thumb
 1193              		.syntax unified
 1194 00a6 DCE7     		b	.L65
 1195              	.L87:
 1196              	.LBE15:
 1197              	.LBE14:
 425:./Src/motor_L.c ****       case (0x0020):               //1
 1198              		.loc 1 425 0
 1199 00a8 202B     		cmp	r3, #32
 1200 00aa 06D0     		beq	.L79
 1201 00ac 402B     		cmp	r3, #64
 1202 00ae F9D1     		bne	.L76
 431:./Src/motor_L.c ****         mL_CHigh__ON();        
 1203              		.loc 1 431 0
 1204 00b0 FFF7FEFF 		bl	mL_Low_CH2_ON
 1205              	.LVL70:
 432:./Src/motor_L.c ****       break;
 1206              		.loc 1 432 0
 1207 00b4 FFF7FEFF 		bl	mL_CHigh__ON
 1208              	.LVL71:
 433:./Src/motor_L.c ****       case (0x0060):               //3
 1209              		.loc 1 433 0
ARM GAS  /tmp/ccX4v3II.s 			page 38


 1210 00b8 D3E7     		b	.L65
 1211              	.L79:
 427:./Src/motor_L.c ****         mL_BHigh__ON();
 1212              		.loc 1 427 0
 1213 00ba FFF7FEFF 		bl	mL_Low_CH1_ON
 1214              	.LVL72:
 428:./Src/motor_L.c ****       break;
 1215              		.loc 1 428 0
 1216 00be FFF7FEFF 		bl	mL_BHigh__ON
 1217              	.LVL73:
 429:./Src/motor_L.c ****       case (0x0040):               //2
 1218              		.loc 1 429 0
 1219 00c2 CEE7     		b	.L65
 1220              	.L77:
 435:./Src/motor_L.c ****         mL_CHigh__ON();
 1221              		.loc 1 435 0
 1222 00c4 FFF7FEFF 		bl	mL_Low_CH1_ON
 1223              	.LVL74:
 436:./Src/motor_L.c ****       break;
 1224              		.loc 1 436 0
 1225 00c8 FFF7FEFF 		bl	mL_CHigh__ON
 1226              	.LVL75:
 437:./Src/motor_L.c ****       case (0x0080):              //4
 1227              		.loc 1 437 0
 1228 00cc C9E7     		b	.L65
 1229              	.L88:
 439:./Src/motor_L.c ****         mL_Low_CH3_ON();        
 1230              		.loc 1 439 0
 1231 00ce FFF7FEFF 		bl	mL_AHigh__ON
 1232              	.LVL76:
 440:./Src/motor_L.c ****       break;
 1233              		.loc 1 440 0
 1234 00d2 FFF7FEFF 		bl	mL_Low_CH3_ON
 1235              	.LVL77:
 441:./Src/motor_L.c ****       case (0x00A0):              //5
 1236              		.loc 1 441 0
 1237 00d6 C4E7     		b	.L65
 1238              	.L81:
 443:./Src/motor_L.c ****         mL_Low_CH3_ON();        
 1239              		.loc 1 443 0
 1240 00d8 FFF7FEFF 		bl	mL_BHigh__ON
 1241              	.LVL78:
 444:./Src/motor_L.c ****       break;
 1242              		.loc 1 444 0
 1243 00dc FFF7FEFF 		bl	mL_Low_CH3_ON
 1244              	.LVL79:
 445:./Src/motor_L.c ****       case (0x00C0):              //6
 1245              		.loc 1 445 0
 1246 00e0 BFE7     		b	.L65
 1247              	.L82:
 447:./Src/motor_L.c ****         mL_Low_CH2_ON();        
 1248              		.loc 1 447 0
 1249 00e2 FFF7FEFF 		bl	mL_AHigh__ON
 1250              	.LVL80:
 448:./Src/motor_L.c ****       break;  
 1251              		.loc 1 448 0
 1252 00e6 FFF7FEFF 		bl	mL_Low_CH2_ON
ARM GAS  /tmp/ccX4v3II.s 			page 39


 1253              	.LVL81:
 449:./Src/motor_L.c ****       default:
 1254              		.loc 1 449 0
 1255 00ea BAE7     		b	.L65
 1256              	.L90:
 1257              		.align	2
 1258              	.L89:
 1259 00ec 000C0140 		.word	1073810432
 1260 00f0 00000000 		.word	motorL
 1261              		.cfi_endproc
 1262              	.LFE88:
 1264              		.section	.text.MotorL_start,"ax",%progbits
 1265              		.align	1
 1266              		.global	MotorL_start
 1267              		.syntax unified
 1268              		.thumb
 1269              		.thumb_func
 1270              		.fpu softvfp
 1272              	MotorL_start:
 1273              	.LFB67:
  23:./Src/motor_L.c ****   mL_PWM_Set_ChALL(0);
 1274              		.loc 1 23 0
 1275              		.cfi_startproc
 1276              		@ args = 0, pretend = 0, frame = 0
 1277              		@ frame_needed = 0, uses_anonymous_args = 0
 1278 0000 38B5     		push	{r3, r4, r5, lr}
 1279              	.LCFI9:
 1280              		.cfi_def_cfa_offset 16
 1281              		.cfi_offset 3, -16
 1282              		.cfi_offset 4, -12
 1283              		.cfi_offset 5, -8
 1284              		.cfi_offset 14, -4
  24:./Src/motor_L.c ****   motorL.BLDCMotorL_deltavel = 0;
 1285              		.loc 1 24 0
 1286 0002 0020     		movs	r0, #0
 1287 0004 FFF7FEFF 		bl	mL_PWM_Set_ChALL
 1288              	.LVL82:
  25:./Src/motor_L.c ****   motorL.BLDCMotorL_velRAW = 0;
 1289              		.loc 1 25 0
 1290 0008 094D     		ldr	r5, .L93
 1291 000a 0024     		movs	r4, #0
 1292 000c 2C81     		strh	r4, [r5, #8]	@ movhi
  26:./Src/motor_L.c ****   HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 1293              		.loc 1 26 0
 1294 000e EC80     		strh	r4, [r5, #6]	@ movhi
  27:./Src/motor_L.c ****   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);  
 1295              		.loc 1 27 0
 1296 0010 2246     		mov	r2, r4
 1297 0012 2146     		mov	r1, r4
 1298 0014 1720     		movs	r0, #23
 1299 0016 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1300              	.LVL83:
  28:./Src/motor_L.c ****   mL_PWM_Set_ChALL(0);
 1301              		.loc 1 28 0
 1302 001a 1720     		movs	r0, #23
 1303 001c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1304              	.LVL84:
ARM GAS  /tmp/ccX4v3II.s 			page 40


  29:./Src/motor_L.c ****   motorL.stop = 0;  
 1305              		.loc 1 29 0
 1306 0020 2046     		mov	r0, r4
 1307 0022 FFF7FEFF 		bl	mL_PWM_Set_ChALL
 1308              	.LVL85:
  30:./Src/motor_L.c ****   mL_BLDCMotor();
 1309              		.loc 1 30 0
 1310 0026 AC73     		strb	r4, [r5, #14]
  31:./Src/motor_L.c **** }
 1311              		.loc 1 31 0
 1312 0028 FFF7FEFF 		bl	mL_BLDCMotor
 1313              	.LVL86:
  32:./Src/motor_L.c **** 
 1314              		.loc 1 32 0
 1315 002c 38BD     		pop	{r3, r4, r5, pc}
 1316              	.L94:
 1317 002e 00BF     		.align	2
 1318              	.L93:
 1319 0030 00000000 		.word	motorL
 1320              		.cfi_endproc
 1321              	.LFE67:
 1323              		.section	.text.MotorL_pwm,"ax",%progbits
 1324              		.align	1
 1325              		.global	MotorL_pwm
 1326              		.syntax unified
 1327              		.thumb
 1328              		.thumb_func
 1329              		.fpu softvfp
 1331              	MotorL_pwm:
 1332              	.LFB68:
  34:./Src/motor_L.c ****   static uint8_t last_motorL=0;
 1333              		.loc 1 34 0
 1334              		.cfi_startproc
 1335              		@ args = 0, pretend = 0, frame = 0
 1336              		@ frame_needed = 0, uses_anonymous_args = 0
 1337              	.LVL87:
 1338 0000 10B5     		push	{r4, lr}
 1339              	.LCFI10:
 1340              		.cfi_def_cfa_offset 8
 1341              		.cfi_offset 4, -8
 1342              		.cfi_offset 14, -4
  38:./Src/motor_L.c ****     value_percent = 1000;
 1343              		.loc 1 38 0
 1344 0002 B0F57A7F 		cmp	r0, #1000
 1345 0006 21DC     		bgt	.L105
 1346 0008 0446     		mov	r4, r0
  41:./Src/motor_L.c ****     value_percent = -1000;
 1347              		.loc 1 41 0
 1348 000a 10F57A7F 		cmn	r0, #1000
 1349 000e 1FDA     		bge	.L96
  42:./Src/motor_L.c ****   }
 1350              		.loc 1 42 0
 1351 0010 1D4C     		ldr	r4, .L112
 1352              	.LVL88:
 1353              	.L97:
  45:./Src/motor_L.c **** 
 1354              		.loc 1 45 0
ARM GAS  /tmp/ccX4v3II.s 			page 41


 1355 0012 6042     		negs	r0, r4
 1356 0014 80B2     		uxth	r0, r0
 1357 0016 04B2     		sxth	r4, r0
 1358              	.LVL89:
  47:./Src/motor_L.c ****       mL_PWM_Set_ChALL(value_percent);
 1359              		.loc 1 47 0
 1360 0018 1C4B     		ldr	r3, .L112+4
 1361 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1362 001c 23B3     		cbz	r3, .L108
 1363              	.L99:
  50:./Src/motor_L.c ****     last_motorL = 1;
 1364              		.loc 1 50 0
 1365 001e 0123     		movs	r3, #1
 1366 0020 1B4A     		ldr	r2, .L112+8
 1367 0022 9372     		strb	r3, [r2, #10]
  51:./Src/motor_L.c ****   }else{
 1368              		.loc 1 51 0
 1369 0024 194A     		ldr	r2, .L112+4
 1370 0026 1370     		strb	r3, [r2]
 1371              	.L100:
  60:./Src/motor_L.c ****     motorL.stop = 1;    //ferma motore
 1372              		.loc 1 60 0
 1373 0028 A4B2     		uxth	r4, r4
 1374 002a 631D     		adds	r3, r4, #5
 1375 002c 9BB2     		uxth	r3, r3
 1376 002e 0A2B     		cmp	r3, #10
 1377 0030 21D9     		bls	.L109
  64:./Src/motor_L.c ****     if(last_motorLStop){
 1378              		.loc 1 64 0
 1379 0032 174B     		ldr	r3, .L112+8
 1380 0034 0022     		movs	r2, #0
 1381 0036 9A73     		strb	r2, [r3, #14]
  65:./Src/motor_L.c ****         //riattiva
 1382              		.loc 1 65 0
 1383 0038 164B     		ldr	r3, .L112+12
 1384 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1385 003c 0BBB     		cbnz	r3, .L110
 1386              	.L104:
  69:./Src/motor_L.c ****   }
 1387              		.loc 1 69 0
 1388 003e 154B     		ldr	r3, .L112+12
 1389 0040 0022     		movs	r2, #0
 1390 0042 1A70     		strb	r2, [r3]
 1391              	.L103:
  72:./Src/motor_L.c **** }
 1392              		.loc 1 72 0
 1393 0044 2046     		mov	r0, r4
 1394 0046 FFF7FEFF 		bl	mL_PWM_Set_ChALL
 1395              	.LVL90:
  73:./Src/motor_L.c **** 
 1396              		.loc 1 73 0
 1397 004a 10BD     		pop	{r4, pc}
 1398              	.LVL91:
 1399              	.L105:
  39:./Src/motor_L.c ****   }
 1400              		.loc 1 39 0
 1401 004c 4FF47A74 		mov	r4, #1000
ARM GAS  /tmp/ccX4v3II.s 			page 42


 1402              	.L96:
 1403              	.LVL92:
  44:./Src/motor_L.c ****     value_percent = value_percent * -1;
 1404              		.loc 1 44 0
 1405 0050 002C     		cmp	r4, #0
 1406 0052 DEDB     		blt	.L97
  53:./Src/motor_L.c ****       mL_PWM_Set_ChALL(value_percent);
 1407              		.loc 1 53 0
 1408 0054 0D4B     		ldr	r3, .L112+4
 1409 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1410 0058 012B     		cmp	r3, #1
 1411 005a 08D0     		beq	.L111
 1412              	.L101:
  56:./Src/motor_L.c ****      last_motorL = 0;
 1413              		.loc 1 56 0
 1414 005c 0023     		movs	r3, #0
 1415 005e 0C4A     		ldr	r2, .L112+8
 1416 0060 9372     		strb	r3, [r2, #10]
  57:./Src/motor_L.c ****   }
 1417              		.loc 1 57 0
 1418 0062 0A4A     		ldr	r2, .L112+4
 1419 0064 1370     		strb	r3, [r2]
 1420 0066 DFE7     		b	.L100
 1421              	.L108:
  48:./Src/motor_L.c ****     }
 1422              		.loc 1 48 0
 1423 0068 FFF7FEFF 		bl	mL_PWM_Set_ChALL
 1424              	.LVL93:
 1425 006c D7E7     		b	.L99
 1426              	.L111:
  54:./Src/motor_L.c ****     }
 1427              		.loc 1 54 0
 1428 006e A0B2     		uxth	r0, r4
 1429 0070 FFF7FEFF 		bl	mL_PWM_Set_ChALL
 1430              	.LVL94:
 1431 0074 F2E7     		b	.L101
 1432              	.L109:
  61:./Src/motor_L.c ****     last_motorLStop = 1;    
 1433              		.loc 1 61 0
 1434 0076 0123     		movs	r3, #1
 1435 0078 054A     		ldr	r2, .L112+8
 1436 007a 9373     		strb	r3, [r2, #14]
  62:./Src/motor_L.c ****   }else{
 1437              		.loc 1 62 0
 1438 007c 054A     		ldr	r2, .L112+12
 1439 007e 1370     		strb	r3, [r2]
 1440 0080 E0E7     		b	.L103
 1441              	.L110:
  67:./Src/motor_L.c ****     }
 1442              		.loc 1 67 0
 1443 0082 FFF7FEFF 		bl	mL_BLDCMotor
 1444              	.LVL95:
 1445 0086 DAE7     		b	.L104
 1446              	.L113:
 1447              		.align	2
 1448              	.L112:
 1449 0088 18FCFFFF 		.word	-1000
ARM GAS  /tmp/ccX4v3II.s 			page 43


 1450 008c 00000000 		.word	.LANCHOR0
 1451 0090 00000000 		.word	motorL
 1452 0094 00000000 		.word	.LANCHOR1
 1453              		.cfi_endproc
 1454              	.LFE68:
 1456              		.section	.text.HALL_L_ISR_Callback,"ax",%progbits
 1457              		.align	1
 1458              		.global	HALL_L_ISR_Callback
 1459              		.syntax unified
 1460              		.thumb
 1461              		.thumb_func
 1462              		.fpu softvfp
 1464              	HALL_L_ISR_Callback:
 1465              	.LFB89:
 456:./Src/motor_L.c **** 
 457:./Src/motor_L.c **** 
 458:./Src/motor_L.c **** 
 459:./Src/motor_L.c **** 
 460:./Src/motor_L.c **** 
 461:./Src/motor_L.c **** void HALL_L_ISR_Callback(void){
 1466              		.loc 1 461 0
 1467              		.cfi_startproc
 1468              		@ args = 0, pretend = 0, frame = 0
 1469              		@ frame_needed = 0, uses_anonymous_args = 0
 1470              		@ link register save eliminated.
 462:./Src/motor_L.c ****     motorL.BLDCMotorL_count= 1;        //Delay x ritardo x debounce
 1471              		.loc 1 462 0
 1472 0000 024B     		ldr	r3, .L115
 1473 0002 0122     		movs	r2, #1
 1474 0004 1A71     		strb	r2, [r3, #4]
 463:./Src/motor_L.c ****     motorL.BLDCMotorL_flag = 1;        //Update motor
 1475              		.loc 1 463 0
 1476 0006 5A71     		strb	r2, [r3, #5]
 464:./Src/motor_L.c **** }
 1477              		.loc 1 464 0
 1478 0008 7047     		bx	lr
 1479              	.L116:
 1480 000a 00BF     		.align	2
 1481              	.L115:
 1482 000c 00000000 		.word	motorL
 1483              		.cfi_endproc
 1484              	.LFE89:
 1486              		.section	.text.PWM_L_ISR_Callback,"ax",%progbits
 1487              		.align	1
 1488              		.global	PWM_L_ISR_Callback
 1489              		.syntax unified
 1490              		.thumb
 1491              		.thumb_func
 1492              		.fpu softvfp
 1494              	PWM_L_ISR_Callback:
 1495              	.LFB90:
 465:./Src/motor_L.c **** 
 466:./Src/motor_L.c **** //40uS Interrupt -- 25Khz
 467:./Src/motor_L.c **** void PWM_L_ISR_Callback(void){
 1496              		.loc 1 467 0
 1497              		.cfi_startproc
 1498              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccX4v3II.s 			page 44


 1499              		@ frame_needed = 0, uses_anonymous_args = 0
 1500 0000 08B5     		push	{r3, lr}
 1501              	.LCFI11:
 1502              		.cfi_def_cfa_offset 8
 1503              		.cfi_offset 3, -8
 1504              		.cfi_offset 14, -4
 468:./Src/motor_L.c ****    if((motorL.BLDCMotorL_flag)&&(motorL.BLDCMotorL_count==0)){
 1505              		.loc 1 468 0
 1506 0002 164B     		ldr	r3, .L123
 1507 0004 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1508 0006 13B1     		cbz	r3, .L118
 1509              		.loc 1 468 0 is_stmt 0 discriminator 1
 1510 0008 144B     		ldr	r3, .L123
 1511 000a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1512 000c E3B1     		cbz	r3, .L122
 1513              	.L118:
 469:./Src/motor_L.c ****       mL_BLDCMotor();        //5uS
 470:./Src/motor_L.c ****       motorL.BLDCMotorL_flag = 0;      
 471:./Src/motor_L.c ****       //---
 472:./Src/motor_L.c ****       motorL.BLDCMotorL_velRAW = motorL.BLDCMotorL_deltavel;
 473:./Src/motor_L.c ****       motorL.BLDCMotorL_deltavel = 0;      
 474:./Src/motor_L.c ****    }else if((motorL.BLDCMotorL_flag)&&(motorL.BLDCMotorL_count!=0)){
 1514              		.loc 1 474 0 is_stmt 1
 1515 000e 134B     		ldr	r3, .L123
 1516 0010 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1517 0012 3BB1     		cbz	r3, .L119
 1518              		.loc 1 474 0 is_stmt 0 discriminator 1
 1519 0014 114B     		ldr	r3, .L123
 1520 0016 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1521 0018 23B1     		cbz	r3, .L119
 475:./Src/motor_L.c ****       motorL.BLDCMotorL_count--;
 1522              		.loc 1 475 0 is_stmt 1
 1523 001a 104A     		ldr	r2, .L123
 1524 001c 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 1525 001e 013B     		subs	r3, r3, #1
 1526 0020 DBB2     		uxtb	r3, r3
 1527 0022 1371     		strb	r3, [r2, #4]
 1528              	.L119:
 476:./Src/motor_L.c ****    }
 477:./Src/motor_L.c ****    motorL.BLDCMotorL_deltavel++;       //Calcolo velocita motore inc ogni 40uS
 1529              		.loc 1 477 0
 1530 0024 0D4A     		ldr	r2, .L123
 1531 0026 1389     		ldrh	r3, [r2, #8]
 1532 0028 0133     		adds	r3, r3, #1
 1533 002a 9BB2     		uxth	r3, r3
 1534 002c 1381     		strh	r3, [r2, #8]	@ movhi
 478:./Src/motor_L.c ****    if(motorL.BLDCMotorL_deltavel>=5000){
 1535              		.loc 1 478 0
 1536 002e 1389     		ldrh	r3, [r2, #8]
 1537 0030 9BB2     		uxth	r3, r3
 1538 0032 41F28732 		movw	r2, #4999
 1539 0036 9342     		cmp	r3, r2
 1540 0038 05D9     		bls	.L117
 479:./Src/motor_L.c ****     motorL.BLDCMotorL_deltavel = 5000;
 1541              		.loc 1 479 0
 1542 003a 084B     		ldr	r3, .L123
 1543 003c 41F28832 		movw	r2, #5000
ARM GAS  /tmp/ccX4v3II.s 			page 45


 1544 0040 1A81     		strh	r2, [r3, #8]	@ movhi
 480:./Src/motor_L.c ****     motorL.BLDCMotorL_velRAW = 0;     //Minima vel, motore fermo
 1545              		.loc 1 480 0
 1546 0042 0022     		movs	r2, #0
 1547 0044 DA80     		strh	r2, [r3, #6]	@ movhi
 1548              	.L117:
 481:./Src/motor_L.c ****    }
 482:./Src/motor_L.c **** }
 1549              		.loc 1 482 0
 1550 0046 08BD     		pop	{r3, pc}
 1551              	.L122:
 469:./Src/motor_L.c ****       motorL.BLDCMotorL_flag = 0;      
 1552              		.loc 1 469 0
 1553 0048 FFF7FEFF 		bl	mL_BLDCMotor
 1554              	.LVL96:
 470:./Src/motor_L.c ****       //---
 1555              		.loc 1 470 0
 1556 004c 034B     		ldr	r3, .L123
 1557 004e 0021     		movs	r1, #0
 1558 0050 5971     		strb	r1, [r3, #5]
 472:./Src/motor_L.c ****       motorL.BLDCMotorL_deltavel = 0;      
 1559              		.loc 1 472 0
 1560 0052 1A89     		ldrh	r2, [r3, #8]
 1561 0054 92B2     		uxth	r2, r2
 1562 0056 DA80     		strh	r2, [r3, #6]	@ movhi
 473:./Src/motor_L.c ****    }else if((motorL.BLDCMotorL_flag)&&(motorL.BLDCMotorL_count!=0)){
 1563              		.loc 1 473 0
 1564 0058 1981     		strh	r1, [r3, #8]	@ movhi
 1565 005a E3E7     		b	.L119
 1566              	.L124:
 1567              		.align	2
 1568              	.L123:
 1569 005c 00000000 		.word	motorL
 1570              		.cfi_endproc
 1571              	.LFE90:
 1573              		.comm	motorL,16,4
 1574              		.comm	htim8,60,4
 1575              		.section	.bss.last_motorL.7405,"aw",%nobits
 1576              		.set	.LANCHOR0,. + 0
 1579              	last_motorL.7405:
 1580 0000 00       		.space	1
 1581              		.section	.bss.last_motorLStop.7406,"aw",%nobits
 1582              		.set	.LANCHOR1,. + 0
 1585              	last_motorLStop.7406:
 1586 0000 00       		.space	1
 1587              		.text
 1588              	.Letext0:
 1589              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1590              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1591              		.file 5 "./Drivers/CMSIS/Include/core_cm3.h"
 1592              		.file 6 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1593              		.file 7 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 1594              		.file 8 "/usr/arm-none-eabi/include/sys/lock.h"
 1595              		.file 9 "/usr/arm-none-eabi/include/sys/_types.h"
 1596              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.2.0/include/stddef.h"
 1597              		.file 11 "/usr/arm-none-eabi/include/sys/reent.h"
 1598              		.file 12 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
ARM GAS  /tmp/ccX4v3II.s 			page 46


 1599              		.file 13 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1600              		.file 14 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1601              		.file 15 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 1602              		.file 16 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 1603              		.file 17 "./Inc/motor_L.h"
 1604              		.file 18 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
ARM GAS  /tmp/ccX4v3II.s 			page 47


DEFINED SYMBOLS
                            *ABS*:0000000000000000 motor_L.c
     /tmp/ccX4v3II.s:16     .text.mL_HallSensor_init:0000000000000000 $t
     /tmp/ccX4v3II.s:23     .text.mL_HallSensor_init:0000000000000000 mL_HallSensor_init
     /tmp/ccX4v3II.s:85     .text.mL_HallSensor_init:0000000000000044 $d
     /tmp/ccX4v3II.s:92     .text.mL_Low_CH1_ON:0000000000000000 $t
     /tmp/ccX4v3II.s:99     .text.mL_Low_CH1_ON:0000000000000000 mL_Low_CH1_ON
     /tmp/ccX4v3II.s:115    .text.mL_Low_CH1_ON:000000000000000c $d
     /tmp/ccX4v3II.s:120    .text.mL_Low_CH1_OFF:0000000000000000 $t
     /tmp/ccX4v3II.s:127    .text.mL_Low_CH1_OFF:0000000000000000 mL_Low_CH1_OFF
     /tmp/ccX4v3II.s:143    .text.mL_Low_CH1_OFF:0000000000000008 $d
     /tmp/ccX4v3II.s:148    .text.mL_Low_CH2_ON:0000000000000000 $t
     /tmp/ccX4v3II.s:155    .text.mL_Low_CH2_ON:0000000000000000 mL_Low_CH2_ON
     /tmp/ccX4v3II.s:171    .text.mL_Low_CH2_ON:000000000000000c $d
     /tmp/ccX4v3II.s:176    .text.mL_Low_CH2_OFF:0000000000000000 $t
     /tmp/ccX4v3II.s:183    .text.mL_Low_CH2_OFF:0000000000000000 mL_Low_CH2_OFF
     /tmp/ccX4v3II.s:199    .text.mL_Low_CH2_OFF:0000000000000008 $d
     /tmp/ccX4v3II.s:204    .text.mL_Low_CH3_ON:0000000000000000 $t
     /tmp/ccX4v3II.s:211    .text.mL_Low_CH3_ON:0000000000000000 mL_Low_CH3_ON
     /tmp/ccX4v3II.s:227    .text.mL_Low_CH3_ON:000000000000000c $d
     /tmp/ccX4v3II.s:232    .text.mL_Low_CH3_OFF:0000000000000000 $t
     /tmp/ccX4v3II.s:239    .text.mL_Low_CH3_OFF:0000000000000000 mL_Low_CH3_OFF
     /tmp/ccX4v3II.s:255    .text.mL_Low_CH3_OFF:0000000000000008 $d
     /tmp/ccX4v3II.s:260    .text.mL_AHigh__ON:0000000000000000 $t
     /tmp/ccX4v3II.s:267    .text.mL_AHigh__ON:0000000000000000 mL_AHigh__ON
     /tmp/ccX4v3II.s:285    .text.mL_AHigh__ON:0000000000000010 $d
                            *COM*:000000000000003c htim8
     /tmp/ccX4v3II.s:290    .text.mL_AHigh__OFF:0000000000000000 $t
     /tmp/ccX4v3II.s:297    .text.mL_AHigh__OFF:0000000000000000 mL_AHigh__OFF
     /tmp/ccX4v3II.s:317    .text.mL_AHigh__OFF:0000000000000014 $d
     /tmp/ccX4v3II.s:322    .text.mL_BHigh__ON:0000000000000000 $t
     /tmp/ccX4v3II.s:329    .text.mL_BHigh__ON:0000000000000000 mL_BHigh__ON
     /tmp/ccX4v3II.s:347    .text.mL_BHigh__ON:0000000000000010 $d
     /tmp/ccX4v3II.s:352    .text.mL_BHigh__OFF:0000000000000000 $t
     /tmp/ccX4v3II.s:359    .text.mL_BHigh__OFF:0000000000000000 mL_BHigh__OFF
     /tmp/ccX4v3II.s:379    .text.mL_BHigh__OFF:0000000000000014 $d
     /tmp/ccX4v3II.s:384    .text.mL_CHigh__ON:0000000000000000 $t
     /tmp/ccX4v3II.s:391    .text.mL_CHigh__ON:0000000000000000 mL_CHigh__ON
     /tmp/ccX4v3II.s:409    .text.mL_CHigh__ON:0000000000000010 $d
     /tmp/ccX4v3II.s:414    .text.mL_CHigh__OFF:0000000000000000 $t
     /tmp/ccX4v3II.s:421    .text.mL_CHigh__OFF:0000000000000000 mL_CHigh__OFF
     /tmp/ccX4v3II.s:441    .text.mL_CHigh__OFF:0000000000000014 $d
     /tmp/ccX4v3II.s:446    .text.mL_PWM_Set_Ch1:0000000000000000 $t
     /tmp/ccX4v3II.s:453    .text.mL_PWM_Set_Ch1:0000000000000000 mL_PWM_Set_Ch1
     /tmp/ccX4v3II.s:479    .text.mL_PWM_Set_Ch1:0000000000000018 $d
                            *COM*:0000000000000010 motorL
     /tmp/ccX4v3II.s:486    .text.mL_PWM_Set_Ch2:0000000000000000 $t
     /tmp/ccX4v3II.s:493    .text.mL_PWM_Set_Ch2:0000000000000000 mL_PWM_Set_Ch2
     /tmp/ccX4v3II.s:519    .text.mL_PWM_Set_Ch2:0000000000000018 $d
     /tmp/ccX4v3II.s:526    .text.mL_PWM_Set_Ch3:0000000000000000 $t
     /tmp/ccX4v3II.s:533    .text.mL_PWM_Set_Ch3:0000000000000000 mL_PWM_Set_Ch3
     /tmp/ccX4v3II.s:559    .text.mL_PWM_Set_Ch3:0000000000000018 $d
     /tmp/ccX4v3II.s:566    .text.mL_PWM_Set_ChALL:0000000000000000 $t
     /tmp/ccX4v3II.s:573    .text.mL_PWM_Set_ChALL:0000000000000000 mL_PWM_Set_ChALL
     /tmp/ccX4v3II.s:603    .text.mL_PWM_Set_ChALL:000000000000001c $d
     /tmp/ccX4v3II.s:610    .text.MotorL_stop:0000000000000000 $t
     /tmp/ccX4v3II.s:617    .text.MotorL_stop:0000000000000000 MotorL_stop
ARM GAS  /tmp/ccX4v3II.s 			page 48


     /tmp/ccX4v3II.s:684    .text.MotorL_stop:000000000000004c $d
     /tmp/ccX4v3II.s:690    .text.MX_TIM8_Init:0000000000000000 $t
     /tmp/ccX4v3II.s:697    .text.MX_TIM8_Init:0000000000000000 MX_TIM8_Init
     /tmp/ccX4v3II.s:976    .text.MX_TIM8_Init:0000000000000198 $d
     /tmp/ccX4v3II.s:989    .text.MotorL_init:0000000000000000 $t
     /tmp/ccX4v3II.s:996    .text.MotorL_init:0000000000000000 MotorL_init
     /tmp/ccX4v3II.s:1031   .text.MotorL_init:000000000000001c $d
     /tmp/ccX4v3II.s:1036   .text.mL_BLDCMotor:0000000000000000 $t
     /tmp/ccX4v3II.s:1043   .text.mL_BLDCMotor:0000000000000000 mL_BLDCMotor
     /tmp/ccX4v3II.s:1259   .text.mL_BLDCMotor:00000000000000ec $d
     /tmp/ccX4v3II.s:1265   .text.MotorL_start:0000000000000000 $t
     /tmp/ccX4v3II.s:1272   .text.MotorL_start:0000000000000000 MotorL_start
     /tmp/ccX4v3II.s:1319   .text.MotorL_start:0000000000000030 $d
     /tmp/ccX4v3II.s:1324   .text.MotorL_pwm:0000000000000000 $t
     /tmp/ccX4v3II.s:1331   .text.MotorL_pwm:0000000000000000 MotorL_pwm
     /tmp/ccX4v3II.s:1449   .text.MotorL_pwm:0000000000000088 $d
     /tmp/ccX4v3II.s:1457   .text.HALL_L_ISR_Callback:0000000000000000 $t
     /tmp/ccX4v3II.s:1464   .text.HALL_L_ISR_Callback:0000000000000000 HALL_L_ISR_Callback
     /tmp/ccX4v3II.s:1482   .text.HALL_L_ISR_Callback:000000000000000c $d
     /tmp/ccX4v3II.s:1487   .text.PWM_L_ISR_Callback:0000000000000000 $t
     /tmp/ccX4v3II.s:1494   .text.PWM_L_ISR_Callback:0000000000000000 PWM_L_ISR_Callback
     /tmp/ccX4v3II.s:1569   .text.PWM_L_ISR_Callback:000000000000005c $d
     /tmp/ccX4v3II.s:1579   .bss.last_motorL.7405:0000000000000000 last_motorL.7405
     /tmp/ccX4v3II.s:1580   .bss.last_motorL.7405:0000000000000000 $d
     /tmp/ccX4v3II.s:1585   .bss.last_motorLStop.7406:0000000000000000 last_motorLStop.7406
     /tmp/ccX4v3II.s:1586   .bss.last_motorLStop.7406:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_NVIC_DisableIRQ
HAL_TIM_PWM_Init
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_PWM_ConfigChannel
HAL_TIM_PWM_Start
HAL_TIM_PWM_Start_IT
SystemCoreClock
