ARM GAS  /tmp/cc6kLxup.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"application.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.GET_BatteryAverage,"ax",%progbits
  16              		.align	1
  17              		.global	GET_BatteryAverage
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	GET_BatteryAverage:
  24              	.LFB66:
  25              		.file 1 "./Src/application.c"
   1:./Src/application.c **** #include "application.h"
   2:./Src/application.c **** #include "motor_L.h"
   3:./Src/application.c **** #include "motor_R.h"
   4:./Src/application.c **** #include "i2c.h"
   5:./Src/application.c **** #include "ADC_L.h"
   6:./Src/application.c **** #include "ADC_R.h"
   7:./Src/application.c **** #include "varie.h"
   8:./Src/application.c **** #include "telemetry.h"
   9:./Src/application.c **** #include <stdlib.h>
  10:./Src/application.c **** 
  11:./Src/application.c **** extern IWDG_HandleTypeDef hiwdg;
  12:./Src/application.c **** 
  13:./Src/application.c **** volatile __IO struct APPLICATION_dati app;
  14:./Src/application.c **** volatile __IO struct BATTERY_dati battery_dati;
  15:./Src/application.c **** extern volatile __IO struct WII_JOYdati wii_JOYdati;
  16:./Src/application.c **** extern struct TELEMETRY_dati telemetry;
  17:./Src/application.c **** 
  18:./Src/application.c **** float GET_BatteryAverage(void){
  26              		.loc 1 18 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  19:./Src/application.c ****   return battery_dati.VBatt;
  31              		.loc 1 19 0
  32 0000 014B     		ldr	r3, .L2
  33 0002 1868     		ldr	r0, [r3]	@ float
  20:./Src/application.c **** }
  34              		.loc 1 20 0
  35 0004 7047     		bx	lr
  36              	.L3:
  37 0006 00BF     		.align	2
  38              	.L2:
ARM GAS  /tmp/cc6kLxup.s 			page 2


  39 0008 00000000 		.word	battery_dati
  40              		.cfi_endproc
  41              	.LFE66:
  43              		.section	.text.TASK_BATTERY_LOW_VOLTAGE,"ax",%progbits
  44              		.align	1
  45              		.global	TASK_BATTERY_LOW_VOLTAGE
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu softvfp
  51              	TASK_BATTERY_LOW_VOLTAGE:
  52              	.LFB67:
  21:./Src/application.c **** void TASK_BATTERY_LOW_VOLTAGE(void){
  53              		.loc 1 21 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57 0000 08B5     		push	{r3, lr}
  58              	.LCFI0:
  59              		.cfi_def_cfa_offset 8
  60              		.cfi_offset 3, -8
  61              		.cfi_offset 14, -4
  22:./Src/application.c ****   if((HAL_GetTick() - battery_dati.time_lowvoltage) > 600000){          //Ogni 10 min BEEP
  62              		.loc 1 22 0
  63 0002 FFF7FEFF 		bl	HAL_GetTick
  64              	.LVL0:
  65 0006 074B     		ldr	r3, .L8
  66 0008 1B69     		ldr	r3, [r3, #16]
  67 000a C01A     		subs	r0, r0, r3
  68 000c 064B     		ldr	r3, .L8+4
  69 000e 9842     		cmp	r0, r3
  70 0010 00D8     		bhi	.L7
  71              	.L4:
  23:./Src/application.c ****     battery_dati.time_lowvoltage = HAL_GetTick();
  24:./Src/application.c **** 
  25:./Src/application.c ****     Buzzer_OneLongBeep();
  26:./Src/application.c ****   }
  27:./Src/application.c **** }
  72              		.loc 1 27 0
  73 0012 08BD     		pop	{r3, pc}
  74              	.L7:
  23:./Src/application.c ****     battery_dati.time_lowvoltage = HAL_GetTick();
  75              		.loc 1 23 0
  76 0014 FFF7FEFF 		bl	HAL_GetTick
  77              	.LVL1:
  78 0018 024B     		ldr	r3, .L8
  79 001a 1861     		str	r0, [r3, #16]
  25:./Src/application.c ****   }
  80              		.loc 1 25 0
  81 001c FFF7FEFF 		bl	Buzzer_OneLongBeep
  82              	.LVL2:
  83              		.loc 1 27 0
  84 0020 F7E7     		b	.L4
  85              	.L9:
  86 0022 00BF     		.align	2
  87              	.L8:
  88 0024 00000000 		.word	battery_dati
ARM GAS  /tmp/cc6kLxup.s 			page 3


  89 0028 C0270900 		.word	600000
  90              		.cfi_endproc
  91              	.LFE67:
  93              		.section	.text.applcation_init,"ax",%progbits
  94              		.align	1
  95              		.global	applcation_init
  96              		.syntax unified
  97              		.thumb
  98              		.thumb_func
  99              		.fpu softvfp
 101              	applcation_init:
 102              	.LFB69:
  28:./Src/application.c **** void WAIT_CHARGE_FINISH(void){
  29:./Src/application.c ****   uint32_t timerBatteryC;
  30:./Src/application.c **** 
  31:./Src/application.c ****   Led_Set(1);
  32:./Src/application.c ****   MotorR_stop();
  33:./Src/application.c ****   MotorL_stop();
  34:./Src/application.c ****   HAL_IWDG_Refresh(&hiwdg);   //819mS
  35:./Src/application.c ****   Buzzer_OneLongBeep();
  36:./Src/application.c ****   HAL_IWDG_Refresh(&hiwdg);   //819mS
  37:./Src/application.c ****   Buzzer_OneLongBeep();
  38:./Src/application.c ****   timerBatteryC = HAL_GetTick();
  39:./Src/application.c **** 
  40:./Src/application.c ****   while(IS_Charge()==0){
  41:./Src/application.c ****     HAL_IWDG_Refresh(&hiwdg);   //819mS
  42:./Src/application.c ****     HAL_Delay(250);
  43:./Src/application.c ****     Battery_TASK();
  44:./Src/application.c ****     if(GET_BatteryAverage() < 41.250){
  45:./Src/application.c ****       timerBatteryC = HAL_GetTick();
  46:./Src/application.c ****     }
  47:./Src/application.c ****     if((HAL_GetTick() - timerBatteryC) > 20000){ //600000       x 20Sec, batteria sopra i 42Volt, a
  48:./Src/application.c ****       Buzzer_OneLongBeep();
  49:./Src/application.c ****       HAL_IWDG_Refresh(&hiwdg);   //819mS
  50:./Src/application.c ****     }
  51:./Src/application.c ****   }
  52:./Src/application.c ****   Led_Set(0);
  53:./Src/application.c ****   applcation_init();
  54:./Src/application.c **** }
  55:./Src/application.c **** 
  56:./Src/application.c **** void applcation_init(void){
 103              		.loc 1 56 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107 0000 70B5     		push	{r4, r5, r6, lr}
 108              	.LCFI1:
 109              		.cfi_def_cfa_offset 16
 110              		.cfi_offset 4, -16
 111              		.cfi_offset 5, -12
 112              		.cfi_offset 6, -8
 113              		.cfi_offset 14, -4
  57:./Src/application.c ****   app.stato = app_init;
 114              		.loc 1 57 0
 115 0002 0B4C     		ldr	r4, .L12
 116 0004 0026     		movs	r6, #0
 117 0006 2670     		strb	r6, [r4]
ARM GAS  /tmp/cc6kLxup.s 			page 4


  58:./Src/application.c ****   MotorR_stop();
 118              		.loc 1 58 0
 119 0008 FFF7FEFF 		bl	MotorR_stop
 120              	.LVL3:
  59:./Src/application.c ****   MotorL_stop();
 121              		.loc 1 59 0
 122 000c FFF7FEFF 		bl	MotorL_stop
 123              	.LVL4:
  60:./Src/application.c ****   battery_dati.time_batt = HAL_GetTick();
 124              		.loc 1 60 0
 125 0010 FFF7FEFF 		bl	HAL_GetTick
 126              	.LVL5:
 127 0014 074D     		ldr	r5, .L12+4
 128 0016 6860     		str	r0, [r5, #4]
  61:./Src/application.c ****   battery_dati.time_lowvoltage = HAL_GetTick();
 129              		.loc 1 61 0
 130 0018 FFF7FEFF 		bl	HAL_GetTick
 131              	.LVL6:
 132 001c 2861     		str	r0, [r5, #16]
  62:./Src/application.c ****   battery_dati.somma_batt = 1400;
 133              		.loc 1 62 0
 134 001e 4FF4AF63 		mov	r3, #1400
 135 0022 AB60     		str	r3, [r5, #8]
  63:./Src/application.c ****   battery_dati.counter_media = 0;
 136              		.loc 1 63 0
 137 0024 2E73     		strb	r6, [r5, #12]
  64:./Src/application.c ****   app.cruise_soft_run_nohand = 0.0;
 138              		.loc 1 64 0
 139 0026 0023     		movs	r3, #0
 140 0028 A361     		str	r3, [r4, #24]	@ float
  65:./Src/application.c **** 
  66:./Src/application.c ****   app.faccY=0.0;
 141              		.loc 1 66 0
 142 002a 6362     		str	r3, [r4, #36]	@ float
  67:./Src/application.c ****   app.faccX=0.0;
 143              		.loc 1 67 0
 144 002c A362     		str	r3, [r4, #40]	@ float
  68:./Src/application.c **** }
 145              		.loc 1 68 0
 146 002e 70BD     		pop	{r4, r5, r6, pc}
 147              	.L13:
 148              		.align	2
 149              	.L12:
 150 0030 00000000 		.word	app
 151 0034 00000000 		.word	battery_dati
 152              		.cfi_endproc
 153              	.LFE69:
 155              		.global	__aeabi_ui2f
 156              		.global	__aeabi_fsub
 157              		.global	__aeabi_fcmpge
 158              		.global	__aeabi_fcmpgt
 159              		.global	__aeabi_fcmplt
 160              		.section	.text.normalize_y,"ax",%progbits
 161              		.align	1
 162              		.global	normalize_y
 163              		.syntax unified
 164              		.thumb
ARM GAS  /tmp/cc6kLxup.s 			page 5


 165              		.thumb_func
 166              		.fpu softvfp
 168              	normalize_y:
 169              	.LFB71:
  69:./Src/application.c **** 
  70:./Src/application.c **** void applcation_TASK(void){
  71:./Src/application.c ****   uint8_t letture,temp8;
  72:./Src/application.c ****   float tempf1,tempf2;
  73:./Src/application.c **** 
  74:./Src/application.c ****   switch(app.stato){
  75:./Src/application.c ****     case app_init:
  76:./Src/application.c ****       MotorR_stop();
  77:./Src/application.c ****       MotorL_stop();
  78:./Src/application.c ****       //Aspetta Center joystick e calcola la media
  79:./Src/application.c ****       app.center_media_X = 0.0;
  80:./Src/application.c ****       app.center_media_Y = 0.0;
  81:./Src/application.c ****       letture = 0;
  82:./Src/application.c ****       wii_JOYdati.done = 0;
  83:./Src/application.c ****       do{
  84:./Src/application.c ****         HAL_IWDG_Refresh(&hiwdg);   //819mS
  85:./Src/application.c **** 
  86:./Src/application.c ****         while(wii_JOYdati.done==0){WiiNunchuck_TASK();}
  87:./Src/application.c ****         wii_JOYdati.done = 0;
  88:./Src/application.c ****         if((wii_JOYdati.ay < 129) && (wii_JOYdati.ay > 124)){
  89:./Src/application.c ****           letture++;
  90:./Src/application.c ****           temp8 = wii_JOYdati.ay;
  91:./Src/application.c ****           app.center_media_Y = app.center_media_Y + ((float)temp8);
  92:./Src/application.c ****         }else{
  93:./Src/application.c ****           letture = 0;
  94:./Src/application.c ****           app.center_media_Y = 0.0;
  95:./Src/application.c ****         }
  96:./Src/application.c ****       }while(letture < 50);
  97:./Src/application.c ****       app.center_media_Y = app.center_media_Y / 50.0;
  98:./Src/application.c ****       letture = 0;
  99:./Src/application.c ****       wii_JOYdati.done = 0;
 100:./Src/application.c ****       do{
 101:./Src/application.c ****         HAL_IWDG_Refresh(&hiwdg);   //819mS
 102:./Src/application.c **** 
 103:./Src/application.c ****         while(wii_JOYdati.done==0){WiiNunchuck_TASK();}
 104:./Src/application.c ****         wii_JOYdati.done = 0;
 105:./Src/application.c ****         if((wii_JOYdati.ax < 129) && (wii_JOYdati.ax > 124)){
 106:./Src/application.c ****           letture++;
 107:./Src/application.c ****           temp8 = wii_JOYdati.ax;
 108:./Src/application.c ****           app.center_media_X = app.center_media_X + ((float)temp8);
 109:./Src/application.c ****         }else{
 110:./Src/application.c ****           letture = 0;
 111:./Src/application.c ****           app.center_media_X = 0.0;
 112:./Src/application.c ****         }
 113:./Src/application.c ****       }while(letture < 50);
 114:./Src/application.c ****       app.center_media_X = app.center_media_X / 50.0;
 115:./Src/application.c **** 
 116:./Src/application.c ****       accelleration_XY_Reset();
 117:./Src/application.c **** 
 118:./Src/application.c ****       app.tsoft_run = HAL_GetTick();
 119:./Src/application.c ****       app.stato = app_soft_run;
 120:./Src/application.c ****       MotorR_start();
 121:./Src/application.c ****       MotorL_start();
ARM GAS  /tmp/cc6kLxup.s 			page 6


 122:./Src/application.c **** 
 123:./Src/application.c ****       Buzzer_OneShortBeep();
 124:./Src/application.c **** 
 125:./Src/application.c ****     break;
 126:./Src/application.c **** 
 127:./Src/application.c ****     case app_soft_run:
 128:./Src/application.c ****      //INDOOR LIMIT 30; -30
 129:./Src/application.c ****       app.ayn = normalize_y(wii_JOYdati.ay);
 130:./Src/application.c ****       app.axn = normalize_x(wii_JOYdati.ax);
 131:./Src/application.c **** 
 132:./Src/application.c ****       //scala x soft run
 133:./Src/application.c ****       tempf1 = app.ayn;
 134:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 135:./Src/application.c ****       app.ayn = scale_y(tempf1, tempf2);
 136:./Src/application.c ****       tempf1 = app.axn;
 137:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 138:./Src/application.c ****       app.axn = scale_x(tempf1, tempf2);
 139:./Src/application.c **** 
 140:./Src/application.c ****       app.ayn = accellerationY(app.ayn);
 141:./Src/application.c ****       app.axn = accellerationX(app.axn);
 142:./Src/application.c **** 
 143:./Src/application.c ****       tempf1 = app.ayn;
 144:./Src/application.c ****       tempf2 = app.axn;
 145:./Src/application.c **** 
 146:./Src/application.c ****       go_motor(tempf1, tempf2, battery_dati.VBatt, 0);
 147:./Src/application.c **** 
 148:./Src/application.c ****       //soft_run_nohand
 149:./Src/application.c ****       temp8 = wii_JOYdati.ay;
 150:./Src/application.c ****       if((wii_JOYdati.bz == 0)&&((((float)temp8 - app.center_media_Y) > 4.0))&&(telemetry.dataREADY
 151:./Src/application.c ****         if((HAL_GetTick() - app.tsoft_run)>=1000){
 152:./Src/application.c ****             app.cruise_soft_run_nohand = 0.0;
 153:./Src/application.c ****             app.stato = app_soft_run_nohand;
 154:./Src/application.c ****             app.tcruise_decrement = HAL_GetTick();
 155:./Src/application.c ****             Buzzer_OneShortBeep();
 156:./Src/application.c ****         }
 157:./Src/application.c ****       }else{
 158:./Src/application.c ****         app.tsoft_run = HAL_GetTick();
 159:./Src/application.c ****       }
 160:./Src/application.c ****       //Android APP ?
 161:./Src/application.c ****       if(telemetry.dataREADY_JOYSTICK){
 162:./Src/application.c ****         telemetry.dataREADY_JOYSTICK  = 0;
 163:./Src/application.c ****         if(telemetry.dataLast_Command == 'R'){
 164:./Src/application.c ****           app.stato = app_soft_ANDROIDAPP;
 165:./Src/application.c ****           app.tAndroidAPP = HAL_GetTick();
 166:./Src/application.c ****           accelleration_XY_Reset();
 167:./Src/application.c ****         }
 168:./Src/application.c ****         telemetry.dataLast_Command = 0;
 169:./Src/application.c ****       }
 170:./Src/application.c ****       //Hard RUN joystick press 'c' switch
 171:./Src/application.c ****       if((wii_JOYdati.bc == 0)&&(wii_JOYdati.bz == 1)&&(telemetry.dataREADY_JOYSTICK==0)){
 172:./Src/application.c ****           app.stato = app_hard_run;
 173:./Src/application.c ****           //accelleration_XY_Reset();     //??????
 174:./Src/application.c ****       }
 175:./Src/application.c ****     break;
 176:./Src/application.c **** 
 177:./Src/application.c ****     case app_hard_run:
 178:./Src/application.c ****      //OUTDOOR LIMIT FULL
ARM GAS  /tmp/cc6kLxup.s 			page 7


 179:./Src/application.c ****       app.ayn = normalize_y(wii_JOYdati.ay);
 180:./Src/application.c ****       app.axn = normalize_x(wii_JOYdati.ax);
 181:./Src/application.c **** 
 182:./Src/application.c ****       //scala x soft run
 183:./Src/application.c ****       tempf1 = app.ayn * 0.90;
 184:./Src/application.c ****       app.ayn = tempf1;
 185:./Src/application.c ****       tempf2 = app.axn * 0.90;
 186:./Src/application.c ****       //tempf2 = battery_dati.VBatt;
 187:./Src/application.c ****       app.axn = tempf2;
 188:./Src/application.c **** 
 189:./Src/application.c ****       app.ayn = accellerationYHARD(app.ayn);
 190:./Src/application.c ****       app.axn = accellerationXHARD(app.axn);
 191:./Src/application.c **** 
 192:./Src/application.c ****       tempf1 = app.ayn;
 193:./Src/application.c ****       tempf2 = app.axn;
 194:./Src/application.c ****       if(tempf1 < 0){
 195:./Src/application.c ****         tempf1 = 0;
 196:./Src/application.c ****       }
 197:./Src/application.c ****       go_motor(tempf1, tempf2, battery_dati.VBatt, 1);
 198:./Src/application.c **** 
 199:./Src/application.c ****       //Soft RUN joystick press 'c' switch
 200:./Src/application.c ****       if(wii_JOYdati.bc == 1){
 201:./Src/application.c ****           //MotorR_stop();
 202:./Src/application.c ****           //MotorL_stop();
 203:./Src/application.c ****           //accelleration_XY_Reset();     //??????
 204:./Src/application.c ****           app.stato = app_soft_run;
 205:./Src/application.c ****       }
 206:./Src/application.c ****     break;
 207:./Src/application.c **** 
 208:./Src/application.c ****     case app_soft_run_nohand:
 209:./Src/application.c ****       app.ayn = normalize_y(wii_JOYdati.ay);
 210:./Src/application.c ****       app.axn = normalize_x(wii_JOYdati.ax);
 211:./Src/application.c **** 
 212:./Src/application.c ****       //scala x soft run
 213:./Src/application.c ****       tempf1 = app.ayn;
 214:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 215:./Src/application.c ****       app.ayn = scale_y(tempf1, tempf2);
 216:./Src/application.c ****       tempf1 = app.axn;
 217:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 218:./Src/application.c ****       app.axn = scale_x(tempf1, tempf2);
 219:./Src/application.c **** 
 220:./Src/application.c ****       app.ayn = accellerationY(app.ayn);
 221:./Src/application.c ****       app.axn = accellerationX(app.axn);
 222:./Src/application.c **** 
 223:./Src/application.c ****       //Attiva cruise control
 224:./Src/application.c ****       if(app.ayn > 5.0){
 225:./Src/application.c ****         tempf1 = app.cruise_soft_run_nohand;
 226:./Src/application.c ****         if((app.ayn - 5.0) > tempf1){
 227:./Src/application.c ****           app.cruise_soft_run_nohand = app.ayn - 5.0;
 228:./Src/application.c ****         }
 229:./Src/application.c ****       }
 230:./Src/application.c ****        //Decrementa Cruise
 231:./Src/application.c ****       if((app.ayn < -5.0)&&(app.ayn > -23.0)){
 232:./Src/application.c ****         //con time step
 233:./Src/application.c ****         if((HAL_GetTick() - app.tcruise_decrement)>250){
 234:./Src/application.c ****           tempf1 = app.ayn / 10.0;
 235:./Src/application.c ****           app.cruise_soft_run_nohand = app.cruise_soft_run_nohand + tempf1;                //STEP D
ARM GAS  /tmp/cc6kLxup.s 			page 8


 236:./Src/application.c ****           if(app.cruise_soft_run_nohand < 0.0){
 237:./Src/application.c ****             app.cruise_soft_run_nohand = 0.0;
 238:./Src/application.c ****           }
 239:./Src/application.c ****           app.tcruise_decrement = HAL_GetTick();
 240:./Src/application.c ****         }
 241:./Src/application.c ****       }
 242:./Src/application.c ****       //Stop Cruise
 243:./Src/application.c ****       if(app.ayn <= -23.0){
 244:./Src/application.c ****         go_motor(0, 0, battery_dati.VBatt,0);
 245:./Src/application.c ****         MotorR_stop();
 246:./Src/application.c ****         MotorL_stop();
 247:./Src/application.c ****         accelleration_XY_Reset();
 248:./Src/application.c ****         app.cruise_soft_run_nohand = 0.0;
 249:./Src/application.c ****         app.stato = app_init;
 250:./Src/application.c ****         break;
 251:./Src/application.c ****       }
 252:./Src/application.c ****       tempf1 = app.cruise_soft_run_nohand;
 253:./Src/application.c ****       tempf2 = app.axn;
 254:./Src/application.c ****       go_motor(tempf1, tempf2, battery_dati.VBatt,0);
 255:./Src/application.c ****     break;
 256:./Src/application.c **** 
 257:./Src/application.c ****     case app_soft_ANDROIDAPP:
 258:./Src/application.c ****      //ANDROID APP
 259:./Src/application.c ****       if(telemetry.dataREADY_JOYSTICK){
 260:./Src/application.c ****         telemetry.dataREADY_JOYSTICK  = 0;
 261:./Src/application.c ****         app.tAndroidAPP = HAL_GetTick();
 262:./Src/application.c ****         if(telemetry.dataLast_Command == 'F'){
 263:./Src/application.c ****           MotorR_stop();
 264:./Src/application.c ****           MotorL_stop();
 265:./Src/application.c ****           accelleration_XY_Reset();
 266:./Src/application.c ****           app.cruise_soft_run_nohand = 0.0;
 267:./Src/application.c ****           app.stato = app_init;
 268:./Src/application.c ****           telemetry.dataLast_Command = 0;
 269:./Src/application.c ****           break;
 270:./Src/application.c ****         }
 271:./Src/application.c ****       }
 272:./Src/application.c ****       if((HAL_GetTick() - app.tAndroidAPP)>500){    //Se non ricevi risposta dalla APP esci dalla m
 273:./Src/application.c ****         go_motor(0, 0, battery_dati.VBatt,0);
 274:./Src/application.c ****         MotorR_stop();
 275:./Src/application.c ****         MotorL_stop();
 276:./Src/application.c ****         app.cruise_soft_run_nohand = 0.0;
 277:./Src/application.c ****         app.stato = app_init;
 278:./Src/application.c ****         break;
 279:./Src/application.c ****       }
 280:./Src/application.c **** 
 281:./Src/application.c **** 
 282:./Src/application.c ****       app.ayn = (float)telemetry.joyy;
 283:./Src/application.c ****       app.axn = (float)telemetry.joyx;
 284:./Src/application.c ****       if(app.ayn > 300.0){
 285:./Src/application.c ****         app.ayn = 300.0;
 286:./Src/application.c ****       }
 287:./Src/application.c ****       if(app.axn > 300.0){
 288:./Src/application.c ****         app.axn = 300.0;
 289:./Src/application.c ****       }
 290:./Src/application.c ****       if(app.ayn < 0.0){
 291:./Src/application.c ****         app.ayn = 0.0;
 292:./Src/application.c ****       }
ARM GAS  /tmp/cc6kLxup.s 			page 9


 293:./Src/application.c ****       if(app.axn < 0){
 294:./Src/application.c ****         app.axn = 0.0;
 295:./Src/application.c ****       }
 296:./Src/application.c **** 
 297:./Src/application.c ****       app.ayn = app.ayn - 75.0;
 298:./Src/application.c ****       app.axn = app.axn - 75.0;
 299:./Src/application.c **** 
 300:./Src/application.c ****       //scala x soft run
 301:./Src/application.c ****       tempf1 = app.ayn;
 302:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 303:./Src/application.c ****       app.ayn = scale_y(tempf1, tempf2);
 304:./Src/application.c ****       tempf1 = app.axn;
 305:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 306:./Src/application.c ****       app.axn = scale_x(tempf1, tempf2);
 307:./Src/application.c **** 
 308:./Src/application.c ****       app.ayn = accellerationY(app.ayn);
 309:./Src/application.c ****       app.axn = accellerationX(app.axn);
 310:./Src/application.c ****       tempf1 = app.ayn;
 311:./Src/application.c ****       tempf2 = app.axn;
 312:./Src/application.c ****       go_motor(tempf1, tempf2, battery_dati.VBatt,0);
 313:./Src/application.c ****     break;
 314:./Src/application.c **** 
 315:./Src/application.c ****     default:
 316:./Src/application.c ****         MotorR_stop();
 317:./Src/application.c ****         MotorL_stop();
 318:./Src/application.c ****         app.stato = app_init;
 319:./Src/application.c ****     break;
 320:./Src/application.c **** 
 321:./Src/application.c ****   }
 322:./Src/application.c **** 
 323:./Src/application.c **** }
 324:./Src/application.c **** 
 325:./Src/application.c **** 
 326:./Src/application.c **** 
 327:./Src/application.c **** 
 328:./Src/application.c **** 
 329:./Src/application.c **** 
 330:./Src/application.c **** 
 331:./Src/application.c **** 
 332:./Src/application.c **** 
 333:./Src/application.c **** 
 334:./Src/application.c **** 
 335:./Src/application.c **** 
 336:./Src/application.c **** 
 337:./Src/application.c **** 
 338:./Src/application.c **** 
 339:./Src/application.c **** 
 340:./Src/application.c **** 
 341:./Src/application.c **** 
 342:./Src/application.c **** float normalize_y(uint8_t y){
 170              		.loc 1 342 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              	.LVL7:
 175 0000 10B5     		push	{r4, lr}
 176              	.LCFI2:
ARM GAS  /tmp/cc6kLxup.s 			page 10


 177              		.cfi_def_cfa_offset 8
 178              		.cfi_offset 4, -8
 179              		.cfi_offset 14, -4
 180              	.LVL8:
 343:./Src/application.c ****   float ayn;
 344:./Src/application.c ****       ayn = 0.0;
 345:./Src/application.c ****       ayn = (float)((float)y - app.center_media_Y);
 181              		.loc 1 345 0
 182 0002 FFF7FEFF 		bl	__aeabi_ui2f
 183              	.LVL9:
 184 0006 0D4B     		ldr	r3, .L23
 185 0008 196A     		ldr	r1, [r3, #32]	@ float
 186 000a FFF7FEFF 		bl	__aeabi_fsub
 187              	.LVL10:
 188 000e 0446     		mov	r4, r0
 189              	.LVL11:
 346:./Src/application.c ****       //Limit
 347:./Src/application.c ****       if(ayn >= 0.0){
 190              		.loc 1 347 0
 191 0010 0021     		movs	r1, #0
 192 0012 FFF7FEFF 		bl	__aeabi_fcmpge
 193              	.LVL12:
 194 0016 30B1     		cbz	r0, .L21
 348:./Src/application.c ****         //0 ~ 100
 349:./Src/application.c ****         if(ayn > 100.0){
 195              		.loc 1 349 0
 196 0018 0949     		ldr	r1, .L23+4
 197 001a 2046     		mov	r0, r4
 198 001c FFF7FEFF 		bl	__aeabi_fcmpgt
 199              	.LVL13:
 200 0020 48B9     		cbnz	r0, .L18
 201              	.LVL14:
 202              	.L14:
 350:./Src/application.c ****           ayn = 100.0;
 351:./Src/application.c ****         }
 352:./Src/application.c ****       }else{
 353:./Src/application.c ****         //0 ~ -100
 354:./Src/application.c ****         if(ayn < -100.0){
 355:./Src/application.c ****           ayn = -100.0;
 356:./Src/application.c ****         }
 357:./Src/application.c ****       }
 358:./Src/application.c ****   return ayn;
 359:./Src/application.c **** }
 203              		.loc 1 359 0
 204 0022 2046     		mov	r0, r4
 205 0024 10BD     		pop	{r4, pc}
 206              	.LVL15:
 207              	.L21:
 354:./Src/application.c ****           ayn = -100.0;
 208              		.loc 1 354 0
 209 0026 0749     		ldr	r1, .L23+8
 210 0028 2046     		mov	r0, r4
 211 002a FFF7FEFF 		bl	__aeabi_fcmplt
 212              	.LVL16:
 213 002e 0028     		cmp	r0, #0
 214 0030 F7D0     		beq	.L14
 355:./Src/application.c ****         }
ARM GAS  /tmp/cc6kLxup.s 			page 11


 215              		.loc 1 355 0
 216 0032 044C     		ldr	r4, .L23+8
 217              	.LVL17:
 358:./Src/application.c **** }
 218              		.loc 1 358 0
 219 0034 F5E7     		b	.L14
 220              	.LVL18:
 221              	.L18:
 350:./Src/application.c ****         }
 222              		.loc 1 350 0
 223 0036 024C     		ldr	r4, .L23+4
 224              	.LVL19:
 225 0038 F3E7     		b	.L14
 226              	.L24:
 227 003a 00BF     		.align	2
 228              	.L23:
 229 003c 00000000 		.word	app
 230 0040 0000C842 		.word	1120403456
 231 0044 0000C8C2 		.word	-1027080192
 232              		.cfi_endproc
 233              	.LFE71:
 235              		.section	.text.normalize_x,"ax",%progbits
 236              		.align	1
 237              		.global	normalize_x
 238              		.syntax unified
 239              		.thumb
 240              		.thumb_func
 241              		.fpu softvfp
 243              	normalize_x:
 244              	.LFB72:
 360:./Src/application.c **** 
 361:./Src/application.c **** float normalize_x(uint8_t x){
 245              		.loc 1 361 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 0
 248              		@ frame_needed = 0, uses_anonymous_args = 0
 249              	.LVL20:
 250 0000 10B5     		push	{r4, lr}
 251              	.LCFI3:
 252              		.cfi_def_cfa_offset 8
 253              		.cfi_offset 4, -8
 254              		.cfi_offset 14, -4
 255              	.LVL21:
 362:./Src/application.c ****   float axn;
 363:./Src/application.c ****       axn = 0.0;
 364:./Src/application.c ****       axn = (float)((float)x - app.center_media_X);
 256              		.loc 1 364 0
 257 0002 FFF7FEFF 		bl	__aeabi_ui2f
 258              	.LVL22:
 259 0006 0D4B     		ldr	r3, .L34
 260 0008 D969     		ldr	r1, [r3, #28]	@ float
 261 000a FFF7FEFF 		bl	__aeabi_fsub
 262              	.LVL23:
 263 000e 0446     		mov	r4, r0
 264              	.LVL24:
 365:./Src/application.c ****       //Limit
 366:./Src/application.c **** 
ARM GAS  /tmp/cc6kLxup.s 			page 12


 367:./Src/application.c ****       if(axn >= 0.0){
 265              		.loc 1 367 0
 266 0010 0021     		movs	r1, #0
 267 0012 FFF7FEFF 		bl	__aeabi_fcmpge
 268              	.LVL25:
 269 0016 30B1     		cbz	r0, .L32
 368:./Src/application.c ****         //0 ~ 100
 369:./Src/application.c ****         if(axn > 100.0){
 270              		.loc 1 369 0
 271 0018 0949     		ldr	r1, .L34+4
 272 001a 2046     		mov	r0, r4
 273 001c FFF7FEFF 		bl	__aeabi_fcmpgt
 274              	.LVL26:
 275 0020 48B9     		cbnz	r0, .L29
 276              	.LVL27:
 277              	.L25:
 370:./Src/application.c ****           axn = 100.0;
 371:./Src/application.c ****         }
 372:./Src/application.c ****       }else{
 373:./Src/application.c ****         //0 ~ -100
 374:./Src/application.c ****         if(axn < -100.0){
 375:./Src/application.c ****           axn = -100.0;
 376:./Src/application.c ****         }
 377:./Src/application.c ****       }
 378:./Src/application.c ****   return axn;
 379:./Src/application.c **** }
 278              		.loc 1 379 0
 279 0022 2046     		mov	r0, r4
 280 0024 10BD     		pop	{r4, pc}
 281              	.LVL28:
 282              	.L32:
 374:./Src/application.c ****           axn = -100.0;
 283              		.loc 1 374 0
 284 0026 0749     		ldr	r1, .L34+8
 285 0028 2046     		mov	r0, r4
 286 002a FFF7FEFF 		bl	__aeabi_fcmplt
 287              	.LVL29:
 288 002e 0028     		cmp	r0, #0
 289 0030 F7D0     		beq	.L25
 375:./Src/application.c ****         }
 290              		.loc 1 375 0
 291 0032 044C     		ldr	r4, .L34+8
 292              	.LVL30:
 378:./Src/application.c **** }
 293              		.loc 1 378 0
 294 0034 F5E7     		b	.L25
 295              	.LVL31:
 296              	.L29:
 370:./Src/application.c ****         }
 297              		.loc 1 370 0
 298 0036 024C     		ldr	r4, .L34+4
 299              	.LVL32:
 300 0038 F3E7     		b	.L25
 301              	.L35:
 302 003a 00BF     		.align	2
 303              	.L34:
 304 003c 00000000 		.word	app
ARM GAS  /tmp/cc6kLxup.s 			page 13


 305 0040 0000C842 		.word	1120403456
 306 0044 0000C8C2 		.word	-1027080192
 307              		.cfi_endproc
 308              	.LFE72:
 310              		.section	.text.get_powerMax,"ax",%progbits
 311              		.align	1
 312              		.global	get_powerMax
 313              		.syntax unified
 314              		.thumb
 315              		.thumb_func
 316              		.fpu softvfp
 318              	get_powerMax:
 319              	.LFB75:
 380:./Src/application.c **** 
 381:./Src/application.c **** float scale_y(float y, float Vbatt){
 382:./Src/application.c ****   float ayn;
 383:./Src/application.c ****   ayn = 0.0;
 384:./Src/application.c ****       ayn = y * get_powerMax(Vbatt); //0.30000;
 385:./Src/application.c ****   return ayn;
 386:./Src/application.c **** }
 387:./Src/application.c **** 
 388:./Src/application.c **** float scale_x(float x, float Vbatt){
 389:./Src/application.c ****   float axn;
 390:./Src/application.c ****   axn = 0.0;
 391:./Src/application.c ****       axn = x * get_powerMax(Vbatt); //0.30000;
 392:./Src/application.c ****   return axn;
 393:./Src/application.c **** }
 394:./Src/application.c ****                                   //Vbatt,      Power max
 395:./Src/application.c **** const float Battery_power[][10] = {{40.0,       60.0/100.0},    //30% max potenza
 396:./Src/application.c ****                                   {38.0,        60.0/100.0},
 397:./Src/application.c ****                                   {37.0,        61.0/100.0},
 398:./Src/application.c ****                                   {36.0,        62.0/100.0},
 399:./Src/application.c ****                                   {35.0,        65.0/100.0},
 400:./Src/application.c ****                                   {34.0,        65.0/100.0},
 401:./Src/application.c ****                                   {33.0,        67.0/100.0},
 402:./Src/application.c ****                                   {32.0,        67.0/100.0},
 403:./Src/application.c ****                                   {31.0,        67.0/100.0},
 404:./Src/application.c ****                                   {30.0,        67.0/100.0}};
 405:./Src/application.c **** float get_powerMax(float Vbattery){
 320              		.loc 1 405 0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 0, uses_anonymous_args = 0
 324              	.LVL33:
 325 0000 10B5     		push	{r4, lr}
 326              	.LCFI4:
 327              		.cfi_def_cfa_offset 8
 328              		.cfi_offset 4, -8
 329              		.cfi_offset 14, -4
 330 0002 0446     		mov	r4, r0
 406:./Src/application.c ****   if(Vbattery >= Battery_power[0][0]){
 331              		.loc 1 406 0
 332 0004 1549     		ldr	r1, .L49
 333 0006 FFF7FEFF 		bl	__aeabi_fcmpge
 334              	.LVL34:
 335 000a E0B9     		cbnz	r0, .L39
 407:./Src/application.c ****     return Battery_power[0][1];
ARM GAS  /tmp/cc6kLxup.s 			page 14


 408:./Src/application.c ****   }else if(Vbattery >= Battery_power[1][0]){
 336              		.loc 1 408 0
 337 000c 1449     		ldr	r1, .L49+4
 338 000e 2046     		mov	r0, r4
 339 0010 FFF7FEFF 		bl	__aeabi_fcmpge
 340              	.LVL35:
 341 0014 C8B9     		cbnz	r0, .L40
 409:./Src/application.c ****     return Battery_power[1][1];
 410:./Src/application.c ****   }else if(Vbattery >= Battery_power[2][0]){
 342              		.loc 1 410 0
 343 0016 1349     		ldr	r1, .L49+8
 344 0018 2046     		mov	r0, r4
 345 001a FFF7FEFF 		bl	__aeabi_fcmpge
 346              	.LVL36:
 347 001e B0B9     		cbnz	r0, .L41
 411:./Src/application.c ****     return Battery_power[2][1];
 412:./Src/application.c ****   }else if(Vbattery >= Battery_power[3][0]){
 348              		.loc 1 412 0
 349 0020 1149     		ldr	r1, .L49+12
 350 0022 2046     		mov	r0, r4
 351 0024 FFF7FEFF 		bl	__aeabi_fcmpge
 352              	.LVL37:
 353 0028 98B9     		cbnz	r0, .L42
 413:./Src/application.c ****     return Battery_power[3][1];
 414:./Src/application.c ****   }else if(Vbattery >= Battery_power[4][0]){
 354              		.loc 1 414 0
 355 002a 1049     		ldr	r1, .L49+16
 356 002c 2046     		mov	r0, r4
 357 002e FFF7FEFF 		bl	__aeabi_fcmpge
 358              	.LVL38:
 359 0032 80B9     		cbnz	r0, .L43
 415:./Src/application.c ****     return Battery_power[4][1];
 416:./Src/application.c ****   }else if(Vbattery >= Battery_power[5][0]){
 360              		.loc 1 416 0
 361 0034 0E49     		ldr	r1, .L49+20
 362 0036 2046     		mov	r0, r4
 363 0038 FFF7FEFF 		bl	__aeabi_fcmpge
 364              	.LVL39:
 365 003c 08B9     		cbnz	r0, .L48
 417:./Src/application.c ****     return Battery_power[5][1];
 418:./Src/application.c ****   }else if(Vbattery >= Battery_power[6][0]){
 419:./Src/application.c ****     return Battery_power[6][1];
 366              		.loc 1 419 0
 367 003e 0D48     		ldr	r0, .L49+24
 368 0040 02E0     		b	.L36
 369              	.L48:
 417:./Src/application.c ****     return Battery_power[5][1];
 370              		.loc 1 417 0
 371 0042 0D48     		ldr	r0, .L49+28
 372 0044 00E0     		b	.L36
 373              	.L39:
 407:./Src/application.c ****   }else if(Vbattery >= Battery_power[1][0]){
 374              		.loc 1 407 0
 375 0046 0D48     		ldr	r0, .L49+32
 376              	.L36:
 420:./Src/application.c ****   }else if(Vbattery >= Battery_power[7][0]){
 421:./Src/application.c ****     return Battery_power[7][1];
ARM GAS  /tmp/cc6kLxup.s 			page 15


 422:./Src/application.c ****   }else if(Vbattery >= Battery_power[8][0]){
 423:./Src/application.c ****     return Battery_power[8][1];
 424:./Src/application.c ****   }else if(Vbattery >= Battery_power[9][0]){
 425:./Src/application.c ****     return Battery_power[9][1];
 426:./Src/application.c ****   }else{
 427:./Src/application.c ****     return Battery_power[9][1];
 428:./Src/application.c ****   }
 429:./Src/application.c **** }
 377              		.loc 1 429 0
 378 0048 10BD     		pop	{r4, pc}
 379              	.LVL40:
 380              	.L40:
 409:./Src/application.c ****   }else if(Vbattery >= Battery_power[2][0]){
 381              		.loc 1 409 0
 382 004a 0C48     		ldr	r0, .L49+32
 383 004c FCE7     		b	.L36
 384              	.L41:
 411:./Src/application.c ****   }else if(Vbattery >= Battery_power[3][0]){
 385              		.loc 1 411 0
 386 004e 0C48     		ldr	r0, .L49+36
 387 0050 FAE7     		b	.L36
 388              	.L42:
 413:./Src/application.c ****   }else if(Vbattery >= Battery_power[4][0]){
 389              		.loc 1 413 0
 390 0052 0C48     		ldr	r0, .L49+40
 391 0054 F8E7     		b	.L36
 392              	.L43:
 415:./Src/application.c ****   }else if(Vbattery >= Battery_power[5][0]){
 393              		.loc 1 415 0
 394 0056 0848     		ldr	r0, .L49+28
 395 0058 F6E7     		b	.L36
 396              	.L50:
 397 005a 00BF     		.align	2
 398              	.L49:
 399 005c 00002042 		.word	1109393408
 400 0060 00001842 		.word	1108869120
 401 0064 00001442 		.word	1108606976
 402 0068 00001042 		.word	1108344832
 403 006c 00000C42 		.word	1108082688
 404 0070 00000842 		.word	1107820544
 405 0074 1F852B3F 		.word	1059816735
 406 0078 6666263F 		.word	1059481190
 407 007c 9A99193F 		.word	1058642330
 408 0080 F6281C3F 		.word	1058810102
 409 0084 52B81E3F 		.word	1058977874
 410              		.cfi_endproc
 411              	.LFE75:
 413              		.global	__aeabi_fmul
 414              		.section	.text.scale_y,"ax",%progbits
 415              		.align	1
 416              		.global	scale_y
 417              		.syntax unified
 418              		.thumb
 419              		.thumb_func
 420              		.fpu softvfp
 422              	scale_y:
 423              	.LFB73:
ARM GAS  /tmp/cc6kLxup.s 			page 16


 381:./Src/application.c ****   float ayn;
 424              		.loc 1 381 0
 425              		.cfi_startproc
 426              		@ args = 0, pretend = 0, frame = 0
 427              		@ frame_needed = 0, uses_anonymous_args = 0
 428              	.LVL41:
 429 0000 10B5     		push	{r4, lr}
 430              	.LCFI5:
 431              		.cfi_def_cfa_offset 8
 432              		.cfi_offset 4, -8
 433              		.cfi_offset 14, -4
 434 0002 0446     		mov	r4, r0
 435              	.LVL42:
 384:./Src/application.c ****   return ayn;
 436              		.loc 1 384 0
 437 0004 0846     		mov	r0, r1
 438              	.LVL43:
 439 0006 FFF7FEFF 		bl	get_powerMax
 440              	.LVL44:
 441 000a 2146     		mov	r1, r4
 442 000c FFF7FEFF 		bl	__aeabi_fmul
 443              	.LVL45:
 386:./Src/application.c **** 
 444              		.loc 1 386 0
 445 0010 10BD     		pop	{r4, pc}
 446              		.cfi_endproc
 447              	.LFE73:
 449              		.section	.text.scale_x,"ax",%progbits
 450              		.align	1
 451              		.global	scale_x
 452              		.syntax unified
 453              		.thumb
 454              		.thumb_func
 455              		.fpu softvfp
 457              	scale_x:
 458              	.LFB74:
 388:./Src/application.c ****   float axn;
 459              		.loc 1 388 0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 0
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 463              	.LVL46:
 464 0000 10B5     		push	{r4, lr}
 465              	.LCFI6:
 466              		.cfi_def_cfa_offset 8
 467              		.cfi_offset 4, -8
 468              		.cfi_offset 14, -4
 469 0002 0446     		mov	r4, r0
 470              	.LVL47:
 391:./Src/application.c ****   return axn;
 471              		.loc 1 391 0
 472 0004 0846     		mov	r0, r1
 473              	.LVL48:
 474 0006 FFF7FEFF 		bl	get_powerMax
 475              	.LVL49:
 476 000a 2146     		mov	r1, r4
 477 000c FFF7FEFF 		bl	__aeabi_fmul
ARM GAS  /tmp/cc6kLxup.s 			page 17


 478              	.LVL50:
 393:./Src/application.c ****                                   //Vbatt,      Power max
 479              		.loc 1 393 0
 480 0010 10BD     		pop	{r4, pc}
 481              		.cfi_endproc
 482              	.LFE74:
 484              		.section	.text.accelleration_XY_Reset,"ax",%progbits
 485              		.align	1
 486              		.global	accelleration_XY_Reset
 487              		.syntax unified
 488              		.thumb
 489              		.thumb_func
 490              		.fpu softvfp
 492              	accelleration_XY_Reset:
 493              	.LFB76:
 430:./Src/application.c **** 
 431:./Src/application.c **** void accelleration_XY_Reset(void){
 494              		.loc 1 431 0
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 0
 497              		@ frame_needed = 0, uses_anonymous_args = 0
 498              		@ link register save eliminated.
 432:./Src/application.c ****   app.faccY = 0.0;
 499              		.loc 1 432 0
 500 0000 024B     		ldr	r3, .L56
 501 0002 0022     		movs	r2, #0
 502 0004 5A62     		str	r2, [r3, #36]	@ float
 433:./Src/application.c ****   app.faccX = 0.0;
 503              		.loc 1 433 0
 504 0006 9A62     		str	r2, [r3, #40]	@ float
 434:./Src/application.c **** }
 505              		.loc 1 434 0
 506 0008 7047     		bx	lr
 507              	.L57:
 508 000a 00BF     		.align	2
 509              	.L56:
 510 000c 00000000 		.word	app
 511              		.cfi_endproc
 512              	.LFE76:
 514              		.global	__aeabi_f2d
 515              		.global	__aeabi_dadd
 516              		.global	__aeabi_d2f
 517              		.global	__aeabi_dsub
 518              		.section	.text.accellerationY,"ax",%progbits
 519              		.align	1
 520              		.global	accellerationY
 521              		.syntax unified
 522              		.thumb
 523              		.thumb_func
 524              		.fpu softvfp
 526              	accellerationY:
 527              	.LFB77:
 435:./Src/application.c **** 
 436:./Src/application.c **** float accellerationY(float value){
 528              		.loc 1 436 0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc6kLxup.s 			page 18


 531              		@ frame_needed = 0, uses_anonymous_args = 0
 532              	.LVL51:
 533 0000 70B5     		push	{r4, r5, r6, lr}
 534              	.LCFI7:
 535              		.cfi_def_cfa_offset 16
 536              		.cfi_offset 4, -16
 537              		.cfi_offset 5, -12
 538              		.cfi_offset 6, -8
 539              		.cfi_offset 14, -4
 540 0002 0446     		mov	r4, r0
 437:./Src/application.c ****   /* value -> -1000 0 +1000 */
 438:./Src/application.c ****   float tval;
 439:./Src/application.c **** 
 440:./Src/application.c ****   tval = app.faccY;
 541              		.loc 1 440 0
 542 0004 1C4B     		ldr	r3, .L70+8
 543 0006 5D6A     		ldr	r5, [r3, #36]	@ float
 544              	.LVL52:
 441:./Src/application.c **** 
 442:./Src/application.c ****   //EXPEIMENT
 443:./Src/application.c ****   if(value > tval){
 545              		.loc 1 443 0
 546 0008 0146     		mov	r1, r0
 547 000a 2846     		mov	r0, r5
 548              	.LVL53:
 549 000c FFF7FEFF 		bl	__aeabi_fcmplt
 550              	.LVL54:
 551 0010 88B1     		cbz	r0, .L59
 444:./Src/application.c ****     app.faccY = app.faccY + ACCELLERATION_CONSTANT;
 552              		.loc 1 444 0
 553 0012 194E     		ldr	r6, .L70+8
 554 0014 706A     		ldr	r0, [r6, #36]	@ float
 555 0016 FFF7FEFF 		bl	__aeabi_f2d
 556              	.LVL55:
 557 001a 15A3     		adr	r3, .L70
 558 001c D3E90023 		ldrd	r2, [r3]
 559 0020 FFF7FEFF 		bl	__aeabi_dadd
 560              	.LVL56:
 561 0024 FFF7FEFF 		bl	__aeabi_d2f
 562              	.LVL57:
 563 0028 7062     		str	r0, [r6, #36]	@ float
 445:./Src/application.c ****     //limit
 446:./Src/application.c ****     if(app.faccY > value){
 564              		.loc 1 446 0
 565 002a 706A     		ldr	r0, [r6, #36]	@ float
 566 002c 2146     		mov	r1, r4
 567 002e FFF7FEFF 		bl	__aeabi_fcmpgt
 568              	.LVL58:
 569 0032 00B1     		cbz	r0, .L59
 447:./Src/application.c ****       app.faccY = (float)value;
 570              		.loc 1 447 0
 571 0034 7462     		str	r4, [r6, #36]	@ float
 572              	.L59:
 448:./Src/application.c ****     }
 449:./Src/application.c ****   }
 450:./Src/application.c ****   if(value < tval){
 573              		.loc 1 450 0
ARM GAS  /tmp/cc6kLxup.s 			page 19


 574 0036 2146     		mov	r1, r4
 575 0038 2846     		mov	r0, r5
 576 003a FFF7FEFF 		bl	__aeabi_fcmpgt
 577              	.LVL59:
 578 003e 88B1     		cbz	r0, .L62
 451:./Src/application.c ****     app.faccY = app.faccY - ACCELLERATION_CONSTANT;
 579              		.loc 1 451 0
 580 0040 0D4D     		ldr	r5, .L70+8
 581              	.LVL60:
 582 0042 686A     		ldr	r0, [r5, #36]	@ float
 583 0044 FFF7FEFF 		bl	__aeabi_f2d
 584              	.LVL61:
 585 0048 09A3     		adr	r3, .L70
 586 004a D3E90023 		ldrd	r2, [r3]
 587 004e FFF7FEFF 		bl	__aeabi_dsub
 588              	.LVL62:
 589 0052 FFF7FEFF 		bl	__aeabi_d2f
 590              	.LVL63:
 591 0056 6862     		str	r0, [r5, #36]	@ float
 452:./Src/application.c ****     //limit
 453:./Src/application.c ****     if(app.faccY < value){
 592              		.loc 1 453 0
 593 0058 686A     		ldr	r0, [r5, #36]	@ float
 594 005a 2146     		mov	r1, r4
 595 005c FFF7FEFF 		bl	__aeabi_fcmplt
 596              	.LVL64:
 597 0060 00B1     		cbz	r0, .L62
 454:./Src/application.c ****       app.faccY = (float)value;
 598              		.loc 1 454 0
 599 0062 6C62     		str	r4, [r5, #36]	@ float
 600              	.L62:
 455:./Src/application.c ****     }
 456:./Src/application.c ****   }
 457:./Src/application.c **** 
 458:./Src/application.c ****   /* //ORIGINAL
 459:./Src/application.c ****   if(value > 0.0){
 460:./Src/application.c ****     if(value > tval){
 461:./Src/application.c ****       //Accelleration
 462:./Src/application.c ****       if(tval < 0.0){
 463:./Src/application.c ****         app.faccY = 0.0;
 464:./Src/application.c ****       }else{
 465:./Src/application.c ****         app.faccY = app.faccY + ACCELLERATION_CONSTANT;
 466:./Src/application.c ****         //limit
 467:./Src/application.c ****         if(app.faccY > value){
 468:./Src/application.c ****           app.faccY = (float)value;
 469:./Src/application.c ****         }
 470:./Src/application.c ****       }
 471:./Src/application.c ****     }else if(value < tval){
 472:./Src/application.c ****         app.faccY = (float)value;
 473:./Src/application.c ****     }else{
 474:./Src/application.c ****         app.faccY = (float)value;
 475:./Src/application.c ****     }
 476:./Src/application.c ****   }else if(value < 0){
 477:./Src/application.c ****     if(value < tval){
 478:./Src/application.c ****       //Accelleration
 479:./Src/application.c ****       if(tval > 0){
 480:./Src/application.c ****         app.faccY = 0.0;
ARM GAS  /tmp/cc6kLxup.s 			page 20


 481:./Src/application.c ****       }else{
 482:./Src/application.c ****         app.faccY = app.faccY - ACCELLERATION_CONSTANT;
 483:./Src/application.c ****         //limit
 484:./Src/application.c ****         if(app.faccY < value){
 485:./Src/application.c ****           app.faccY = (float)value;
 486:./Src/application.c ****         }
 487:./Src/application.c ****       }
 488:./Src/application.c ****     }else if(value > tval){
 489:./Src/application.c ****         app.faccY = (float)value;
 490:./Src/application.c ****     }else{
 491:./Src/application.c ****         app.faccY = (float)value;
 492:./Src/application.c ****     }
 493:./Src/application.c ****   }else{
 494:./Src/application.c ****     app.faccY = (float)value;
 495:./Src/application.c ****   }*/
 496:./Src/application.c **** 
 497:./Src/application.c ****   tval = app.faccY;
 601              		.loc 1 497 0
 602 0064 044B     		ldr	r3, .L70+8
 603 0066 586A     		ldr	r0, [r3, #36]	@ float
 604              	.LVL65:
 498:./Src/application.c **** 
 499:./Src/application.c ****   return tval;
 500:./Src/application.c **** }
 605              		.loc 1 500 0
 606 0068 70BD     		pop	{r4, r5, r6, pc}
 607              	.LVL66:
 608              	.L71:
 609 006a 00BFAFF3 		.align	3
 609      0080
 610              	.L70:
 611 0070 33333333 		.word	858993459
 612 0074 3333E33F 		.word	1071854387
 613 0078 00000000 		.word	app
 614              		.cfi_endproc
 615              	.LFE77:
 617              		.section	.text.accellerationX,"ax",%progbits
 618              		.align	1
 619              		.global	accellerationX
 620              		.syntax unified
 621              		.thumb
 622              		.thumb_func
 623              		.fpu softvfp
 625              	accellerationX:
 626              	.LFB78:
 501:./Src/application.c **** 
 502:./Src/application.c **** float accellerationX(float value){
 627              		.loc 1 502 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 0, uses_anonymous_args = 0
 631              	.LVL67:
 632 0000 70B5     		push	{r4, r5, r6, lr}
 633              	.LCFI8:
 634              		.cfi_def_cfa_offset 16
 635              		.cfi_offset 4, -16
 636              		.cfi_offset 5, -12
ARM GAS  /tmp/cc6kLxup.s 			page 21


 637              		.cfi_offset 6, -8
 638              		.cfi_offset 14, -4
 639 0002 0446     		mov	r4, r0
 503:./Src/application.c ****   /* value -> -1000 0 +1000 */
 504:./Src/application.c ****   float tval;
 505:./Src/application.c **** 
 506:./Src/application.c ****   tval = app.faccX;
 640              		.loc 1 506 0
 641 0004 1C4B     		ldr	r3, .L84+8
 642 0006 9D6A     		ldr	r5, [r3, #40]	@ float
 643              	.LVL68:
 507:./Src/application.c **** 
 508:./Src/application.c ****   //EXPERIMENT
 509:./Src/application.c ****   if(value > tval){
 644              		.loc 1 509 0
 645 0008 0146     		mov	r1, r0
 646 000a 2846     		mov	r0, r5
 647              	.LVL69:
 648 000c FFF7FEFF 		bl	__aeabi_fcmplt
 649              	.LVL70:
 650 0010 88B1     		cbz	r0, .L73
 510:./Src/application.c ****     app.faccX = app.faccX + ACCELLERATION_CONSTANT;
 651              		.loc 1 510 0
 652 0012 194E     		ldr	r6, .L84+8
 653 0014 B06A     		ldr	r0, [r6, #40]	@ float
 654 0016 FFF7FEFF 		bl	__aeabi_f2d
 655              	.LVL71:
 656 001a 15A3     		adr	r3, .L84
 657 001c D3E90023 		ldrd	r2, [r3]
 658 0020 FFF7FEFF 		bl	__aeabi_dadd
 659              	.LVL72:
 660 0024 FFF7FEFF 		bl	__aeabi_d2f
 661              	.LVL73:
 662 0028 B062     		str	r0, [r6, #40]	@ float
 511:./Src/application.c ****     //limit
 512:./Src/application.c ****     if(app.faccX > value){
 663              		.loc 1 512 0
 664 002a B06A     		ldr	r0, [r6, #40]	@ float
 665 002c 2146     		mov	r1, r4
 666 002e FFF7FEFF 		bl	__aeabi_fcmpgt
 667              	.LVL74:
 668 0032 00B1     		cbz	r0, .L73
 513:./Src/application.c ****       app.faccX = (float)value;
 669              		.loc 1 513 0
 670 0034 B462     		str	r4, [r6, #40]	@ float
 671              	.L73:
 514:./Src/application.c ****     }
 515:./Src/application.c ****   }
 516:./Src/application.c ****   if(value < tval){
 672              		.loc 1 516 0
 673 0036 2146     		mov	r1, r4
 674 0038 2846     		mov	r0, r5
 675 003a FFF7FEFF 		bl	__aeabi_fcmpgt
 676              	.LVL75:
 677 003e 88B1     		cbz	r0, .L76
 517:./Src/application.c ****     app.faccX = app.faccX - ACCELLERATION_CONSTANT;
 678              		.loc 1 517 0
ARM GAS  /tmp/cc6kLxup.s 			page 22


 679 0040 0D4D     		ldr	r5, .L84+8
 680              	.LVL76:
 681 0042 A86A     		ldr	r0, [r5, #40]	@ float
 682 0044 FFF7FEFF 		bl	__aeabi_f2d
 683              	.LVL77:
 684 0048 09A3     		adr	r3, .L84
 685 004a D3E90023 		ldrd	r2, [r3]
 686 004e FFF7FEFF 		bl	__aeabi_dsub
 687              	.LVL78:
 688 0052 FFF7FEFF 		bl	__aeabi_d2f
 689              	.LVL79:
 690 0056 A862     		str	r0, [r5, #40]	@ float
 518:./Src/application.c ****     //limit
 519:./Src/application.c ****     if(app.faccX < value){
 691              		.loc 1 519 0
 692 0058 A86A     		ldr	r0, [r5, #40]	@ float
 693 005a 2146     		mov	r1, r4
 694 005c FFF7FEFF 		bl	__aeabi_fcmplt
 695              	.LVL80:
 696 0060 00B1     		cbz	r0, .L76
 520:./Src/application.c ****       app.faccX = (float)value;
 697              		.loc 1 520 0
 698 0062 AC62     		str	r4, [r5, #40]	@ float
 699              	.L76:
 521:./Src/application.c ****     }
 522:./Src/application.c ****   }
 523:./Src/application.c ****   /* ORIGINAL
 524:./Src/application.c ****   if(value > 0){
 525:./Src/application.c ****     if(value > tval){
 526:./Src/application.c ****       //Accelleration
 527:./Src/application.c ****       if(tval < 0.0){
 528:./Src/application.c ****         app.faccX = 0.0;
 529:./Src/application.c ****       }else{
 530:./Src/application.c ****         app.faccX = app.faccX + ACCELLERATION_CONSTANT;
 531:./Src/application.c ****         //limit
 532:./Src/application.c ****         if(app.faccX > value){
 533:./Src/application.c ****           app.faccX = (float)value;
 534:./Src/application.c ****         }
 535:./Src/application.c ****       }
 536:./Src/application.c ****     }else if(value < tval){
 537:./Src/application.c ****         app.faccX = (float)value;
 538:./Src/application.c ****     }else{
 539:./Src/application.c ****         app.faccX = (float)value;
 540:./Src/application.c ****     }
 541:./Src/application.c ****   }else if(value < 0){
 542:./Src/application.c ****     if(value < tval){
 543:./Src/application.c ****       //Accelleration
 544:./Src/application.c ****       if(tval > 0.0){
 545:./Src/application.c ****         app.faccX = 0.0;
 546:./Src/application.c ****       }else{
 547:./Src/application.c ****         app.faccX = app.faccX - ACCELLERATION_CONSTANT;
 548:./Src/application.c ****         //limit
 549:./Src/application.c ****         if(app.faccX < value){
 550:./Src/application.c ****           app.faccX = (float)value;
 551:./Src/application.c ****         }
 552:./Src/application.c ****       }
 553:./Src/application.c ****     }else if(value > tval){
ARM GAS  /tmp/cc6kLxup.s 			page 23


 554:./Src/application.c ****         app.faccX = (float)value;
 555:./Src/application.c ****     }else{
 556:./Src/application.c ****         app.faccX = (float)value;
 557:./Src/application.c ****     }
 558:./Src/application.c ****   }else{
 559:./Src/application.c ****     app.faccX = (float)value;
 560:./Src/application.c ****   }
 561:./Src/application.c **** */
 562:./Src/application.c ****   tval = app.faccX;
 700              		.loc 1 562 0
 701 0064 044B     		ldr	r3, .L84+8
 702 0066 986A     		ldr	r0, [r3, #40]	@ float
 703              	.LVL81:
 563:./Src/application.c **** 
 564:./Src/application.c ****   return tval;
 565:./Src/application.c **** }
 704              		.loc 1 565 0
 705 0068 70BD     		pop	{r4, r5, r6, pc}
 706              	.LVL82:
 707              	.L85:
 708 006a 00BFAFF3 		.align	3
 708      0080
 709              	.L84:
 710 0070 33333333 		.word	858993459
 711 0074 3333E33F 		.word	1071854387
 712 0078 00000000 		.word	app
 713              		.cfi_endproc
 714              	.LFE78:
 716              		.section	.text.accellerationYHARD,"ax",%progbits
 717              		.align	1
 718              		.global	accellerationYHARD
 719              		.syntax unified
 720              		.thumb
 721              		.thumb_func
 722              		.fpu softvfp
 724              	accellerationYHARD:
 725              	.LFB79:
 566:./Src/application.c **** 
 567:./Src/application.c **** float accellerationYHARD(float value){
 726              		.loc 1 567 0
 727              		.cfi_startproc
 728              		@ args = 0, pretend = 0, frame = 0
 729              		@ frame_needed = 0, uses_anonymous_args = 0
 730              	.LVL83:
 731 0000 70B5     		push	{r4, r5, r6, lr}
 732              	.LCFI9:
 733              		.cfi_def_cfa_offset 16
 734              		.cfi_offset 4, -16
 735              		.cfi_offset 5, -12
 736              		.cfi_offset 6, -8
 737              		.cfi_offset 14, -4
 738 0002 0446     		mov	r4, r0
 568:./Src/application.c ****   /* value -> -1000 0 +1000 */
 569:./Src/application.c ****   float tval;
 570:./Src/application.c **** 
 571:./Src/application.c ****   tval = app.faccY;
 739              		.loc 1 571 0
ARM GAS  /tmp/cc6kLxup.s 			page 24


 740 0004 1C4B     		ldr	r3, .L98+8
 741 0006 5D6A     		ldr	r5, [r3, #36]	@ float
 742              	.LVL84:
 572:./Src/application.c **** 
 573:./Src/application.c ****   //EXPEIMENT
 574:./Src/application.c ****   if(value > tval){
 743              		.loc 1 574 0
 744 0008 0146     		mov	r1, r0
 745 000a 2846     		mov	r0, r5
 746              	.LVL85:
 747 000c FFF7FEFF 		bl	__aeabi_fcmplt
 748              	.LVL86:
 749 0010 88B1     		cbz	r0, .L87
 575:./Src/application.c ****     app.faccY = app.faccY + ACCELLERATION_CONSTANT_HARD;
 750              		.loc 1 575 0
 751 0012 194E     		ldr	r6, .L98+8
 752 0014 706A     		ldr	r0, [r6, #36]	@ float
 753 0016 FFF7FEFF 		bl	__aeabi_f2d
 754              	.LVL87:
 755 001a 15A3     		adr	r3, .L98
 756 001c D3E90023 		ldrd	r2, [r3]
 757 0020 FFF7FEFF 		bl	__aeabi_dadd
 758              	.LVL88:
 759 0024 FFF7FEFF 		bl	__aeabi_d2f
 760              	.LVL89:
 761 0028 7062     		str	r0, [r6, #36]	@ float
 576:./Src/application.c ****     //limit
 577:./Src/application.c ****     if(app.faccY > value){
 762              		.loc 1 577 0
 763 002a 706A     		ldr	r0, [r6, #36]	@ float
 764 002c 2146     		mov	r1, r4
 765 002e FFF7FEFF 		bl	__aeabi_fcmpgt
 766              	.LVL90:
 767 0032 00B1     		cbz	r0, .L87
 578:./Src/application.c ****       app.faccY = (float)value;
 768              		.loc 1 578 0
 769 0034 7462     		str	r4, [r6, #36]	@ float
 770              	.L87:
 579:./Src/application.c ****     }
 580:./Src/application.c ****   }
 581:./Src/application.c ****   if(value < tval){
 771              		.loc 1 581 0
 772 0036 2146     		mov	r1, r4
 773 0038 2846     		mov	r0, r5
 774 003a FFF7FEFF 		bl	__aeabi_fcmpgt
 775              	.LVL91:
 776 003e 88B1     		cbz	r0, .L90
 582:./Src/application.c ****     app.faccY = app.faccY - ACCELLERATION_CONSTANT_HARD;
 777              		.loc 1 582 0
 778 0040 0D4D     		ldr	r5, .L98+8
 779              	.LVL92:
 780 0042 686A     		ldr	r0, [r5, #36]	@ float
 781 0044 FFF7FEFF 		bl	__aeabi_f2d
 782              	.LVL93:
 783 0048 09A3     		adr	r3, .L98
 784 004a D3E90023 		ldrd	r2, [r3]
 785 004e FFF7FEFF 		bl	__aeabi_dsub
ARM GAS  /tmp/cc6kLxup.s 			page 25


 786              	.LVL94:
 787 0052 FFF7FEFF 		bl	__aeabi_d2f
 788              	.LVL95:
 789 0056 6862     		str	r0, [r5, #36]	@ float
 583:./Src/application.c ****     //limit
 584:./Src/application.c ****     if(app.faccY < value){
 790              		.loc 1 584 0
 791 0058 686A     		ldr	r0, [r5, #36]	@ float
 792 005a 2146     		mov	r1, r4
 793 005c FFF7FEFF 		bl	__aeabi_fcmplt
 794              	.LVL96:
 795 0060 00B1     		cbz	r0, .L90
 585:./Src/application.c ****       app.faccY = (float)value;
 796              		.loc 1 585 0
 797 0062 6C62     		str	r4, [r5, #36]	@ float
 798              	.L90:
 586:./Src/application.c ****     }
 587:./Src/application.c ****   }
 588:./Src/application.c ****   tval = app.faccY;
 799              		.loc 1 588 0
 800 0064 044B     		ldr	r3, .L98+8
 801 0066 586A     		ldr	r0, [r3, #36]	@ float
 802              	.LVL97:
 589:./Src/application.c ****   return tval;
 590:./Src/application.c **** }
 803              		.loc 1 590 0
 804 0068 70BD     		pop	{r4, r5, r6, pc}
 805              	.LVL98:
 806              	.L99:
 807 006a 00BFAFF3 		.align	3
 807      0080
 808              	.L98:
 809 0070 B81E85EB 		.word	3951369912
 810 0074 51B89E3F 		.word	1067366481
 811 0078 00000000 		.word	app
 812              		.cfi_endproc
 813              	.LFE79:
 815              		.section	.text.accellerationXHARD,"ax",%progbits
 816              		.align	1
 817              		.global	accellerationXHARD
 818              		.syntax unified
 819              		.thumb
 820              		.thumb_func
 821              		.fpu softvfp
 823              	accellerationXHARD:
 824              	.LFB80:
 591:./Src/application.c **** float accellerationXHARD(float value){
 825              		.loc 1 591 0
 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 0
 828              		@ frame_needed = 0, uses_anonymous_args = 0
 829              	.LVL99:
 830 0000 70B5     		push	{r4, r5, r6, lr}
 831              	.LCFI10:
 832              		.cfi_def_cfa_offset 16
 833              		.cfi_offset 4, -16
 834              		.cfi_offset 5, -12
ARM GAS  /tmp/cc6kLxup.s 			page 26


 835              		.cfi_offset 6, -8
 836              		.cfi_offset 14, -4
 837 0002 0446     		mov	r4, r0
 592:./Src/application.c ****   /* value -> -1000 0 +1000 */
 593:./Src/application.c ****   float tval;
 594:./Src/application.c **** 
 595:./Src/application.c ****   tval = app.faccX;
 838              		.loc 1 595 0
 839 0004 1C4B     		ldr	r3, .L112+8
 840 0006 9D6A     		ldr	r5, [r3, #40]	@ float
 841              	.LVL100:
 596:./Src/application.c **** 
 597:./Src/application.c ****   //EXPERIMENT
 598:./Src/application.c ****   if(value > tval){
 842              		.loc 1 598 0
 843 0008 0146     		mov	r1, r0
 844 000a 2846     		mov	r0, r5
 845              	.LVL101:
 846 000c FFF7FEFF 		bl	__aeabi_fcmplt
 847              	.LVL102:
 848 0010 88B1     		cbz	r0, .L101
 599:./Src/application.c ****     app.faccX = app.faccX + ACCELLERATION_CONSTANT_HARD;
 849              		.loc 1 599 0
 850 0012 194E     		ldr	r6, .L112+8
 851 0014 B06A     		ldr	r0, [r6, #40]	@ float
 852 0016 FFF7FEFF 		bl	__aeabi_f2d
 853              	.LVL103:
 854 001a 15A3     		adr	r3, .L112
 855 001c D3E90023 		ldrd	r2, [r3]
 856 0020 FFF7FEFF 		bl	__aeabi_dadd
 857              	.LVL104:
 858 0024 FFF7FEFF 		bl	__aeabi_d2f
 859              	.LVL105:
 860 0028 B062     		str	r0, [r6, #40]	@ float
 600:./Src/application.c ****     //limit
 601:./Src/application.c ****     if(app.faccX > value){
 861              		.loc 1 601 0
 862 002a B06A     		ldr	r0, [r6, #40]	@ float
 863 002c 2146     		mov	r1, r4
 864 002e FFF7FEFF 		bl	__aeabi_fcmpgt
 865              	.LVL106:
 866 0032 00B1     		cbz	r0, .L101
 602:./Src/application.c ****       app.faccX = (float)value;
 867              		.loc 1 602 0
 868 0034 B462     		str	r4, [r6, #40]	@ float
 869              	.L101:
 603:./Src/application.c ****     }
 604:./Src/application.c ****   }
 605:./Src/application.c ****   if(value < tval){
 870              		.loc 1 605 0
 871 0036 2146     		mov	r1, r4
 872 0038 2846     		mov	r0, r5
 873 003a FFF7FEFF 		bl	__aeabi_fcmpgt
 874              	.LVL107:
 875 003e 88B1     		cbz	r0, .L104
 606:./Src/application.c ****     app.faccX = app.faccX - ACCELLERATION_CONSTANT_HARD;
 876              		.loc 1 606 0
ARM GAS  /tmp/cc6kLxup.s 			page 27


 877 0040 0D4D     		ldr	r5, .L112+8
 878              	.LVL108:
 879 0042 A86A     		ldr	r0, [r5, #40]	@ float
 880 0044 FFF7FEFF 		bl	__aeabi_f2d
 881              	.LVL109:
 882 0048 09A3     		adr	r3, .L112
 883 004a D3E90023 		ldrd	r2, [r3]
 884 004e FFF7FEFF 		bl	__aeabi_dsub
 885              	.LVL110:
 886 0052 FFF7FEFF 		bl	__aeabi_d2f
 887              	.LVL111:
 888 0056 A862     		str	r0, [r5, #40]	@ float
 607:./Src/application.c ****     //limit
 608:./Src/application.c ****     if(app.faccX < value){
 889              		.loc 1 608 0
 890 0058 A86A     		ldr	r0, [r5, #40]	@ float
 891 005a 2146     		mov	r1, r4
 892 005c FFF7FEFF 		bl	__aeabi_fcmplt
 893              	.LVL112:
 894 0060 00B1     		cbz	r0, .L104
 609:./Src/application.c ****       app.faccX = (float)value;
 895              		.loc 1 609 0
 896 0062 AC62     		str	r4, [r5, #40]	@ float
 897              	.L104:
 610:./Src/application.c ****     }
 611:./Src/application.c ****   }
 612:./Src/application.c ****   tval = app.faccX;
 898              		.loc 1 612 0
 899 0064 044B     		ldr	r3, .L112+8
 900 0066 986A     		ldr	r0, [r3, #40]	@ float
 901              	.LVL113:
 613:./Src/application.c **** 
 614:./Src/application.c ****   return tval;
 615:./Src/application.c **** }
 902              		.loc 1 615 0
 903 0068 70BD     		pop	{r4, r5, r6, pc}
 904              	.LVL114:
 905              	.L113:
 906 006a 00BFAFF3 		.align	3
 906      0080
 907              	.L112:
 908 0070 B81E85EB 		.word	3951369912
 909 0074 51B89E3F 		.word	1067366481
 910 0078 00000000 		.word	app
 911              		.cfi_endproc
 912              	.LFE80:
 914              		.global	__aeabi_ui2d
 915              		.global	__aeabi_ddiv
 916              		.global	__aeabi_d2uiz
 917              		.global	__aeabi_i2d
 918              		.global	__aeabi_dmul
 919              		.section	.text.Battery_TASK,"ax",%progbits
 920              		.align	1
 921              		.global	Battery_TASK
 922              		.syntax unified
 923              		.thumb
 924              		.thumb_func
ARM GAS  /tmp/cc6kLxup.s 			page 28


 925              		.fpu softvfp
 927              	Battery_TASK:
 928              	.LFB81:
 616:./Src/application.c **** 
 617:./Src/application.c **** 
 618:./Src/application.c **** 
 619:./Src/application.c **** // BATTERY TASK
 620:./Src/application.c **** /*
 621:./Src/application.c **** void Battery_TASK(void){
 622:./Src/application.c ****   if((HAL_GetTick() - battery_dati.time_batt)>200){
 623:./Src/application.c ****     battery_dati.time_batt = HAL_GetTick();
 624:./Src/application.c **** 
 625:./Src/application.c ****    battery_dati.somma_batt = battery_dati.somma_batt  + ADC_BATTERY();
 626:./Src/application.c ****    battery_dati.counter_media++;
 627:./Src/application.c ****    if(battery_dati.counter_media >= 30){
 628:./Src/application.c ****     battery_dati.counter_media = 0;
 629:./Src/application.c **** 
 630:./Src/application.c ****       //Batteria media valore
 631:./Src/application.c ****       battery_dati.VBatt = (float)battery_dati.somma_batt / 30.0;
 632:./Src/application.c ****       battery_dati.VBatt = battery_dati.VBatt * ADC_BATTERY_VOLT;
 633:./Src/application.c **** 
 634:./Src/application.c ****       battery_dati.somma_batt = 0;
 635:./Src/application.c ****    }
 636:./Src/application.c ****   }
 637:./Src/application.c **** }
 638:./Src/application.c **** */
 639:./Src/application.c **** 
 640:./Src/application.c **** //http://stackoverflow.com/questions/10990618/calculate-rolling-moving-average-in-c/10990656#109906
 641:./Src/application.c **** //ROLLING ACERAGE
 642:./Src/application.c **** void Battery_TASK(void){
 929              		.loc 1 642 0
 930              		.cfi_startproc
 931              		@ args = 0, pretend = 0, frame = 0
 932              		@ frame_needed = 0, uses_anonymous_args = 0
 933 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 934              	.LCFI11:
 935              		.cfi_def_cfa_offset 24
 936              		.cfi_offset 3, -24
 937              		.cfi_offset 4, -20
 938              		.cfi_offset 5, -16
 939              		.cfi_offset 6, -12
 940              		.cfi_offset 7, -8
 941              		.cfi_offset 14, -4
 643:./Src/application.c ****   uint32_t temp32;
 644:./Src/application.c ****   if((HAL_GetTick() - battery_dati.time_batt)>200){
 942              		.loc 1 644 0
 943 0002 FFF7FEFF 		bl	HAL_GetTick
 944              	.LVL115:
 945 0006 224B     		ldr	r3, .L118+8
 946 0008 5B68     		ldr	r3, [r3, #4]
 947 000a C01A     		subs	r0, r0, r3
 948 000c C828     		cmp	r0, #200
 949 000e 00D8     		bhi	.L117
 950              	.L114:
 645:./Src/application.c ****     battery_dati.time_batt = HAL_GetTick();
 646:./Src/application.c **** 
 647:./Src/application.c ****     temp32 = battery_dati.somma_batt;
ARM GAS  /tmp/cc6kLxup.s 			page 29


 648:./Src/application.c ****     battery_dati.somma_batt -=  temp32 / 10.0;
 649:./Src/application.c ****     battery_dati.somma_batt += ADC_BATTERY() / 10.0;
 650:./Src/application.c **** 
 651:./Src/application.c ****       //Batteria media valore
 652:./Src/application.c ****    battery_dati.VBatt = battery_dati.somma_batt * ADC_BATTERY_VOLT;
 653:./Src/application.c **** 
 654:./Src/application.c ****   }
 655:./Src/application.c **** }
 951              		.loc 1 655 0
 952 0010 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 953              	.L117:
 645:./Src/application.c ****     battery_dati.time_batt = HAL_GetTick();
 954              		.loc 1 645 0
 955 0012 FFF7FEFF 		bl	HAL_GetTick
 956              	.LVL116:
 957 0016 1E4C     		ldr	r4, .L118+8
 958 0018 6060     		str	r0, [r4, #4]
 647:./Src/application.c ****     battery_dati.somma_batt -=  temp32 / 10.0;
 959              		.loc 1 647 0
 960 001a A068     		ldr	r0, [r4, #8]
 961              	.LVL117:
 648:./Src/application.c ****     battery_dati.somma_batt += ADC_BATTERY() / 10.0;
 962              		.loc 1 648 0
 963 001c A568     		ldr	r5, [r4, #8]
 964 001e FFF7FEFF 		bl	__aeabi_ui2d
 965              	.LVL118:
 966 0022 0022     		movs	r2, #0
 967 0024 1B4B     		ldr	r3, .L118+12
 968 0026 FFF7FEFF 		bl	__aeabi_ddiv
 969              	.LVL119:
 970 002a 0646     		mov	r6, r0
 971 002c 0F46     		mov	r7, r1
 972 002e 2846     		mov	r0, r5
 973 0030 FFF7FEFF 		bl	__aeabi_ui2d
 974              	.LVL120:
 975 0034 3246     		mov	r2, r6
 976 0036 3B46     		mov	r3, r7
 977 0038 FFF7FEFF 		bl	__aeabi_dsub
 978              	.LVL121:
 979 003c FFF7FEFF 		bl	__aeabi_d2uiz
 980              	.LVL122:
 981 0040 A060     		str	r0, [r4, #8]
 649:./Src/application.c **** 
 982              		.loc 1 649 0
 983 0042 FFF7FEFF 		bl	ADC_BATTERY
 984              	.LVL123:
 985 0046 FFF7FEFF 		bl	__aeabi_i2d
 986              	.LVL124:
 987 004a 0022     		movs	r2, #0
 988 004c 114B     		ldr	r3, .L118+12
 989 004e FFF7FEFF 		bl	__aeabi_ddiv
 990              	.LVL125:
 991 0052 0646     		mov	r6, r0
 992 0054 0F46     		mov	r7, r1
 993 0056 A068     		ldr	r0, [r4, #8]
 994 0058 FFF7FEFF 		bl	__aeabi_ui2d
 995              	.LVL126:
ARM GAS  /tmp/cc6kLxup.s 			page 30


 996 005c 3246     		mov	r2, r6
 997 005e 3B46     		mov	r3, r7
 998 0060 FFF7FEFF 		bl	__aeabi_dadd
 999              	.LVL127:
 1000 0064 FFF7FEFF 		bl	__aeabi_d2uiz
 1001              	.LVL128:
 1002 0068 A060     		str	r0, [r4, #8]
 652:./Src/application.c **** 
 1003              		.loc 1 652 0
 1004 006a A068     		ldr	r0, [r4, #8]
 1005 006c FFF7FEFF 		bl	__aeabi_ui2d
 1006              	.LVL129:
 1007 0070 05A3     		adr	r3, .L118
 1008 0072 D3E90023 		ldrd	r2, [r3]
 1009 0076 FFF7FEFF 		bl	__aeabi_dmul
 1010              	.LVL130:
 1011 007a FFF7FEFF 		bl	__aeabi_d2f
 1012              	.LVL131:
 1013 007e 2060     		str	r0, [r4]	@ float
 1014              		.loc 1 655 0
 1015 0080 C6E7     		b	.L114
 1016              	.L119:
 1017 0082 00BFAFF3 		.align	3
 1017      0080
 1018              	.L118:
 1019 0088 F5E4E827 		.word	669574389
 1020 008c 181C9B3F 		.word	1067129880
 1021 0090 00000000 		.word	battery_dati
 1022 0094 00002440 		.word	1076101120
 1023              		.cfi_endproc
 1024              	.LFE81:
 1026              		.section	.text.WAIT_CHARGE_FINISH,"ax",%progbits
 1027              		.align	1
 1028              		.global	WAIT_CHARGE_FINISH
 1029              		.syntax unified
 1030              		.thumb
 1031              		.thumb_func
 1032              		.fpu softvfp
 1034              	WAIT_CHARGE_FINISH:
 1035              	.LFB68:
  28:./Src/application.c ****   uint32_t timerBatteryC;
 1036              		.loc 1 28 0
 1037              		.cfi_startproc
 1038              		@ args = 0, pretend = 0, frame = 0
 1039              		@ frame_needed = 0, uses_anonymous_args = 0
 1040 0000 10B5     		push	{r4, lr}
 1041              	.LCFI12:
 1042              		.cfi_def_cfa_offset 8
 1043              		.cfi_offset 4, -8
 1044              		.cfi_offset 14, -4
  31:./Src/application.c ****   MotorR_stop();
 1045              		.loc 1 31 0
 1046 0002 0120     		movs	r0, #1
 1047 0004 FFF7FEFF 		bl	Led_Set
 1048              	.LVL132:
  32:./Src/application.c ****   MotorL_stop();
 1049              		.loc 1 32 0
ARM GAS  /tmp/cc6kLxup.s 			page 31


 1050 0008 FFF7FEFF 		bl	MotorR_stop
 1051              	.LVL133:
  33:./Src/application.c ****   HAL_IWDG_Refresh(&hiwdg);   //819mS
 1052              		.loc 1 33 0
 1053 000c FFF7FEFF 		bl	MotorL_stop
 1054              	.LVL134:
  34:./Src/application.c ****   Buzzer_OneLongBeep();
 1055              		.loc 1 34 0
 1056 0010 1A4C     		ldr	r4, .L130
 1057 0012 2046     		mov	r0, r4
 1058 0014 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1059              	.LVL135:
  35:./Src/application.c ****   HAL_IWDG_Refresh(&hiwdg);   //819mS
 1060              		.loc 1 35 0
 1061 0018 FFF7FEFF 		bl	Buzzer_OneLongBeep
 1062              	.LVL136:
  36:./Src/application.c ****   Buzzer_OneLongBeep();
 1063              		.loc 1 36 0
 1064 001c 2046     		mov	r0, r4
 1065 001e FFF7FEFF 		bl	HAL_IWDG_Refresh
 1066              	.LVL137:
  37:./Src/application.c ****   timerBatteryC = HAL_GetTick();
 1067              		.loc 1 37 0
 1068 0022 FFF7FEFF 		bl	Buzzer_OneLongBeep
 1069              	.LVL138:
  38:./Src/application.c **** 
 1070              		.loc 1 38 0
 1071 0026 FFF7FEFF 		bl	HAL_GetTick
 1072              	.LVL139:
 1073 002a 0446     		mov	r4, r0
 1074              	.LVL140:
 1075              	.L121:
  40:./Src/application.c ****     HAL_IWDG_Refresh(&hiwdg);   //819mS
 1076              		.loc 1 40 0
 1077 002c FFF7FEFF 		bl	IS_Charge
 1078              	.LVL141:
 1079 0030 F0B9     		cbnz	r0, .L128
  41:./Src/application.c ****     HAL_Delay(250);
 1080              		.loc 1 41 0
 1081 0032 1248     		ldr	r0, .L130
 1082 0034 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1083              	.LVL142:
  42:./Src/application.c ****     Battery_TASK();
 1084              		.loc 1 42 0
 1085 0038 FA20     		movs	r0, #250
 1086 003a FFF7FEFF 		bl	HAL_Delay
 1087              	.LVL143:
  43:./Src/application.c ****     if(GET_BatteryAverage() < 41.250){
 1088              		.loc 1 43 0
 1089 003e FFF7FEFF 		bl	Battery_TASK
 1090              	.LVL144:
  44:./Src/application.c ****       timerBatteryC = HAL_GetTick();
 1091              		.loc 1 44 0
 1092 0042 FFF7FEFF 		bl	GET_BatteryAverage
 1093              	.LVL145:
 1094 0046 0E49     		ldr	r1, .L130+4
 1095 0048 FFF7FEFF 		bl	__aeabi_fcmplt
ARM GAS  /tmp/cc6kLxup.s 			page 32


 1096              	.LVL146:
 1097 004c 60B9     		cbnz	r0, .L129
 1098              	.L122:
  47:./Src/application.c ****       Buzzer_OneLongBeep();
 1099              		.loc 1 47 0
 1100 004e FFF7FEFF 		bl	HAL_GetTick
 1101              	.LVL147:
 1102 0052 001B     		subs	r0, r0, r4
 1103 0054 44F62063 		movw	r3, #20000
 1104 0058 9842     		cmp	r0, r3
 1105 005a E7D9     		bls	.L121
  48:./Src/application.c ****       HAL_IWDG_Refresh(&hiwdg);   //819mS
 1106              		.loc 1 48 0
 1107 005c FFF7FEFF 		bl	Buzzer_OneLongBeep
 1108              	.LVL148:
  49:./Src/application.c ****     }
 1109              		.loc 1 49 0
 1110 0060 0648     		ldr	r0, .L130
 1111 0062 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1112              	.LVL149:
 1113 0066 E1E7     		b	.L121
 1114              	.L129:
  45:./Src/application.c ****     }
 1115              		.loc 1 45 0
 1116 0068 FFF7FEFF 		bl	HAL_GetTick
 1117              	.LVL150:
 1118 006c 0446     		mov	r4, r0
 1119              	.LVL151:
 1120 006e EEE7     		b	.L122
 1121              	.LVL152:
 1122              	.L128:
  52:./Src/application.c ****   applcation_init();
 1123              		.loc 1 52 0
 1124 0070 0020     		movs	r0, #0
 1125 0072 FFF7FEFF 		bl	Led_Set
 1126              	.LVL153:
  53:./Src/application.c **** }
 1127              		.loc 1 53 0
 1128 0076 FFF7FEFF 		bl	applcation_init
 1129              	.LVL154:
  54:./Src/application.c **** 
 1130              		.loc 1 54 0
 1131 007a 10BD     		pop	{r4, pc}
 1132              	.LVL155:
 1133              	.L131:
 1134              		.align	2
 1135              	.L130:
 1136 007c 00000000 		.word	hiwdg
 1137 0080 00002542 		.word	1109721088
 1138              		.cfi_endproc
 1139              	.LFE68:
 1141              		.section	.text.Current_Motor_TASK,"ax",%progbits
 1142              		.align	1
 1143              		.global	Current_Motor_TASK
 1144              		.syntax unified
 1145              		.thumb
 1146              		.thumb_func
ARM GAS  /tmp/cc6kLxup.s 			page 33


 1147              		.fpu softvfp
 1149              	Current_Motor_TASK:
 1150              	.LFB82:
 656:./Src/application.c **** 
 657:./Src/application.c **** 
 658:./Src/application.c **** 
 659:./Src/application.c **** 
 660:./Src/application.c **** // CURRENT MOTOR TASK
 661:./Src/application.c **** /*
 662:./Src/application.c **** void Current_Motor_TASK(void){
 663:./Src/application.c ****   if((HAL_GetTick() - app.Current_time_measure)>100){
 664:./Src/application.c ****     app.Current_time_measure = HAL_GetTick();
 665:./Src/application.c **** 
 666:./Src/application.c ****    app.somma_current_m_L = app.somma_current_m_L  + ADC_MOTOR_LEFT();
 667:./Src/application.c ****    app.somma_current_m_R = app.somma_current_m_R  + ADC_MOTOR_RIGHT();
 668:./Src/application.c **** 
 669:./Src/application.c ****    app.current_counter_media++;
 670:./Src/application.c ****    if(app.current_counter_media >= 10){
 671:./Src/application.c ****     app.current_counter_media = 0;
 672:./Src/application.c **** 
 673:./Src/application.c ****       //Current media valore
 674:./Src/application.c ****       app.Current_M_LEFT = (float)app.somma_current_m_L / 10.0;
 675:./Src/application.c ****       app.Current_M_RIGHT = (float)app.somma_current_m_R / 10.0;
 676:./Src/application.c **** 
 677:./Src/application.c ****       if(app.Current_M_RIGHT < ADC_MOTOR_R_CENTER){
 678:./Src/application.c ****         app.Current_M_RIGHT = 0.0;
 679:./Src/application.c ****       }else{
 680:./Src/application.c ****         app.Current_M_RIGHT = ((app.Current_M_RIGHT  - ADC_MOTOR_R_CENTER) * MOTOR_R_AMP_CONV_AMP);
 681:./Src/application.c ****       }
 682:./Src/application.c ****       if(app.Current_M_LEFT < ADC_MOTOR_L_CENTER){
 683:./Src/application.c ****         app.Current_M_LEFT = 0.0;
 684:./Src/application.c ****       }else{
 685:./Src/application.c ****         app.Current_M_LEFT = ((app.Current_M_LEFT  - ADC_MOTOR_L_CENTER) * MOTOR_L_AMP_CONV_AMP);
 686:./Src/application.c ****       }
 687:./Src/application.c **** 
 688:./Src/application.c ****       app.somma_current_m_L = 0;
 689:./Src/application.c ****       app.somma_current_m_R = 0;
 690:./Src/application.c ****    }
 691:./Src/application.c ****   }
 692:./Src/application.c **** }
 693:./Src/application.c **** */
 694:./Src/application.c **** //ROLLING ACERAGE
 695:./Src/application.c **** void Current_Motor_TASK(void){
 1151              		.loc 1 695 0
 1152              		.cfi_startproc
 1153              		@ args = 0, pretend = 0, frame = 0
 1154              		@ frame_needed = 0, uses_anonymous_args = 0
 1155 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1156              	.LCFI13:
 1157              		.cfi_def_cfa_offset 24
 1158              		.cfi_offset 3, -24
 1159              		.cfi_offset 4, -20
 1160              		.cfi_offset 5, -16
 1161              		.cfi_offset 6, -12
 1162              		.cfi_offset 7, -8
 1163              		.cfi_offset 14, -4
 696:./Src/application.c ****   uint32_t temp32;
ARM GAS  /tmp/cc6kLxup.s 			page 34


 697:./Src/application.c ****   app.somma_current_m_L = 5;
 1164              		.loc 1 697 0
 1165 0002 4F4C     		ldr	r4, .L146+16
 1166 0004 0523     		movs	r3, #5
 1167 0006 6363     		str	r3, [r4, #52]
 698:./Src/application.c ****   app.somma_current_m_R = 5;
 1168              		.loc 1 698 0
 1169 0008 A363     		str	r3, [r4, #56]
 699:./Src/application.c ****   if((HAL_GetTick() - app.Current_time_measure)>100){
 1170              		.loc 1 699 0
 1171 000a FFF7FEFF 		bl	HAL_GetTick
 1172              	.LVL156:
 1173 000e 236B     		ldr	r3, [r4, #48]
 1174 0010 C01A     		subs	r0, r0, r3
 1175 0012 6428     		cmp	r0, #100
 1176 0014 00D8     		bhi	.L144
 1177              	.L132:
 700:./Src/application.c ****     app.Current_time_measure = HAL_GetTick();
 701:./Src/application.c **** 
 702:./Src/application.c ****     temp32 = app.somma_current_m_L;
 703:./Src/application.c ****     app.somma_current_m_L -=  temp32 / 5.0;
 704:./Src/application.c ****     app.somma_current_m_L += ADC_MOTOR_LEFT() / 5.0;
 705:./Src/application.c **** 
 706:./Src/application.c ****     temp32 = app.somma_current_m_R;
 707:./Src/application.c ****     app.somma_current_m_R -=  temp32 / 5.0;
 708:./Src/application.c ****     app.somma_current_m_R += ADC_MOTOR_RIGHT() / 5.0;
 709:./Src/application.c **** 
 710:./Src/application.c **** 
 711:./Src/application.c **** 
 712:./Src/application.c ****    //Current media valore
 713:./Src/application.c ****     app.Current_M_LEFT = (float)app.somma_current_m_L;
 714:./Src/application.c ****     app.Current_M_RIGHT = (float)app.somma_current_m_R;
 715:./Src/application.c **** 
 716:./Src/application.c ****     if(app.Current_M_RIGHT < ADC_MOTOR_R_CENTER){
 717:./Src/application.c ****       app.Current_M_RIGHT = 0.0;
 718:./Src/application.c ****     }else{
 719:./Src/application.c ****       app.Current_M_RIGHT = ((app.Current_M_RIGHT  - ADC_MOTOR_R_CENTER) * MOTOR_R_AMP_CONV_AMP);
 720:./Src/application.c ****     }
 721:./Src/application.c ****     if(app.Current_M_LEFT < ADC_MOTOR_L_CENTER){
 722:./Src/application.c ****       app.Current_M_LEFT = 0.0;
 723:./Src/application.c ****     }else{
 724:./Src/application.c ****       app.Current_M_LEFT = ((app.Current_M_LEFT  - ADC_MOTOR_L_CENTER) * MOTOR_L_AMP_CONV_AMP);
 725:./Src/application.c ****     }
 726:./Src/application.c **** 
 727:./Src/application.c **** 
 728:./Src/application.c ****   }
 729:./Src/application.c **** }
 1178              		.loc 1 729 0
 1179 0016 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1180              	.L144:
 700:./Src/application.c ****     app.Current_time_measure = HAL_GetTick();
 1181              		.loc 1 700 0
 1182 0018 FFF7FEFF 		bl	HAL_GetTick
 1183              	.LVL157:
 1184 001c 2063     		str	r0, [r4, #48]
 702:./Src/application.c ****     app.somma_current_m_L -=  temp32 / 5.0;
 1185              		.loc 1 702 0
ARM GAS  /tmp/cc6kLxup.s 			page 35


 1186 001e 606B     		ldr	r0, [r4, #52]
 1187              	.LVL158:
 703:./Src/application.c ****     app.somma_current_m_L += ADC_MOTOR_LEFT() / 5.0;
 1188              		.loc 1 703 0
 1189 0020 656B     		ldr	r5, [r4, #52]
 1190 0022 FFF7FEFF 		bl	__aeabi_ui2d
 1191              	.LVL159:
 1192 0026 0022     		movs	r2, #0
 1193 0028 464B     		ldr	r3, .L146+20
 1194 002a FFF7FEFF 		bl	__aeabi_ddiv
 1195              	.LVL160:
 1196 002e 0646     		mov	r6, r0
 1197 0030 0F46     		mov	r7, r1
 1198 0032 2846     		mov	r0, r5
 1199 0034 FFF7FEFF 		bl	__aeabi_ui2d
 1200              	.LVL161:
 1201 0038 3246     		mov	r2, r6
 1202 003a 3B46     		mov	r3, r7
 1203 003c FFF7FEFF 		bl	__aeabi_dsub
 1204              	.LVL162:
 1205 0040 FFF7FEFF 		bl	__aeabi_d2uiz
 1206              	.LVL163:
 1207 0044 6063     		str	r0, [r4, #52]
 704:./Src/application.c **** 
 1208              		.loc 1 704 0
 1209 0046 FFF7FEFF 		bl	ADC_MOTOR_LEFT
 1210              	.LVL164:
 1211 004a FFF7FEFF 		bl	__aeabi_i2d
 1212              	.LVL165:
 1213 004e 0022     		movs	r2, #0
 1214 0050 3C4B     		ldr	r3, .L146+20
 1215 0052 FFF7FEFF 		bl	__aeabi_ddiv
 1216              	.LVL166:
 1217 0056 0646     		mov	r6, r0
 1218 0058 0F46     		mov	r7, r1
 1219 005a 606B     		ldr	r0, [r4, #52]
 1220 005c FFF7FEFF 		bl	__aeabi_ui2d
 1221              	.LVL167:
 1222 0060 3246     		mov	r2, r6
 1223 0062 3B46     		mov	r3, r7
 1224 0064 FFF7FEFF 		bl	__aeabi_dadd
 1225              	.LVL168:
 1226 0068 FFF7FEFF 		bl	__aeabi_d2uiz
 1227              	.LVL169:
 1228 006c 6063     		str	r0, [r4, #52]
 706:./Src/application.c ****     app.somma_current_m_R -=  temp32 / 5.0;
 1229              		.loc 1 706 0
 1230 006e A06B     		ldr	r0, [r4, #56]
 1231              	.LVL170:
 707:./Src/application.c ****     app.somma_current_m_R += ADC_MOTOR_RIGHT() / 5.0;
 1232              		.loc 1 707 0
 1233 0070 A56B     		ldr	r5, [r4, #56]
 1234 0072 FFF7FEFF 		bl	__aeabi_ui2d
 1235              	.LVL171:
 1236 0076 0022     		movs	r2, #0
 1237 0078 324B     		ldr	r3, .L146+20
 1238 007a FFF7FEFF 		bl	__aeabi_ddiv
ARM GAS  /tmp/cc6kLxup.s 			page 36


 1239              	.LVL172:
 1240 007e 0646     		mov	r6, r0
 1241 0080 0F46     		mov	r7, r1
 1242 0082 2846     		mov	r0, r5
 1243 0084 FFF7FEFF 		bl	__aeabi_ui2d
 1244              	.LVL173:
 1245 0088 3246     		mov	r2, r6
 1246 008a 3B46     		mov	r3, r7
 1247 008c FFF7FEFF 		bl	__aeabi_dsub
 1248              	.LVL174:
 1249 0090 FFF7FEFF 		bl	__aeabi_d2uiz
 1250              	.LVL175:
 1251 0094 A063     		str	r0, [r4, #56]
 708:./Src/application.c **** 
 1252              		.loc 1 708 0
 1253 0096 FFF7FEFF 		bl	ADC_MOTOR_RIGHT
 1254              	.LVL176:
 1255 009a FFF7FEFF 		bl	__aeabi_i2d
 1256              	.LVL177:
 1257 009e 0022     		movs	r2, #0
 1258 00a0 284B     		ldr	r3, .L146+20
 1259 00a2 FFF7FEFF 		bl	__aeabi_ddiv
 1260              	.LVL178:
 1261 00a6 0646     		mov	r6, r0
 1262 00a8 0F46     		mov	r7, r1
 1263 00aa A06B     		ldr	r0, [r4, #56]
 1264 00ac FFF7FEFF 		bl	__aeabi_ui2d
 1265              	.LVL179:
 1266 00b0 3246     		mov	r2, r6
 1267 00b2 3B46     		mov	r3, r7
 1268 00b4 FFF7FEFF 		bl	__aeabi_dadd
 1269              	.LVL180:
 1270 00b8 FFF7FEFF 		bl	__aeabi_d2uiz
 1271              	.LVL181:
 1272 00bc A063     		str	r0, [r4, #56]
 713:./Src/application.c ****     app.Current_M_RIGHT = (float)app.somma_current_m_R;
 1273              		.loc 1 713 0
 1274 00be 606B     		ldr	r0, [r4, #52]
 1275 00c0 FFF7FEFF 		bl	__aeabi_ui2f
 1276              	.LVL182:
 1277 00c4 2064     		str	r0, [r4, #64]	@ float
 714:./Src/application.c **** 
 1278              		.loc 1 714 0
 1279 00c6 A06B     		ldr	r0, [r4, #56]
 1280 00c8 FFF7FEFF 		bl	__aeabi_ui2f
 1281              	.LVL183:
 1282 00cc 6064     		str	r0, [r4, #68]	@ float
 716:./Src/application.c ****       app.Current_M_RIGHT = 0.0;
 1283              		.loc 1 716 0
 1284 00ce 606C     		ldr	r0, [r4, #68]	@ float
 1285 00d0 1D49     		ldr	r1, .L146+24
 1286 00d2 FFF7FEFF 		bl	__aeabi_fcmplt
 1287              	.LVL184:
 1288 00d6 B8B1     		cbz	r0, .L141
 717:./Src/application.c ****     }else{
 1289              		.loc 1 717 0
 1290 00d8 0022     		movs	r2, #0
ARM GAS  /tmp/cc6kLxup.s 			page 37


 1291 00da 6264     		str	r2, [r4, #68]	@ float
 1292              	.L136:
 721:./Src/application.c ****       app.Current_M_LEFT = 0.0;
 1293              		.loc 1 721 0
 1294 00dc 184B     		ldr	r3, .L146+16
 1295 00de 186C     		ldr	r0, [r3, #64]	@ float
 1296 00e0 1949     		ldr	r1, .L146+24
 1297 00e2 FFF7FEFF 		bl	__aeabi_fcmplt
 1298              	.LVL185:
 1299 00e6 F8B9     		cbnz	r0, .L145
 724:./Src/application.c ****     }
 1300              		.loc 1 724 0
 1301 00e8 154C     		ldr	r4, .L146+16
 1302 00ea 206C     		ldr	r0, [r4, #64]	@ float
 1303 00ec 1649     		ldr	r1, .L146+24
 1304 00ee FFF7FEFF 		bl	__aeabi_fsub
 1305              	.LVL186:
 1306 00f2 FFF7FEFF 		bl	__aeabi_f2d
 1307              	.LVL187:
 1308 00f6 0EA3     		adr	r3, .L146
 1309 00f8 D3E90023 		ldrd	r2, [r3]
 1310 00fc FFF7FEFF 		bl	__aeabi_dmul
 1311              	.LVL188:
 1312 0100 FFF7FEFF 		bl	__aeabi_d2f
 1313              	.LVL189:
 1314 0104 2064     		str	r0, [r4, #64]	@ float
 1315              		.loc 1 729 0
 1316 0106 86E7     		b	.L132
 1317              	.L141:
 719:./Src/application.c ****     }
 1318              		.loc 1 719 0
 1319 0108 0D4C     		ldr	r4, .L146+16
 1320 010a 606C     		ldr	r0, [r4, #68]	@ float
 1321 010c 0E49     		ldr	r1, .L146+24
 1322 010e FFF7FEFF 		bl	__aeabi_fsub
 1323              	.LVL190:
 1324 0112 FFF7FEFF 		bl	__aeabi_f2d
 1325              	.LVL191:
 1326 0116 08A3     		adr	r3, .L146+8
 1327 0118 D3E90023 		ldrd	r2, [r3]
 1328 011c FFF7FEFF 		bl	__aeabi_dmul
 1329              	.LVL192:
 1330 0120 FFF7FEFF 		bl	__aeabi_d2f
 1331              	.LVL193:
 1332 0124 6064     		str	r0, [r4, #68]	@ float
 1333 0126 D9E7     		b	.L136
 1334              	.L145:
 722:./Src/application.c ****     }else{
 1335              		.loc 1 722 0
 1336 0128 054B     		ldr	r3, .L146+16
 1337 012a 0022     		movs	r2, #0
 1338 012c 1A64     		str	r2, [r3, #64]	@ float
 1339 012e 72E7     		b	.L132
 1340              	.L147:
 1341              		.align	3
 1342              	.L146:
 1343 0130 B4FA5241 		.word	1095957172
ARM GAS  /tmp/cc6kLxup.s 			page 38


 1344 0134 AB2F953F 		.word	1066741675
 1345 0138 D2131C3D 		.word	1025250258
 1346 013c C1D1933F 		.word	1066652097
 1347 0140 00000000 		.word	app
 1348 0144 00001440 		.word	1075052544
 1349 0148 0080ED44 		.word	1156415488
 1350              		.cfi_endproc
 1351              	.LFE82:
 1353              		.section	.text.getMotorCurrentR,"ax",%progbits
 1354              		.align	1
 1355              		.global	getMotorCurrentR
 1356              		.syntax unified
 1357              		.thumb
 1358              		.thumb_func
 1359              		.fpu softvfp
 1361              	getMotorCurrentR:
 1362              	.LFB83:
 730:./Src/application.c **** 
 731:./Src/application.c **** int16_t getMotorCurrentR(){
 1363              		.loc 1 731 0
 1364              		.cfi_startproc
 1365              		@ args = 0, pretend = 0, frame = 0
 1366              		@ frame_needed = 0, uses_anonymous_args = 0
 1367 0000 08B5     		push	{r3, lr}
 1368              	.LCFI14:
 1369              		.cfi_def_cfa_offset 8
 1370              		.cfi_offset 3, -8
 1371              		.cfi_offset 14, -4
 732:./Src/application.c ****   return (ADC_MOTOR_RIGHT()  - ADC_MOTOR_R_CENTER);
 1372              		.loc 1 732 0
 1373 0002 FFF7FEFF 		bl	ADC_MOTOR_RIGHT
 1374              	.LVL194:
 1375 0006 A0F26C70 		subw	r0, r0, #1900
 733:./Src/application.c **** }
 1376              		.loc 1 733 0
 1377 000a 00B2     		sxth	r0, r0
 1378 000c 08BD     		pop	{r3, pc}
 1379              		.cfi_endproc
 1380              	.LFE83:
 1382              		.section	.text.getMotorCurrentL,"ax",%progbits
 1383              		.align	1
 1384              		.global	getMotorCurrentL
 1385              		.syntax unified
 1386              		.thumb
 1387              		.thumb_func
 1388              		.fpu softvfp
 1390              	getMotorCurrentL:
 1391              	.LFB84:
 734:./Src/application.c **** int16_t getMotorCurrentL(){
 1392              		.loc 1 734 0
 1393              		.cfi_startproc
 1394              		@ args = 0, pretend = 0, frame = 0
 1395              		@ frame_needed = 0, uses_anonymous_args = 0
 1396 0000 08B5     		push	{r3, lr}
 1397              	.LCFI15:
 1398              		.cfi_def_cfa_offset 8
 1399              		.cfi_offset 3, -8
ARM GAS  /tmp/cc6kLxup.s 			page 39


 1400              		.cfi_offset 14, -4
 735:./Src/application.c ****   return (ADC_MOTOR_LEFT()  - ADC_MOTOR_L_CENTER);
 1401              		.loc 1 735 0
 1402 0002 FFF7FEFF 		bl	ADC_MOTOR_LEFT
 1403              	.LVL195:
 1404 0006 A0F26C70 		subw	r0, r0, #1900
 736:./Src/application.c **** }
 1405              		.loc 1 736 0
 1406 000a 00B2     		sxth	r0, r0
 1407 000c 08BD     		pop	{r3, pc}
 1408              		.cfi_endproc
 1409              	.LFE84:
 1411              		.global	__aeabi_f2iz
 1412              		.global	__aeabi_i2f
 1413              		.global	__aeabi_fadd
 1414              		.global	__aeabi_fdiv
 1415              		.global	__aeabi_d2iz
 1416              		.section	.text.go_motor,"ax",%progbits
 1417              		.align	1
 1418              		.global	go_motor
 1419              		.syntax unified
 1420              		.thumb
 1421              		.thumb_func
 1422              		.fpu softvfp
 1424              	go_motor:
 1425              	.LFB85:
 737:./Src/application.c **** 
 738:./Src/application.c **** 
 739:./Src/application.c **** //  MOTOR
 740:./Src/application.c **** 
 741:./Src/application.c **** /*
 742:./Src/application.c **** void go_motor(float throttle, float steering, float Vbatt){
 743:./Src/application.c ****   float limitSup, limitInf ;
 744:./Src/application.c **** 
 745:./Src/application.c ****   limitSup = 1000.0 * get_powerMax(Vbatt);
 746:./Src/application.c ****   limitInf = limitSup * -1;
 747:./Src/application.c **** 
 748:./Src/application.c ****       if(throttle>0.0){
 749:./Src/application.c ****         if(throttle > 20){
 750:./Src/application.c ****           app.motATS=(int8_t)(throttle+(steering * 0.333));
 751:./Src/application.c ****           app.motBTS=(int8_t)(throttle-(steering * 0.333));
 752:./Src/application.c ****         }else if((throttle > 15)){
 753:./Src/application.c ****           app.motATS=(int8_t)(throttle+(steering * 0.5));
 754:./Src/application.c ****           app.motBTS=(int8_t)(throttle-(steering * 0.5));
 755:./Src/application.c ****         }else{
 756:./Src/application.c ****           app.motATS=(int8_t)(throttle+(steering));
 757:./Src/application.c ****           app.motBTS=(int8_t)(throttle-(steering));
 758:./Src/application.c ****         }
 759:./Src/application.c ****       }else if(throttle<0.0){
 760:./Src/application.c ****           app.motATS=(int8_t)(throttle+(steering));
 761:./Src/application.c ****           app.motBTS=(int8_t)(throttle-(steering));
 762:./Src/application.c ****       }else{
 763:./Src/application.c ****           app.motATS=(int8_t)steering;
 764:./Src/application.c ****           app.motBTS=(int8_t)((steering)*-1);
 765:./Src/application.c ****       }
 766:./Src/application.c **** 
 767:./Src/application.c ****     //printf("%d ; %d\r\n",motATS,motBTS);
ARM GAS  /tmp/cc6kLxup.s 			page 40


 768:./Src/application.c **** 
 769:./Src/application.c ****       if(app.motATS >= 0){
 770:./Src/application.c ****         //0 ~ 100
 771:./Src/application.c ****         if(app.motATS > limitSup){
 772:./Src/application.c ****           app.motATS = (int16_t)limitSup;
 773:./Src/application.c ****         }
 774:./Src/application.c ****         MotorR_pwm(app.motATS);
 775:./Src/application.c ****       }else{
 776:./Src/application.c ****         //0 ~ -100
 777:./Src/application.c ****         if(app.motATS < limitInf){
 778:./Src/application.c ****           app.motATS = (int16_t)limitInf;
 779:./Src/application.c ****         }
 780:./Src/application.c ****         //app.motATS = app.motATS * -1;
 781:./Src/application.c ****         MotorR_pwm(app.motATS);
 782:./Src/application.c ****       }
 783:./Src/application.c **** 
 784:./Src/application.c ****       if(app.motBTS >= 0){
 785:./Src/application.c ****         //0 ~ 100
 786:./Src/application.c ****         if(app.motBTS > limitSup){
 787:./Src/application.c ****           app.motBTS = (int16_t)limitSup;
 788:./Src/application.c ****         }
 789:./Src/application.c ****         MotorL_pwm(app.motBTS );
 790:./Src/application.c ****       }else{
 791:./Src/application.c ****         //0 ~ -100
 792:./Src/application.c ****         if(app.motBTS < limitInf){
 793:./Src/application.c ****           app.motBTS = (int16_t)limitInf;
 794:./Src/application.c ****         }
 795:./Src/application.c ****         //MOTOR_VALUE.motBTS = MOTOR_VALUE.motBTS * -1;
 796:./Src/application.c ****         MotorL_pwm(app.motBTS );
 797:./Src/application.c ****       }
 798:./Src/application.c **** }
 799:./Src/application.c **** */
 800:./Src/application.c **** 
 801:./Src/application.c **** // EXPERIMENT
 802:./Src/application.c **** // http://www.impulseadventure.com/elec/robot-differential-steering.html
 803:./Src/application.c **** void go_motor(float throttle, float steering, float Vbatt, uint8_t fullpower){
 1426              		.loc 1 803 0
 1427              		.cfi_startproc
 1428              		@ args = 0, pretend = 0, frame = 8
 1429              		@ frame_needed = 0, uses_anonymous_args = 0
 1430              	.LVL196:
 1431 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1432              	.LCFI16:
 1433              		.cfi_def_cfa_offset 36
 1434              		.cfi_offset 4, -36
 1435              		.cfi_offset 5, -32
 1436              		.cfi_offset 6, -28
 1437              		.cfi_offset 7, -24
 1438              		.cfi_offset 8, -20
 1439              		.cfi_offset 9, -16
 1440              		.cfi_offset 10, -12
 1441              		.cfi_offset 11, -8
 1442              		.cfi_offset 14, -4
 1443 0004 83B0     		sub	sp, sp, #12
 1444              	.LCFI17:
 1445              		.cfi_def_cfa_offset 48
 1446 0006 0646     		mov	r6, r0
ARM GAS  /tmp/cc6kLxup.s 			page 41


 1447 0008 0C46     		mov	r4, r1
 804:./Src/application.c ****   float limitSup, limitInf ;
 805:./Src/application.c **** 
 806:./Src/application.c ****   if(fullpower==0){
 1448              		.loc 1 806 0
 1449 000a 002B     		cmp	r3, #0
 1450 000c 40F0CD80 		bne	.L171
 807:./Src/application.c ****     limitSup = 1000.0 * get_powerMax(Vbatt);
 1451              		.loc 1 807 0
 1452 0010 1046     		mov	r0, r2
 1453              	.LVL197:
 1454 0012 FFF7FEFF 		bl	get_powerMax
 1455              	.LVL198:
 1456 0016 8C49     		ldr	r1, .L184
 1457 0018 FFF7FEFF 		bl	__aeabi_fmul
 1458              	.LVL199:
 1459 001c 0546     		mov	r5, r0
 1460              	.LVL200:
 808:./Src/application.c ****     limitInf = limitSup * -1;
 1461              		.loc 1 808 0
 1462 001e 00F10047 		add	r7, r0, #-2147483648
 1463              	.LVL201:
 1464              	.L153:
 809:./Src/application.c ****   }else{
 810:./Src/application.c ****     limitSup = 1000.0;
 811:./Src/application.c ****     limitInf = limitSup * -1;
 812:./Src/application.c ****   }
 813:./Src/application.c **** 
 814:./Src/application.c **** // INPUTS
 815:./Src/application.c **** int     nJoyX;              // Joystick X input                     (-128..+127)
 816:./Src/application.c **** int     nJoyY;              // Joystick Y input                     (-128..+127)
 817:./Src/application.c **** 
 818:./Src/application.c **** // OUTPUTS
 819:./Src/application.c **** int     nMotMixL;           // Motor (left)  mixed output           (-128..+127)
 820:./Src/application.c **** int     nMotMixR;           // Motor (right) mixed output           (-128..+127)
 821:./Src/application.c **** 
 822:./Src/application.c **** // CONFIG
 823:./Src/application.c **** // - fPivYLimt  : The threshold at which the pivot action starts
 824:./Src/application.c **** //                This threshold is measured in units on the Y-axis
 825:./Src/application.c **** //                away from the X-axis (Y=0). A greater value will assign
 826:./Src/application.c **** //                more of the joystick's range to pivot actions.
 827:./Src/application.c **** //                Allowable range: (0..+127)
 828:./Src/application.c **** float fPivYLimit = 85.0;
 829:./Src/application.c **** 
 830:./Src/application.c **** // TEMP VARIABLES
 831:./Src/application.c **** float   nMotPremixL;    // Motor (left)  premixed output        (-128..+127)
 832:./Src/application.c **** float   nMotPremixR;    // Motor (right) premixed output        (-128..+127)
 833:./Src/application.c **** int     nPivSpeed;      // Pivot Speed                          (-128..+127)
 834:./Src/application.c **** float   fPivScale;      // Balance scale b/w drive and pivot    (   0..1   )
 835:./Src/application.c **** 
 836:./Src/application.c **** 
 837:./Src/application.c **** nJoyY = (int)throttle;
 1465              		.loc 1 837 0
 1466 0022 3046     		mov	r0, r6
 1467 0024 FFF7FEFF 		bl	__aeabi_f2iz
 1468              	.LVL202:
 1469 0028 0646     		mov	r6, r0
ARM GAS  /tmp/cc6kLxup.s 			page 42


 1470              	.LVL203:
 838:./Src/application.c **** nJoyX = (int)steering;
 1471              		.loc 1 838 0
 1472 002a 2046     		mov	r0, r4
 1473              	.LVL204:
 1474 002c FFF7FEFF 		bl	__aeabi_f2iz
 1475              	.LVL205:
 1476 0030 0446     		mov	r4, r0
 1477              	.LVL206:
 839:./Src/application.c **** 
 840:./Src/application.c **** 
 841:./Src/application.c **** 
 842:./Src/application.c **** // Calculate Drive Turn output due to Joystick X input
 843:./Src/application.c **** if (nJoyY >= 0) {
 1478              		.loc 1 843 0
 1479 0032 002E     		cmp	r6, #0
 1480 0034 C0F2C380 		blt	.L154
 844:./Src/application.c ****   // Forward
 845:./Src/application.c ****   nMotPremixL = (nJoyX>=0)? limitSup : (limitSup + nJoyX);
 1481              		.loc 1 845 0
 1482 0038 0028     		cmp	r0, #0
 1483 003a C0F2B980 		blt	.L182
 1484 003e A846     		mov	r8, r5
 1485              	.LVL207:
 1486              	.L155:
 846:./Src/application.c ****   nMotPremixR = (nJoyX>=0)? (limitSup - nJoyX) : limitSup;
 1487              		.loc 1 846 0 discriminator 4
 1488 0040 002C     		cmp	r4, #0
 1489 0042 C0F2D380 		blt	.L173
 1490              		.loc 1 846 0 is_stmt 0 discriminator 1
 1491 0046 2046     		mov	r0, r4
 1492 0048 FFF7FEFF 		bl	__aeabi_i2f
 1493              	.LVL208:
 1494 004c 0146     		mov	r1, r0
 1495 004e 2846     		mov	r0, r5
 1496 0050 FFF7FEFF 		bl	__aeabi_fsub
 1497              	.LVL209:
 1498 0054 8246     		mov	r10, r0
 1499              	.L156:
 1500              	.LVL210:
 847:./Src/application.c **** } else {
 848:./Src/application.c ****   // Reverse
 849:./Src/application.c ****   nMotPremixL = (nJoyX>=0)? (limitSup - nJoyX) : limitSup;
 850:./Src/application.c ****   nMotPremixR = (nJoyX>=0)? limitSup : (limitSup + nJoyX);
 851:./Src/application.c **** }
 852:./Src/application.c **** 
 853:./Src/application.c **** // Scale Drive output due to Joystick Y input (throttle)
 854:./Src/application.c **** nMotPremixL = nMotPremixL * nJoyY/100.0;
 1501              		.loc 1 854 0 is_stmt 1
 1502 0056 3046     		mov	r0, r6
 1503 0058 FFF7FEFF 		bl	__aeabi_i2f
 1504              	.LVL211:
 1505 005c 8146     		mov	r9, r0
 1506 005e 4146     		mov	r1, r8
 1507 0060 FFF7FEFF 		bl	__aeabi_fmul
 1508              	.LVL212:
 1509 0064 7949     		ldr	r1, .L184+4
ARM GAS  /tmp/cc6kLxup.s 			page 43


 1510 0066 FFF7FEFF 		bl	__aeabi_fdiv
 1511              	.LVL213:
 1512 006a 8046     		mov	r8, r0
 1513              	.LVL214:
 855:./Src/application.c **** nMotPremixR = nMotPremixR * nJoyY/100.0;
 1514              		.loc 1 855 0
 1515 006c 5146     		mov	r1, r10
 1516 006e 4846     		mov	r0, r9
 1517              	.LVL215:
 1518 0070 FFF7FEFF 		bl	__aeabi_fmul
 1519              	.LVL216:
 1520 0074 7549     		ldr	r1, .L184+4
 1521 0076 FFF7FEFF 		bl	__aeabi_fdiv
 1522              	.LVL217:
 1523 007a 8246     		mov	r10, r0
 1524              	.LVL218:
 856:./Src/application.c **** 
 857:./Src/application.c **** // Now calculate pivot amount
 858:./Src/application.c **** // - Strength of pivot (nPivSpeed) based on Joystick X input
 859:./Src/application.c **** // - Blending of pivot vs drive (fPivScale) based on Joystick Y input
 860:./Src/application.c **** nPivSpeed = nJoyX*3; //************************************
 1525              		.loc 1 860 0
 1526 007c 04EB4404 		add	r4, r4, r4, lsl #1
 1527              	.LVL219:
 861:./Src/application.c **** fPivScale = (abs(nJoyY)>fPivYLimit)? 0.0 : (1.0 - abs(nJoyY)/fPivYLimit);
 1528              		.loc 1 861 0
 1529 0080 86EAE670 		eor	r0, r6, r6, asr #31
 1530              	.LVL220:
 1531 0084 A0EBE670 		sub	r0, r0, r6, asr #31
 1532 0088 FFF7FEFF 		bl	__aeabi_i2f
 1533              	.LVL221:
 1534 008c 0646     		mov	r6, r0
 1535              	.LVL222:
 1536 008e 7049     		ldr	r1, .L184+8
 1537 0090 FFF7FEFF 		bl	__aeabi_fcmpgt
 1538              	.LVL223:
 1539 0094 0028     		cmp	r0, #0
 1540 0096 40F0AB80 		bne	.L176
 1541              		.loc 1 861 0 is_stmt 0 discriminator 2
 1542 009a 6D49     		ldr	r1, .L184+8
 1543 009c 3046     		mov	r0, r6
 1544 009e FFF7FEFF 		bl	__aeabi_fdiv
 1545              	.LVL224:
 1546 00a2 FFF7FEFF 		bl	__aeabi_f2d
 1547              	.LVL225:
 1548 00a6 0246     		mov	r2, r0
 1549 00a8 0B46     		mov	r3, r1
 1550 00aa 0020     		movs	r0, #0
 1551 00ac 6949     		ldr	r1, .L184+12
 1552 00ae FFF7FEFF 		bl	__aeabi_dsub
 1553              	.LVL226:
 1554 00b2 FFF7FEFF 		bl	__aeabi_d2f
 1555              	.LVL227:
 1556 00b6 0646     		mov	r6, r0
 1557              	.L158:
 1558              	.LVL228:
 862:./Src/application.c **** 
ARM GAS  /tmp/cc6kLxup.s 			page 44


 863:./Src/application.c **** // Calculate final mix of Drive and Pivot
 864:./Src/application.c **** nMotMixL = (int)((1.0-fPivScale)*nMotPremixL + fPivScale*( nPivSpeed));
 1559              		.loc 1 864 0 is_stmt 1 discriminator 4
 1560 00b8 3046     		mov	r0, r6
 1561 00ba FFF7FEFF 		bl	__aeabi_f2d
 1562              	.LVL229:
 1563 00be 0246     		mov	r2, r0
 1564 00c0 0B46     		mov	r3, r1
 1565 00c2 0020     		movs	r0, #0
 1566 00c4 6349     		ldr	r1, .L184+12
 1567 00c6 FFF7FEFF 		bl	__aeabi_dsub
 1568              	.LVL230:
 1569 00ca CDE90001 		strd	r0, [sp]
 1570 00ce 4046     		mov	r0, r8
 1571 00d0 FFF7FEFF 		bl	__aeabi_f2d
 1572              	.LVL231:
 1573 00d4 DDE90023 		ldrd	r2, [sp]
 1574 00d8 FFF7FEFF 		bl	__aeabi_dmul
 1575              	.LVL232:
 1576 00dc 8046     		mov	r8, r0
 1577              	.LVL233:
 1578 00de 8946     		mov	r9, r1
 1579 00e0 2046     		mov	r0, r4
 1580 00e2 FFF7FEFF 		bl	__aeabi_i2f
 1581              	.LVL234:
 1582 00e6 3146     		mov	r1, r6
 1583 00e8 FFF7FEFF 		bl	__aeabi_fmul
 1584              	.LVL235:
 1585 00ec FFF7FEFF 		bl	__aeabi_f2d
 1586              	.LVL236:
 1587 00f0 0246     		mov	r2, r0
 1588 00f2 0B46     		mov	r3, r1
 1589 00f4 4046     		mov	r0, r8
 1590 00f6 4946     		mov	r1, r9
 1591 00f8 FFF7FEFF 		bl	__aeabi_dadd
 1592              	.LVL237:
 1593 00fc FFF7FEFF 		bl	__aeabi_d2iz
 1594              	.LVL238:
 1595 0100 8346     		mov	fp, r0
 1596              	.LVL239:
 865:./Src/application.c **** nMotMixR = (int)((1.0-fPivScale)*nMotPremixR + fPivScale*(-nPivSpeed));
 1597              		.loc 1 865 0 discriminator 4
 1598 0102 5046     		mov	r0, r10
 1599              	.LVL240:
 1600 0104 FFF7FEFF 		bl	__aeabi_f2d
 1601              	.LVL241:
 1602 0108 DDE90023 		ldrd	r2, [sp]
 1603 010c FFF7FEFF 		bl	__aeabi_dmul
 1604              	.LVL242:
 1605 0110 8046     		mov	r8, r0
 1606 0112 8946     		mov	r9, r1
 1607 0114 6042     		negs	r0, r4
 1608 0116 FFF7FEFF 		bl	__aeabi_i2f
 1609              	.LVL243:
 1610 011a 3146     		mov	r1, r6
 1611 011c FFF7FEFF 		bl	__aeabi_fmul
 1612              	.LVL244:
ARM GAS  /tmp/cc6kLxup.s 			page 45


 1613 0120 FFF7FEFF 		bl	__aeabi_f2d
 1614              	.LVL245:
 1615 0124 0246     		mov	r2, r0
 1616 0126 0B46     		mov	r3, r1
 1617 0128 4046     		mov	r0, r8
 1618 012a 4946     		mov	r1, r9
 1619 012c FFF7FEFF 		bl	__aeabi_dadd
 1620              	.LVL246:
 1621 0130 FFF7FEFF 		bl	__aeabi_d2iz
 1622              	.LVL247:
 866:./Src/application.c **** 
 867:./Src/application.c **** 
 868:./Src/application.c **** 
 869:./Src/application.c **** /*
 870:./Src/application.c **** if((nMotMixL>0)&&(nMotMixR>0)){
 871:./Src/application.c ****   app.motATS = nMotMixL + FRICTION;
 872:./Src/application.c ****   app.motBTS = nMotMixR + FRICTION;
 873:./Src/application.c **** }else if ((nMotMixL<0)&&(nMotMixR<0)){
 874:./Src/application.c ****   app.motATS = nMotMixL - FRICTION;
 875:./Src/application.c ****   app.motBTS = nMotMixR - FRICTION;
 876:./Src/application.c **** }else{
 877:./Src/application.c ****   if((nMotMixL>0)&&(nMotMixR<0)){
 878:./Src/application.c ****     app.motATS = nMotMixL + FRICTION;
 879:./Src/application.c ****     app.motBTS = nMotMixR - FRICTION + FRICTION/2;
 880:./Src/application.c ****   }else if((nMotMixL<0)&&(nMotMixR>0)){
 881:./Src/application.c ****     app.motBTS = nMotMixR + FRICTION;
 882:./Src/application.c ****     app.motATS = nMotMixL - FRICTION  + FRICTION/2;
 883:./Src/application.c ****   }else{
 884:./Src/application.c ****     app.motATS = nMotMixL;
 885:./Src/application.c ****     app.motBTS = nMotMixR;
 886:./Src/application.c ****   }
 887:./Src/application.c **** }
 888:./Src/application.c **** */
 889:./Src/application.c **** 
 890:./Src/application.c **** app.motATS = nMotMixL;
 1623              		.loc 1 890 0 discriminator 4
 1624 0134 0FFA8BFB 		sxth	fp, fp
 1625              	.LVL248:
 1626 0138 474B     		ldr	r3, .L184+16
 1627 013a A3F82CB0 		strh	fp, [r3, #44]	@ movhi
 891:./Src/application.c **** app.motBTS = nMotMixR;
 1628              		.loc 1 891 0 discriminator 4
 1629 013e 00B2     		sxth	r0, r0
 1630              	.LVL249:
 1631 0140 D885     		strh	r0, [r3, #46]	@ movhi
 892:./Src/application.c **** 
 893:./Src/application.c ****       if(app.motATS >= 0){
 1632              		.loc 1 893 0 discriminator 4
 1633 0142 9B8D     		ldrh	r3, [r3, #44]
 1634 0144 13F4004F 		tst	r3, #32768
 1635 0148 54D1     		bne	.L159
 894:./Src/application.c ****         //0 ~ 100
 895:./Src/application.c ****         if(app.motATS > limitSup){
 1636              		.loc 1 895 0
 1637 014a 434B     		ldr	r3, .L184+16
 1638 014c 988D     		ldrh	r0, [r3, #44]
 1639 014e 00B2     		sxth	r0, r0
ARM GAS  /tmp/cc6kLxup.s 			page 46


 1640 0150 FFF7FEFF 		bl	__aeabi_i2f
 1641              	.LVL250:
 1642 0154 2946     		mov	r1, r5
 1643 0156 FFF7FEFF 		bl	__aeabi_fcmpgt
 1644              	.LVL251:
 1645 015a 28B1     		cbz	r0, .L160
 896:./Src/application.c ****           app.motATS = (int16_t)limitSup;
 1646              		.loc 1 896 0
 1647 015c 2846     		mov	r0, r5
 1648 015e FFF7FEFF 		bl	__aeabi_f2iz
 1649              	.LVL252:
 1650 0162 00B2     		sxth	r0, r0
 1651 0164 3C4B     		ldr	r3, .L184+16
 1652 0166 9885     		strh	r0, [r3, #44]	@ movhi
 1653              	.L160:
 897:./Src/application.c ****         }
 898:./Src/application.c ****         MotorR_pwm(app.motATS);
 1654              		.loc 1 898 0
 1655 0168 3B4B     		ldr	r3, .L184+16
 1656 016a 988D     		ldrh	r0, [r3, #44]
 1657 016c 00B2     		sxth	r0, r0
 1658 016e FFF7FEFF 		bl	MotorR_pwm
 1659              	.LVL253:
 1660              	.L162:
 899:./Src/application.c ****       }else{
 900:./Src/application.c ****         //0 ~ -100
 901:./Src/application.c ****         if(app.motATS < limitInf){
 902:./Src/application.c ****           app.motATS = (int16_t)limitInf;
 903:./Src/application.c ****         }
 904:./Src/application.c ****         //app.motATS = app.motATS * -1;
 905:./Src/application.c ****         MotorR_pwm(app.motATS);
 906:./Src/application.c ****       }
 907:./Src/application.c **** 
 908:./Src/application.c ****       if(app.motBTS >= 0){
 1661              		.loc 1 908 0
 1662 0172 394B     		ldr	r3, .L184+16
 1663 0174 DB8D     		ldrh	r3, [r3, #46]
 1664 0176 13F4004F 		tst	r3, #32768
 1665 017a 50D1     		bne	.L165
 909:./Src/application.c ****         //0 ~ 100
 910:./Src/application.c ****         if(app.motBTS > limitSup){
 1666              		.loc 1 910 0
 1667 017c 364B     		ldr	r3, .L184+16
 1668 017e D88D     		ldrh	r0, [r3, #46]
 1669 0180 00B2     		sxth	r0, r0
 1670 0182 FFF7FEFF 		bl	__aeabi_i2f
 1671              	.LVL254:
 1672 0186 2946     		mov	r1, r5
 1673 0188 FFF7FEFF 		bl	__aeabi_fcmpgt
 1674              	.LVL255:
 1675 018c 28B1     		cbz	r0, .L166
 911:./Src/application.c ****           app.motBTS = (int16_t)limitSup;
 1676              		.loc 1 911 0
 1677 018e 2846     		mov	r0, r5
 1678 0190 FFF7FEFF 		bl	__aeabi_f2iz
 1679              	.LVL256:
 1680 0194 00B2     		sxth	r0, r0
ARM GAS  /tmp/cc6kLxup.s 			page 47


 1681 0196 304B     		ldr	r3, .L184+16
 1682 0198 D885     		strh	r0, [r3, #46]	@ movhi
 1683              	.L166:
 912:./Src/application.c ****         }
 913:./Src/application.c ****         MotorL_pwm(app.motBTS );
 1684              		.loc 1 913 0
 1685 019a 2F4B     		ldr	r3, .L184+16
 1686 019c D88D     		ldrh	r0, [r3, #46]
 1687 019e 00B2     		sxth	r0, r0
 1688 01a0 FFF7FEFF 		bl	MotorL_pwm
 1689              	.LVL257:
 1690              	.L152:
 914:./Src/application.c ****       }else{
 915:./Src/application.c ****         //0 ~ -100
 916:./Src/application.c ****         if(app.motBTS < limitInf){
 917:./Src/application.c ****           app.motBTS = (int16_t)limitInf;
 918:./Src/application.c ****         }
 919:./Src/application.c ****         //MOTOR_VALUE.motBTS = MOTOR_VALUE.motBTS * -1;
 920:./Src/application.c ****         MotorL_pwm(app.motBTS );
 921:./Src/application.c ****       }
 922:./Src/application.c **** }
 1691              		.loc 1 922 0
 1692 01a4 03B0     		add	sp, sp, #12
 1693              	.LCFI18:
 1694              		.cfi_remember_state
 1695              		.cfi_def_cfa_offset 36
 1696              		@ sp needed
 1697 01a6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1698              	.LVL258:
 1699              	.L171:
 1700              	.LCFI19:
 1701              		.cfi_restore_state
 811:./Src/application.c ****   }
 1702              		.loc 1 811 0
 1703 01aa 2C4F     		ldr	r7, .L184+20
 810:./Src/application.c ****     limitInf = limitSup * -1;
 1704              		.loc 1 810 0
 1705 01ac 264D     		ldr	r5, .L184
 1706 01ae 38E7     		b	.L153
 1707              	.LVL259:
 1708              	.L182:
 845:./Src/application.c ****   nMotPremixR = (nJoyX>=0)? (limitSup - nJoyX) : limitSup;
 1709              		.loc 1 845 0 discriminator 1
 1710 01b0 FFF7FEFF 		bl	__aeabi_i2f
 1711              	.LVL260:
 1712 01b4 2946     		mov	r1, r5
 1713 01b6 FFF7FEFF 		bl	__aeabi_fadd
 1714              	.LVL261:
 1715 01ba 8046     		mov	r8, r0
 1716 01bc 40E7     		b	.L155
 1717              	.LVL262:
 1718              	.L154:
 849:./Src/application.c ****   nMotPremixR = (nJoyX>=0)? limitSup : (limitSup + nJoyX);
 1719              		.loc 1 849 0
 1720 01be 0028     		cmp	r0, #0
 1721 01c0 0ADB     		blt	.L174
 849:./Src/application.c ****   nMotPremixR = (nJoyX>=0)? limitSup : (limitSup + nJoyX);
ARM GAS  /tmp/cc6kLxup.s 			page 48


 1722              		.loc 1 849 0 is_stmt 0 discriminator 1
 1723 01c2 FFF7FEFF 		bl	__aeabi_i2f
 1724              	.LVL263:
 1725 01c6 0146     		mov	r1, r0
 1726 01c8 2846     		mov	r0, r5
 1727 01ca FFF7FEFF 		bl	__aeabi_fsub
 1728              	.LVL264:
 1729 01ce 8046     		mov	r8, r0
 1730              	.L157:
 1731              	.LVL265:
 850:./Src/application.c **** }
 1732              		.loc 1 850 0 is_stmt 1 discriminator 4
 1733 01d0 002C     		cmp	r4, #0
 1734 01d2 03DB     		blt	.L183
 850:./Src/application.c **** }
 1735              		.loc 1 850 0 is_stmt 0
 1736 01d4 AA46     		mov	r10, r5
 1737 01d6 3EE7     		b	.L156
 1738              	.LVL266:
 1739              	.L174:
 849:./Src/application.c ****   nMotPremixR = (nJoyX>=0)? limitSup : (limitSup + nJoyX);
 1740              		.loc 1 849 0 is_stmt 1
 1741 01d8 A846     		mov	r8, r5
 1742 01da F9E7     		b	.L157
 1743              	.LVL267:
 1744              	.L183:
 850:./Src/application.c **** }
 1745              		.loc 1 850 0 discriminator 1
 1746 01dc 2046     		mov	r0, r4
 1747 01de FFF7FEFF 		bl	__aeabi_i2f
 1748              	.LVL268:
 1749 01e2 2946     		mov	r1, r5
 1750 01e4 FFF7FEFF 		bl	__aeabi_fadd
 1751              	.LVL269:
 1752 01e8 8246     		mov	r10, r0
 1753 01ea 34E7     		b	.L156
 1754              	.L173:
 846:./Src/application.c **** } else {
 1755              		.loc 1 846 0
 1756 01ec AA46     		mov	r10, r5
 1757 01ee 32E7     		b	.L156
 1758              	.LVL270:
 1759              	.L176:
 861:./Src/application.c **** 
 1760              		.loc 1 861 0
 1761 01f0 0026     		movs	r6, #0
 1762 01f2 61E7     		b	.L158
 1763              	.LVL271:
 1764              	.L159:
 901:./Src/application.c ****           app.motATS = (int16_t)limitInf;
 1765              		.loc 1 901 0
 1766 01f4 184B     		ldr	r3, .L184+16
 1767 01f6 988D     		ldrh	r0, [r3, #44]
 1768 01f8 00B2     		sxth	r0, r0
 1769 01fa FFF7FEFF 		bl	__aeabi_i2f
 1770              	.LVL272:
 1771 01fe 3946     		mov	r1, r7
ARM GAS  /tmp/cc6kLxup.s 			page 49


 1772 0200 FFF7FEFF 		bl	__aeabi_fcmplt
 1773              	.LVL273:
 1774 0204 28B1     		cbz	r0, .L163
 902:./Src/application.c ****         }
 1775              		.loc 1 902 0
 1776 0206 3846     		mov	r0, r7
 1777 0208 FFF7FEFF 		bl	__aeabi_f2iz
 1778              	.LVL274:
 1779 020c 00B2     		sxth	r0, r0
 1780 020e 124B     		ldr	r3, .L184+16
 1781 0210 9885     		strh	r0, [r3, #44]	@ movhi
 1782              	.L163:
 905:./Src/application.c ****       }
 1783              		.loc 1 905 0
 1784 0212 114B     		ldr	r3, .L184+16
 1785 0214 988D     		ldrh	r0, [r3, #44]
 1786 0216 00B2     		sxth	r0, r0
 1787 0218 FFF7FEFF 		bl	MotorR_pwm
 1788              	.LVL275:
 1789 021c A9E7     		b	.L162
 1790              	.L165:
 916:./Src/application.c ****           app.motBTS = (int16_t)limitInf;
 1791              		.loc 1 916 0
 1792 021e 0E4B     		ldr	r3, .L184+16
 1793 0220 D88D     		ldrh	r0, [r3, #46]
 1794 0222 00B2     		sxth	r0, r0
 1795 0224 FFF7FEFF 		bl	__aeabi_i2f
 1796              	.LVL276:
 1797 0228 3946     		mov	r1, r7
 1798 022a FFF7FEFF 		bl	__aeabi_fcmplt
 1799              	.LVL277:
 1800 022e 28B1     		cbz	r0, .L169
 917:./Src/application.c ****         }
 1801              		.loc 1 917 0
 1802 0230 3846     		mov	r0, r7
 1803 0232 FFF7FEFF 		bl	__aeabi_f2iz
 1804              	.LVL278:
 1805 0236 00B2     		sxth	r0, r0
 1806 0238 074B     		ldr	r3, .L184+16
 1807 023a D885     		strh	r0, [r3, #46]	@ movhi
 1808              	.L169:
 920:./Src/application.c ****       }
 1809              		.loc 1 920 0
 1810 023c 064B     		ldr	r3, .L184+16
 1811 023e D88D     		ldrh	r0, [r3, #46]
 1812 0240 00B2     		sxth	r0, r0
 1813 0242 FFF7FEFF 		bl	MotorL_pwm
 1814              	.LVL279:
 1815              		.loc 1 922 0
 1816 0246 ADE7     		b	.L152
 1817              	.L185:
 1818              		.align	2
 1819              	.L184:
 1820 0248 00007A44 		.word	1148846080
 1821 024c 0000C842 		.word	1120403456
 1822 0250 0000AA42 		.word	1118437376
 1823 0254 0000F03F 		.word	1072693248
ARM GAS  /tmp/cc6kLxup.s 			page 50


 1824 0258 00000000 		.word	app
 1825 025c 00007AC4 		.word	-998637568
 1826              		.cfi_endproc
 1827              	.LFE85:
 1829              		.global	__aeabi_dcmpgt
 1830              		.global	__aeabi_fcmple
 1831              		.section	.text.applcation_TASK,"ax",%progbits
 1832              		.align	1
 1833              		.global	applcation_TASK
 1834              		.syntax unified
 1835              		.thumb
 1836              		.thumb_func
 1837              		.fpu softvfp
 1839              	applcation_TASK:
 1840              	.LFB70:
  70:./Src/application.c ****   uint8_t letture,temp8;
 1841              		.loc 1 70 0
 1842              		.cfi_startproc
 1843              		@ args = 0, pretend = 0, frame = 0
 1844              		@ frame_needed = 0, uses_anonymous_args = 0
 1845 0000 70B5     		push	{r4, r5, r6, lr}
 1846              	.LCFI20:
 1847              		.cfi_def_cfa_offset 16
 1848              		.cfi_offset 4, -16
 1849              		.cfi_offset 5, -12
 1850              		.cfi_offset 6, -8
 1851              		.cfi_offset 14, -4
  74:./Src/application.c ****     case app_init:
 1852              		.loc 1 74 0
 1853 0002 9F4B     		ldr	r3, .L258+8
 1854 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1855 0006 DBB2     		uxtb	r3, r3
 1856 0008 042B     		cmp	r3, #4
 1857 000a 00F25A82 		bhi	.L187
 1858 000e DFE813F0 		tbh	[pc, r3, lsl #1]
 1859              	.L189:
 1860 0012 0500     		.2byte	(.L188-.L189)/2
 1861 0014 8100     		.2byte	(.L190-.L189)/2
 1862 0016 F100     		.2byte	(.L191-.L189)/2
 1863 0018 4301     		.2byte	(.L192-.L189)/2
 1864 001a CD01     		.2byte	(.L193-.L189)/2
 1865              		.p2align 1
 1866              	.L188:
  76:./Src/application.c ****       MotorL_stop();
 1867              		.loc 1 76 0
 1868 001c FFF7FEFF 		bl	MotorR_stop
 1869              	.LVL280:
  77:./Src/application.c ****       //Aspetta Center joystick e calcola la media
 1870              		.loc 1 77 0
 1871 0020 FFF7FEFF 		bl	MotorL_stop
 1872              	.LVL281:
  79:./Src/application.c ****       app.center_media_Y = 0.0;
 1873              		.loc 1 79 0
 1874 0024 964B     		ldr	r3, .L258+8
 1875 0026 0022     		movs	r2, #0
 1876 0028 DA61     		str	r2, [r3, #28]	@ float
  80:./Src/application.c ****       letture = 0;
ARM GAS  /tmp/cc6kLxup.s 			page 51


 1877              		.loc 1 80 0
 1878 002a 1A62     		str	r2, [r3, #32]	@ float
 1879              	.LVL282:
  82:./Src/application.c ****       do{
 1880              		.loc 1 82 0
 1881 002c 0024     		movs	r4, #0
 1882 002e 954B     		ldr	r3, .L258+12
 1883 0030 1C71     		strb	r4, [r3, #4]
 1884 0032 2EE0     		b	.L194
 1885              	.LVL283:
 1886              	.L196:
  86:./Src/application.c ****         wii_JOYdati.done = 0;
 1887              		.loc 1 86 0 discriminator 2
 1888 0034 FFF7FEFF 		bl	WiiNunchuck_TASK
 1889              	.LVL284:
 1890              	.L195:
  86:./Src/application.c ****         wii_JOYdati.done = 0;
 1891              		.loc 1 86 0 is_stmt 0 discriminator 1
 1892 0038 924B     		ldr	r3, .L258+12
 1893 003a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1894 003c 002B     		cmp	r3, #0
 1895 003e F9D0     		beq	.L196
  87:./Src/application.c ****         if((wii_JOYdati.ay < 129) && (wii_JOYdati.ay > 124)){
 1896              		.loc 1 87 0 is_stmt 1
 1897 0040 904B     		ldr	r3, .L258+12
 1898 0042 0022     		movs	r2, #0
 1899 0044 1A71     		strb	r2, [r3, #4]
  88:./Src/application.c ****           letture++;
 1900              		.loc 1 88 0
 1901 0046 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1902 0048 DBB2     		uxtb	r3, r3
 1903 004a 802B     		cmp	r3, #128
 1904 004c 1DD8     		bhi	.L197
  88:./Src/application.c ****           letture++;
 1905              		.loc 1 88 0 is_stmt 0 discriminator 1
 1906 004e 8D4B     		ldr	r3, .L258+12
 1907 0050 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1908 0052 DBB2     		uxtb	r3, r3
 1909 0054 7C2B     		cmp	r3, #124
 1910 0056 18D9     		bls	.L197
  89:./Src/application.c ****           temp8 = wii_JOYdati.ay;
 1911              		.loc 1 89 0 is_stmt 1
 1912 0058 0134     		adds	r4, r4, #1
 1913              	.LVL285:
 1914 005a E4B2     		uxtb	r4, r4
 1915              	.LVL286:
  90:./Src/application.c ****           app.center_media_Y = app.center_media_Y + ((float)temp8);
 1916              		.loc 1 90 0
 1917 005c 894B     		ldr	r3, .L258+12
 1918 005e 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 1919              	.LVL287:
  91:./Src/application.c ****         }else{
 1920              		.loc 1 91 0
 1921 0060 874D     		ldr	r5, .L258+8
 1922 0062 2E6A     		ldr	r6, [r5, #32]	@ float
 1923 0064 FFF7FEFF 		bl	__aeabi_ui2f
 1924              	.LVL288:
ARM GAS  /tmp/cc6kLxup.s 			page 52


 1925 0068 0146     		mov	r1, r0
 1926 006a 3046     		mov	r0, r6
 1927 006c FFF7FEFF 		bl	__aeabi_fadd
 1928              	.LVL289:
 1929 0070 2862     		str	r0, [r5, #32]	@ float
  96:./Src/application.c ****       app.center_media_Y = app.center_media_Y / 50.0;
 1930              		.loc 1 96 0
 1931 0072 312C     		cmp	r4, #49
 1932 0074 0DD9     		bls	.L194
  97:./Src/application.c ****       letture = 0;
 1933              		.loc 1 97 0
 1934 0076 824C     		ldr	r4, .L258+8
 1935              	.LVL290:
 1936 0078 206A     		ldr	r0, [r4, #32]	@ float
 1937 007a 8349     		ldr	r1, .L258+16
 1938 007c FFF7FEFF 		bl	__aeabi_fdiv
 1939              	.LVL291:
 1940 0080 2062     		str	r0, [r4, #32]	@ float
 1941              	.LVL292:
  99:./Src/application.c ****       do{
 1942              		.loc 1 99 0
 1943 0082 0024     		movs	r4, #0
 1944 0084 7F4B     		ldr	r3, .L258+12
 1945 0086 1C71     		strb	r4, [r3, #4]
 1946 0088 40E0     		b	.L200
 1947              	.LVL293:
 1948              	.L197:
  94:./Src/application.c ****         }
 1949              		.loc 1 94 0
 1950 008a 7D4B     		ldr	r3, .L258+8
 1951 008c 0022     		movs	r2, #0
 1952 008e 1A62     		str	r2, [r3, #32]	@ float
  93:./Src/application.c ****           app.center_media_Y = 0.0;
 1953              		.loc 1 93 0
 1954 0090 0024     		movs	r4, #0
 1955              	.LVL294:
 1956              	.L194:
  84:./Src/application.c **** 
 1957              		.loc 1 84 0
 1958 0092 7E48     		ldr	r0, .L258+20
 1959 0094 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1960              	.LVL295:
  86:./Src/application.c ****         wii_JOYdati.done = 0;
 1961              		.loc 1 86 0
 1962 0098 CEE7     		b	.L195
 1963              	.L202:
 103:./Src/application.c ****         wii_JOYdati.done = 0;
 1964              		.loc 1 103 0 discriminator 2
 1965 009a FFF7FEFF 		bl	WiiNunchuck_TASK
 1966              	.LVL296:
 1967              	.L201:
 103:./Src/application.c ****         wii_JOYdati.done = 0;
 1968              		.loc 1 103 0 is_stmt 0 discriminator 1
 1969 009e 794B     		ldr	r3, .L258+12
 1970 00a0 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1971 00a2 002B     		cmp	r3, #0
 1972 00a4 F9D0     		beq	.L202
ARM GAS  /tmp/cc6kLxup.s 			page 53


 104:./Src/application.c ****         if((wii_JOYdati.ax < 129) && (wii_JOYdati.ax > 124)){
 1973              		.loc 1 104 0 is_stmt 1
 1974 00a6 774B     		ldr	r3, .L258+12
 1975 00a8 0022     		movs	r2, #0
 1976 00aa 1A71     		strb	r2, [r3, #4]
 105:./Src/application.c ****           letture++;
 1977              		.loc 1 105 0
 1978 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1979 00ae DBB2     		uxtb	r3, r3
 1980 00b0 802B     		cmp	r3, #128
 1981 00b2 27D8     		bhi	.L203
 105:./Src/application.c ****           letture++;
 1982              		.loc 1 105 0 is_stmt 0 discriminator 1
 1983 00b4 734B     		ldr	r3, .L258+12
 1984 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1985 00b8 DBB2     		uxtb	r3, r3
 1986 00ba 7C2B     		cmp	r3, #124
 1987 00bc 22D9     		bls	.L203
 106:./Src/application.c ****           temp8 = wii_JOYdati.ax;
 1988              		.loc 1 106 0 is_stmt 1
 1989 00be 0134     		adds	r4, r4, #1
 1990              	.LVL297:
 1991 00c0 E4B2     		uxtb	r4, r4
 1992              	.LVL298:
 107:./Src/application.c ****           app.center_media_X = app.center_media_X + ((float)temp8);
 1993              		.loc 1 107 0
 1994 00c2 704B     		ldr	r3, .L258+12
 1995 00c4 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1996              	.LVL299:
 108:./Src/application.c ****         }else{
 1997              		.loc 1 108 0
 1998 00c6 6E4D     		ldr	r5, .L258+8
 1999 00c8 EE69     		ldr	r6, [r5, #28]	@ float
 2000 00ca FFF7FEFF 		bl	__aeabi_ui2f
 2001              	.LVL300:
 2002 00ce 0146     		mov	r1, r0
 2003 00d0 3046     		mov	r0, r6
 2004 00d2 FFF7FEFF 		bl	__aeabi_fadd
 2005              	.LVL301:
 2006 00d6 E861     		str	r0, [r5, #28]	@ float
 113:./Src/application.c ****       app.center_media_X = app.center_media_X / 50.0;
 2007              		.loc 1 113 0
 2008 00d8 312C     		cmp	r4, #49
 2009 00da 17D9     		bls	.L200
 114:./Src/application.c **** 
 2010              		.loc 1 114 0
 2011 00dc 684C     		ldr	r4, .L258+8
 2012              	.LVL302:
 2013 00de E069     		ldr	r0, [r4, #28]	@ float
 2014 00e0 6949     		ldr	r1, .L258+16
 2015 00e2 FFF7FEFF 		bl	__aeabi_fdiv
 2016              	.LVL303:
 2017 00e6 E061     		str	r0, [r4, #28]	@ float
 116:./Src/application.c **** 
 2018              		.loc 1 116 0
 2019 00e8 FFF7FEFF 		bl	accelleration_XY_Reset
 2020              	.LVL304:
ARM GAS  /tmp/cc6kLxup.s 			page 54


 118:./Src/application.c ****       app.stato = app_soft_run;
 2021              		.loc 1 118 0
 2022 00ec FFF7FEFF 		bl	HAL_GetTick
 2023              	.LVL305:
 2024 00f0 6060     		str	r0, [r4, #4]
 119:./Src/application.c ****       MotorR_start();
 2025              		.loc 1 119 0
 2026 00f2 0123     		movs	r3, #1
 2027 00f4 2370     		strb	r3, [r4]
 120:./Src/application.c ****       MotorL_start();
 2028              		.loc 1 120 0
 2029 00f6 FFF7FEFF 		bl	MotorR_start
 2030              	.LVL306:
 121:./Src/application.c **** 
 2031              		.loc 1 121 0
 2032 00fa FFF7FEFF 		bl	MotorL_start
 2033              	.LVL307:
 123:./Src/application.c **** 
 2034              		.loc 1 123 0
 2035 00fe FFF7FEFF 		bl	Buzzer_OneShortBeep
 2036              	.LVL308:
 2037              	.L186:
 323:./Src/application.c **** 
 2038              		.loc 1 323 0
 2039 0102 70BD     		pop	{r4, r5, r6, pc}
 2040              	.LVL309:
 2041              	.L203:
 111:./Src/application.c ****         }
 2042              		.loc 1 111 0
 2043 0104 5E4B     		ldr	r3, .L258+8
 2044 0106 0022     		movs	r2, #0
 2045 0108 DA61     		str	r2, [r3, #28]	@ float
 110:./Src/application.c ****           app.center_media_X = 0.0;
 2046              		.loc 1 110 0
 2047 010a 0024     		movs	r4, #0
 2048              	.LVL310:
 2049              	.L200:
 101:./Src/application.c **** 
 2050              		.loc 1 101 0
 2051 010c 5F48     		ldr	r0, .L258+20
 2052 010e FFF7FEFF 		bl	HAL_IWDG_Refresh
 2053              	.LVL311:
 103:./Src/application.c ****         wii_JOYdati.done = 0;
 2054              		.loc 1 103 0
 2055 0112 C4E7     		b	.L201
 2056              	.LVL312:
 2057              	.L190:
 129:./Src/application.c ****       app.axn = normalize_x(wii_JOYdati.ax);
 2058              		.loc 1 129 0
 2059 0114 5B4D     		ldr	r5, .L258+12
 2060 0116 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 2061 0118 FFF7FEFF 		bl	normalize_y
 2062              	.LVL313:
 2063 011c 584C     		ldr	r4, .L258+8
 2064 011e A060     		str	r0, [r4, #8]	@ float
 130:./Src/application.c **** 
 2065              		.loc 1 130 0
ARM GAS  /tmp/cc6kLxup.s 			page 55


 2066 0120 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 2067 0122 FFF7FEFF 		bl	normalize_x
 2068              	.LVL314:
 2069 0126 E060     		str	r0, [r4, #12]	@ float
 133:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 2070              		.loc 1 133 0
 2071 0128 A068     		ldr	r0, [r4, #8]	@ float
 2072              	.LVL315:
 134:./Src/application.c ****       app.ayn = scale_y(tempf1, tempf2);
 2073              		.loc 1 134 0
 2074 012a 594E     		ldr	r6, .L258+24
 2075 012c 3168     		ldr	r1, [r6]	@ float
 2076              	.LVL316:
 135:./Src/application.c ****       tempf1 = app.axn;
 2077              		.loc 1 135 0
 2078 012e FFF7FEFF 		bl	scale_y
 2079              	.LVL317:
 2080 0132 A060     		str	r0, [r4, #8]	@ float
 136:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 2081              		.loc 1 136 0
 2082 0134 E068     		ldr	r0, [r4, #12]	@ float
 2083              	.LVL318:
 137:./Src/application.c ****       app.axn = scale_x(tempf1, tempf2);
 2084              		.loc 1 137 0
 2085 0136 3168     		ldr	r1, [r6]	@ float
 2086              	.LVL319:
 138:./Src/application.c **** 
 2087              		.loc 1 138 0
 2088 0138 FFF7FEFF 		bl	scale_x
 2089              	.LVL320:
 2090 013c E060     		str	r0, [r4, #12]	@ float
 140:./Src/application.c ****       app.axn = accellerationX(app.axn);
 2091              		.loc 1 140 0
 2092 013e A068     		ldr	r0, [r4, #8]	@ float
 2093 0140 FFF7FEFF 		bl	accellerationY
 2094              	.LVL321:
 2095 0144 A060     		str	r0, [r4, #8]	@ float
 141:./Src/application.c **** 
 2096              		.loc 1 141 0
 2097 0146 E068     		ldr	r0, [r4, #12]	@ float
 2098 0148 FFF7FEFF 		bl	accellerationX
 2099              	.LVL322:
 2100 014c E060     		str	r0, [r4, #12]	@ float
 143:./Src/application.c ****       tempf2 = app.axn;
 2101              		.loc 1 143 0
 2102 014e A068     		ldr	r0, [r4, #8]	@ float
 2103              	.LVL323:
 144:./Src/application.c **** 
 2104              		.loc 1 144 0
 2105 0150 E168     		ldr	r1, [r4, #12]	@ float
 2106              	.LVL324:
 146:./Src/application.c **** 
 2107              		.loc 1 146 0
 2108 0152 3268     		ldr	r2, [r6]	@ float
 2109 0154 0023     		movs	r3, #0
 2110 0156 FFF7FEFF 		bl	go_motor
 2111              	.LVL325:
ARM GAS  /tmp/cc6kLxup.s 			page 56


 149:./Src/application.c ****       if((wii_JOYdati.bz == 0)&&((((float)temp8 - app.center_media_Y) > 4.0))&&(telemetry.dataREADY
 2112              		.loc 1 149 0
 2113 015a 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 2114 015c D8B2     		uxtb	r0, r3
 2115              	.LVL326:
 150:./Src/application.c ****         if((HAL_GetTick() - app.tsoft_run)>=1000){
 2116              		.loc 1 150 0
 2117 015e EB78     		ldrb	r3, [r5, #3]	@ zero_extendqisi2
 2118 0160 63B9     		cbnz	r3, .L207
 150:./Src/application.c ****         if((HAL_GetTick() - app.tsoft_run)>=1000){
 2119              		.loc 1 150 0 is_stmt 0 discriminator 1
 2120 0162 FFF7FEFF 		bl	__aeabi_ui2f
 2121              	.LVL327:
 2122 0166 216A     		ldr	r1, [r4, #32]	@ float
 2123 0168 FFF7FEFF 		bl	__aeabi_fsub
 2124              	.LVL328:
 2125 016c 4FF08141 		mov	r1, #1082130432
 2126 0170 FFF7FEFF 		bl	__aeabi_fcmpgt
 2127              	.LVL329:
 2128 0174 10B1     		cbz	r0, .L207
 150:./Src/application.c ****         if((HAL_GetTick() - app.tsoft_run)>=1000){
 2129              		.loc 1 150 0 discriminator 2
 2130 0176 474B     		ldr	r3, .L258+28
 2131 0178 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 2132 017a 0BB3     		cbz	r3, .L249
 2133              	.L207:
 158:./Src/application.c ****       }
 2134              		.loc 1 158 0 is_stmt 1
 2135 017c FFF7FEFF 		bl	HAL_GetTick
 2136              	.LVL330:
 2137 0180 3F4B     		ldr	r3, .L258+8
 2138 0182 5860     		str	r0, [r3, #4]
 2139              	.L209:
 161:./Src/application.c ****         telemetry.dataREADY_JOYSTICK  = 0;
 2140              		.loc 1 161 0
 2141 0184 434B     		ldr	r3, .L258+28
 2142 0186 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 2143 0188 4BB1     		cbz	r3, .L210
 162:./Src/application.c ****         if(telemetry.dataLast_Command == 'R'){
 2144              		.loc 1 162 0
 2145 018a 424B     		ldr	r3, .L258+28
 2146 018c 0022     		movs	r2, #0
 2147 018e 5A75     		strb	r2, [r3, #21]
 163:./Src/application.c ****           app.stato = app_soft_ANDROIDAPP;
 2148              		.loc 1 163 0
 2149 0190 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2150 0192 DBB2     		uxtb	r3, r3
 2151 0194 522B     		cmp	r3, #82
 2152 0196 24D0     		beq	.L250
 2153              	.L211:
 168:./Src/application.c ****       }
 2154              		.loc 1 168 0
 2155 0198 3E4B     		ldr	r3, .L258+28
 2156 019a 0022     		movs	r2, #0
 2157 019c 9A75     		strb	r2, [r3, #22]
 2158              	.L210:
 171:./Src/application.c ****           app.stato = app_hard_run;
ARM GAS  /tmp/cc6kLxup.s 			page 57


 2159              		.loc 1 171 0
 2160 019e 394B     		ldr	r3, .L258+12
 2161 01a0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2162 01a2 002B     		cmp	r3, #0
 2163 01a4 ADD1     		bne	.L186
 171:./Src/application.c ****           app.stato = app_hard_run;
 2164              		.loc 1 171 0 is_stmt 0 discriminator 1
 2165 01a6 374B     		ldr	r3, .L258+12
 2166 01a8 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2167 01aa DBB2     		uxtb	r3, r3
 2168 01ac 012B     		cmp	r3, #1
 2169 01ae A8D1     		bne	.L186
 171:./Src/application.c ****           app.stato = app_hard_run;
 2170              		.loc 1 171 0 discriminator 2
 2171 01b0 384B     		ldr	r3, .L258+28
 2172 01b2 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 2173 01b4 002B     		cmp	r3, #0
 2174 01b6 A4D1     		bne	.L186
 172:./Src/application.c ****           //accelleration_XY_Reset();     //??????
 2175              		.loc 1 172 0 is_stmt 1
 2176 01b8 314B     		ldr	r3, .L258+8
 2177 01ba 0222     		movs	r2, #2
 2178 01bc 1A70     		strb	r2, [r3]
 2179 01be A0E7     		b	.L186
 2180              	.L249:
 151:./Src/application.c ****             app.cruise_soft_run_nohand = 0.0;
 2181              		.loc 1 151 0
 2182 01c0 FFF7FEFF 		bl	HAL_GetTick
 2183              	.LVL331:
 2184 01c4 6368     		ldr	r3, [r4, #4]
 2185 01c6 C31A     		subs	r3, r0, r3
 2186 01c8 B3F57A7F 		cmp	r3, #1000
 2187 01cc DAD3     		bcc	.L209
 152:./Src/application.c ****             app.stato = app_soft_run_nohand;
 2188              		.loc 1 152 0
 2189 01ce 0023     		movs	r3, #0
 2190 01d0 A361     		str	r3, [r4, #24]	@ float
 153:./Src/application.c ****             app.tcruise_decrement = HAL_GetTick();
 2191              		.loc 1 153 0
 2192 01d2 0323     		movs	r3, #3
 2193 01d4 2370     		strb	r3, [r4]
 154:./Src/application.c ****             Buzzer_OneShortBeep();
 2194              		.loc 1 154 0
 2195 01d6 FFF7FEFF 		bl	HAL_GetTick
 2196              	.LVL332:
 2197 01da 2061     		str	r0, [r4, #16]
 155:./Src/application.c ****         }
 2198              		.loc 1 155 0
 2199 01dc FFF7FEFF 		bl	Buzzer_OneShortBeep
 2200              	.LVL333:
 2201 01e0 D0E7     		b	.L209
 2202              	.L250:
 164:./Src/application.c ****           app.tAndroidAPP = HAL_GetTick();
 2203              		.loc 1 164 0
 2204 01e2 274C     		ldr	r4, .L258+8
 2205 01e4 0423     		movs	r3, #4
 2206 01e6 2370     		strb	r3, [r4]
ARM GAS  /tmp/cc6kLxup.s 			page 58


 165:./Src/application.c ****           accelleration_XY_Reset();
 2207              		.loc 1 165 0
 2208 01e8 FFF7FEFF 		bl	HAL_GetTick
 2209              	.LVL334:
 2210 01ec 6061     		str	r0, [r4, #20]
 166:./Src/application.c ****         }
 2211              		.loc 1 166 0
 2212 01ee FFF7FEFF 		bl	accelleration_XY_Reset
 2213              	.LVL335:
 2214 01f2 D1E7     		b	.L211
 2215              	.L191:
 179:./Src/application.c ****       app.axn = normalize_x(wii_JOYdati.ax);
 2216              		.loc 1 179 0
 2217 01f4 234D     		ldr	r5, .L258+12
 2218 01f6 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 2219 01f8 FFF7FEFF 		bl	normalize_y
 2220              	.LVL336:
 2221 01fc 204C     		ldr	r4, .L258+8
 2222 01fe A060     		str	r0, [r4, #8]	@ float
 180:./Src/application.c **** 
 2223              		.loc 1 180 0
 2224 0200 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 2225 0202 FFF7FEFF 		bl	normalize_x
 2226              	.LVL337:
 2227 0206 E060     		str	r0, [r4, #12]	@ float
 183:./Src/application.c ****       app.ayn = tempf1;
 2228              		.loc 1 183 0
 2229 0208 A068     		ldr	r0, [r4, #8]	@ float
 2230 020a FFF7FEFF 		bl	__aeabi_f2d
 2231              	.LVL338:
 2232 020e 1AA3     		adr	r3, .L258
 2233 0210 D3E90023 		ldrd	r2, [r3]
 2234 0214 FFF7FEFF 		bl	__aeabi_dmul
 2235              	.LVL339:
 2236 0218 FFF7FEFF 		bl	__aeabi_d2f
 2237              	.LVL340:
 184:./Src/application.c ****       tempf2 = app.axn * 0.90;
 2238              		.loc 1 184 0
 2239 021c A060     		str	r0, [r4, #8]	@ float
 185:./Src/application.c ****       //tempf2 = battery_dati.VBatt;
 2240              		.loc 1 185 0
 2241 021e E068     		ldr	r0, [r4, #12]	@ float
 2242              	.LVL341:
 2243 0220 FFF7FEFF 		bl	__aeabi_f2d
 2244              	.LVL342:
 2245 0224 14A3     		adr	r3, .L258
 2246 0226 D3E90023 		ldrd	r2, [r3]
 2247 022a FFF7FEFF 		bl	__aeabi_dmul
 2248              	.LVL343:
 2249 022e FFF7FEFF 		bl	__aeabi_d2f
 2250              	.LVL344:
 187:./Src/application.c **** 
 2251              		.loc 1 187 0
 2252 0232 E060     		str	r0, [r4, #12]	@ float
 189:./Src/application.c ****       app.axn = accellerationXHARD(app.axn);
 2253              		.loc 1 189 0
 2254 0234 A068     		ldr	r0, [r4, #8]	@ float
ARM GAS  /tmp/cc6kLxup.s 			page 59


 2255              	.LVL345:
 2256 0236 FFF7FEFF 		bl	accellerationYHARD
 2257              	.LVL346:
 2258 023a A060     		str	r0, [r4, #8]	@ float
 190:./Src/application.c **** 
 2259              		.loc 1 190 0
 2260 023c E068     		ldr	r0, [r4, #12]	@ float
 2261 023e FFF7FEFF 		bl	accellerationXHARD
 2262              	.LVL347:
 2263 0242 E060     		str	r0, [r4, #12]	@ float
 192:./Src/application.c ****       tempf2 = app.axn;
 2264              		.loc 1 192 0
 2265 0244 A568     		ldr	r5, [r4, #8]	@ float
 2266              	.LVL348:
 193:./Src/application.c ****       if(tempf1 < 0){
 2267              		.loc 1 193 0
 2268 0246 E468     		ldr	r4, [r4, #12]	@ float
 2269              	.LVL349:
 194:./Src/application.c ****         tempf1 = 0;
 2270              		.loc 1 194 0
 2271 0248 0021     		movs	r1, #0
 2272 024a 2846     		mov	r0, r5
 2273 024c FFF7FEFF 		bl	__aeabi_fcmplt
 2274              	.LVL350:
 2275 0250 80B9     		cbnz	r0, .L251
 2276              	.LVL351:
 2277              	.L212:
 197:./Src/application.c **** 
 2278              		.loc 1 197 0
 2279 0252 0F4B     		ldr	r3, .L258+24
 2280 0254 1A68     		ldr	r2, [r3]	@ float
 2281 0256 0123     		movs	r3, #1
 2282 0258 2146     		mov	r1, r4
 2283 025a 2846     		mov	r0, r5
 2284 025c FFF7FEFF 		bl	go_motor
 2285              	.LVL352:
 200:./Src/application.c ****           //MotorR_stop();
 2286              		.loc 1 200 0
 2287 0260 084B     		ldr	r3, .L258+12
 2288 0262 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2289 0264 DBB2     		uxtb	r3, r3
 2290 0266 012B     		cmp	r3, #1
 2291 0268 7FF44BAF 		bne	.L186
 204:./Src/application.c ****       }
 2292              		.loc 1 204 0
 2293 026c 044B     		ldr	r3, .L258+8
 2294 026e 0122     		movs	r2, #1
 2295 0270 1A70     		strb	r2, [r3]
 2296 0272 46E7     		b	.L186
 2297              	.L251:
 195:./Src/application.c ****       }
 2298              		.loc 1 195 0
 2299 0274 0025     		movs	r5, #0
 2300              	.LVL353:
 2301 0276 ECE7     		b	.L212
 2302              	.L259:
 2303              		.align	3
ARM GAS  /tmp/cc6kLxup.s 			page 60


 2304              	.L258:
 2305 0278 CDCCCCCC 		.word	3435973837
 2306 027c CCCCEC3F 		.word	1072483532
 2307 0280 00000000 		.word	app
 2308 0284 00000000 		.word	wii_JOYdati
 2309 0288 00004842 		.word	1112014848
 2310 028c 00000000 		.word	hiwdg
 2311 0290 00000000 		.word	battery_dati
 2312 0294 00000000 		.word	telemetry
 2313              	.LVL354:
 2314              	.L192:
 209:./Src/application.c ****       app.axn = normalize_x(wii_JOYdati.ax);
 2315              		.loc 1 209 0
 2316 0298 8E4D     		ldr	r5, .L260
 2317 029a 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 2318 029c FFF7FEFF 		bl	normalize_y
 2319              	.LVL355:
 2320 02a0 8D4C     		ldr	r4, .L260+4
 2321 02a2 A060     		str	r0, [r4, #8]	@ float
 210:./Src/application.c **** 
 2322              		.loc 1 210 0
 2323 02a4 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 2324 02a6 FFF7FEFF 		bl	normalize_x
 2325              	.LVL356:
 2326 02aa E060     		str	r0, [r4, #12]	@ float
 213:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 2327              		.loc 1 213 0
 2328 02ac A068     		ldr	r0, [r4, #8]	@ float
 2329              	.LVL357:
 214:./Src/application.c ****       app.ayn = scale_y(tempf1, tempf2);
 2330              		.loc 1 214 0
 2331 02ae 8B4D     		ldr	r5, .L260+8
 2332 02b0 2968     		ldr	r1, [r5]	@ float
 2333              	.LVL358:
 215:./Src/application.c ****       tempf1 = app.axn;
 2334              		.loc 1 215 0
 2335 02b2 FFF7FEFF 		bl	scale_y
 2336              	.LVL359:
 2337 02b6 A060     		str	r0, [r4, #8]	@ float
 216:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 2338              		.loc 1 216 0
 2339 02b8 E068     		ldr	r0, [r4, #12]	@ float
 2340              	.LVL360:
 217:./Src/application.c ****       app.axn = scale_x(tempf1, tempf2);
 2341              		.loc 1 217 0
 2342 02ba 2968     		ldr	r1, [r5]	@ float
 2343              	.LVL361:
 218:./Src/application.c **** 
 2344              		.loc 1 218 0
 2345 02bc FFF7FEFF 		bl	scale_x
 2346              	.LVL362:
 2347 02c0 E060     		str	r0, [r4, #12]	@ float
 220:./Src/application.c ****       app.axn = accellerationX(app.axn);
 2348              		.loc 1 220 0
 2349 02c2 A068     		ldr	r0, [r4, #8]	@ float
 2350 02c4 FFF7FEFF 		bl	accellerationY
 2351              	.LVL363:
ARM GAS  /tmp/cc6kLxup.s 			page 61


 2352 02c8 A060     		str	r0, [r4, #8]	@ float
 221:./Src/application.c **** 
 2353              		.loc 1 221 0
 2354 02ca E068     		ldr	r0, [r4, #12]	@ float
 2355 02cc FFF7FEFF 		bl	accellerationX
 2356              	.LVL364:
 2357 02d0 E060     		str	r0, [r4, #12]	@ float
 224:./Src/application.c ****         tempf1 = app.cruise_soft_run_nohand;
 2358              		.loc 1 224 0
 2359 02d2 A068     		ldr	r0, [r4, #8]	@ float
 2360 02d4 8249     		ldr	r1, .L260+12
 2361 02d6 FFF7FEFF 		bl	__aeabi_fcmpgt
 2362              	.LVL365:
 2363 02da C8B1     		cbz	r0, .L213
 225:./Src/application.c ****         if((app.ayn - 5.0) > tempf1){
 2364              		.loc 1 225 0
 2365 02dc A669     		ldr	r6, [r4, #24]	@ float
 2366              	.LVL366:
 226:./Src/application.c ****           app.cruise_soft_run_nohand = app.ayn - 5.0;
 2367              		.loc 1 226 0
 2368 02de A068     		ldr	r0, [r4, #8]	@ float
 2369 02e0 FFF7FEFF 		bl	__aeabi_f2d
 2370              	.LVL367:
 2371 02e4 0022     		movs	r2, #0
 2372 02e6 7F4B     		ldr	r3, .L260+16
 2373 02e8 FFF7FEFF 		bl	__aeabi_dsub
 2374              	.LVL368:
 2375 02ec 0446     		mov	r4, r0
 2376 02ee 0D46     		mov	r5, r1
 2377 02f0 3046     		mov	r0, r6
 2378 02f2 FFF7FEFF 		bl	__aeabi_f2d
 2379              	.LVL369:
 2380 02f6 0246     		mov	r2, r0
 2381 02f8 0B46     		mov	r3, r1
 2382 02fa 2046     		mov	r0, r4
 2383 02fc 2946     		mov	r1, r5
 2384 02fe FFF7FEFF 		bl	__aeabi_dcmpgt
 2385              	.LVL370:
 2386 0302 28B1     		cbz	r0, .L213
 227:./Src/application.c ****         }
 2387              		.loc 1 227 0
 2388 0304 744C     		ldr	r4, .L260+4
 2389 0306 A068     		ldr	r0, [r4, #8]	@ float
 2390 0308 7549     		ldr	r1, .L260+12
 2391 030a FFF7FEFF 		bl	__aeabi_fsub
 2392              	.LVL371:
 2393 030e A061     		str	r0, [r4, #24]	@ float
 2394              	.LVL372:
 2395              	.L213:
 231:./Src/application.c ****         //con time step
 2396              		.loc 1 231 0
 2397 0310 714B     		ldr	r3, .L260+4
 2398 0312 9868     		ldr	r0, [r3, #8]	@ float
 2399 0314 7449     		ldr	r1, .L260+20
 2400 0316 FFF7FEFF 		bl	__aeabi_fcmplt
 2401              	.LVL373:
 2402 031a 28B1     		cbz	r0, .L216
ARM GAS  /tmp/cc6kLxup.s 			page 62


 231:./Src/application.c ****         //con time step
 2403              		.loc 1 231 0 is_stmt 0 discriminator 1
 2404 031c 6E4B     		ldr	r3, .L260+4
 2405 031e 9868     		ldr	r0, [r3, #8]	@ float
 2406 0320 7249     		ldr	r1, .L260+24
 2407 0322 FFF7FEFF 		bl	__aeabi_fcmpgt
 2408              	.LVL374:
 2409 0326 C8B9     		cbnz	r0, .L252
 2410              	.L216:
 243:./Src/application.c ****         go_motor(0, 0, battery_dati.VBatt,0);
 2411              		.loc 1 243 0 is_stmt 1
 2412 0328 6B4B     		ldr	r3, .L260+4
 2413 032a 9868     		ldr	r0, [r3, #8]	@ float
 2414 032c 6F49     		ldr	r1, .L260+24
 2415 032e FFF7FEFF 		bl	__aeabi_fcmple
 2416              	.LVL375:
 2417 0332 0028     		cmp	r0, #0
 2418 0334 31D0     		beq	.L247
 244:./Src/application.c ****         MotorR_stop();
 2419              		.loc 1 244 0
 2420 0336 694B     		ldr	r3, .L260+8
 2421 0338 1A68     		ldr	r2, [r3]	@ float
 2422 033a 0024     		movs	r4, #0
 2423 033c 0023     		movs	r3, #0
 2424 033e 2146     		mov	r1, r4
 2425 0340 2046     		mov	r0, r4
 2426 0342 FFF7FEFF 		bl	go_motor
 2427              	.LVL376:
 245:./Src/application.c ****         MotorL_stop();
 2428              		.loc 1 245 0
 2429 0346 FFF7FEFF 		bl	MotorR_stop
 2430              	.LVL377:
 246:./Src/application.c ****         accelleration_XY_Reset();
 2431              		.loc 1 246 0
 2432 034a FFF7FEFF 		bl	MotorL_stop
 2433              	.LVL378:
 247:./Src/application.c ****         app.cruise_soft_run_nohand = 0.0;
 2434              		.loc 1 247 0
 2435 034e FFF7FEFF 		bl	accelleration_XY_Reset
 2436              	.LVL379:
 248:./Src/application.c ****         app.stato = app_init;
 2437              		.loc 1 248 0
 2438 0352 614B     		ldr	r3, .L260+4
 2439 0354 9C61     		str	r4, [r3, #24]	@ float
 249:./Src/application.c ****         break;
 2440              		.loc 1 249 0
 2441 0356 0022     		movs	r2, #0
 2442 0358 1A70     		strb	r2, [r3]
 250:./Src/application.c ****       }
 2443              		.loc 1 250 0
 2444 035a D2E6     		b	.L186
 2445              	.L252:
 233:./Src/application.c ****           tempf1 = app.ayn / 10.0;
 2446              		.loc 1 233 0
 2447 035c FFF7FEFF 		bl	HAL_GetTick
 2448              	.LVL380:
 2449 0360 5D4B     		ldr	r3, .L260+4
ARM GAS  /tmp/cc6kLxup.s 			page 63


 2450 0362 1B69     		ldr	r3, [r3, #16]
 2451 0364 C31A     		subs	r3, r0, r3
 2452 0366 FA2B     		cmp	r3, #250
 2453 0368 DED9     		bls	.L216
 234:./Src/application.c ****           app.cruise_soft_run_nohand = app.cruise_soft_run_nohand + tempf1;                //STEP D
 2454              		.loc 1 234 0
 2455 036a 5B4C     		ldr	r4, .L260+4
 2456 036c A068     		ldr	r0, [r4, #8]	@ float
 2457 036e 6049     		ldr	r1, .L260+28
 2458 0370 FFF7FEFF 		bl	__aeabi_fdiv
 2459              	.LVL381:
 235:./Src/application.c ****           if(app.cruise_soft_run_nohand < 0.0){
 2460              		.loc 1 235 0
 2461 0374 A369     		ldr	r3, [r4, #24]	@ float
 2462 0376 0146     		mov	r1, r0
 2463 0378 1846     		mov	r0, r3
 2464              	.LVL382:
 2465 037a FFF7FEFF 		bl	__aeabi_fadd
 2466              	.LVL383:
 2467 037e A061     		str	r0, [r4, #24]	@ float
 236:./Src/application.c ****             app.cruise_soft_run_nohand = 0.0;
 2468              		.loc 1 236 0
 2469 0380 A069     		ldr	r0, [r4, #24]	@ float
 2470 0382 0021     		movs	r1, #0
 2471 0384 FFF7FEFF 		bl	__aeabi_fcmplt
 2472              	.LVL384:
 2473 0388 20B9     		cbnz	r0, .L253
 2474              	.L219:
 239:./Src/application.c ****         }
 2475              		.loc 1 239 0
 2476 038a FFF7FEFF 		bl	HAL_GetTick
 2477              	.LVL385:
 2478 038e 524B     		ldr	r3, .L260+4
 2479 0390 1861     		str	r0, [r3, #16]
 2480 0392 C9E7     		b	.L216
 2481              	.L253:
 237:./Src/application.c ****           }
 2482              		.loc 1 237 0
 2483 0394 0022     		movs	r2, #0
 2484 0396 A261     		str	r2, [r4, #24]	@ float
 2485 0398 F7E7     		b	.L219
 2486              	.L247:
 252:./Src/application.c ****       tempf2 = app.axn;
 2487              		.loc 1 252 0
 2488 039a 4F4B     		ldr	r3, .L260+4
 2489 039c 9869     		ldr	r0, [r3, #24]	@ float
 2490              	.LVL386:
 253:./Src/application.c ****       go_motor(tempf1, tempf2, battery_dati.VBatt,0);
 2491              		.loc 1 253 0
 2492 039e D968     		ldr	r1, [r3, #12]	@ float
 2493              	.LVL387:
 254:./Src/application.c ****     break;
 2494              		.loc 1 254 0
 2495 03a0 4E4B     		ldr	r3, .L260+8
 2496 03a2 1A68     		ldr	r2, [r3]	@ float
 2497 03a4 0023     		movs	r3, #0
 2498 03a6 FFF7FEFF 		bl	go_motor
ARM GAS  /tmp/cc6kLxup.s 			page 64


 2499              	.LVL388:
 255:./Src/application.c **** 
 2500              		.loc 1 255 0
 2501 03aa AAE6     		b	.L186
 2502              	.L193:
 259:./Src/application.c ****         telemetry.dataREADY_JOYSTICK  = 0;
 2503              		.loc 1 259 0
 2504 03ac 514B     		ldr	r3, .L260+32
 2505 03ae 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 2506 03b0 53B1     		cbz	r3, .L223
 260:./Src/application.c ****         app.tAndroidAPP = HAL_GetTick();
 2507              		.loc 1 260 0
 2508 03b2 504C     		ldr	r4, .L260+32
 2509 03b4 0023     		movs	r3, #0
 2510 03b6 6375     		strb	r3, [r4, #21]
 261:./Src/application.c ****         if(telemetry.dataLast_Command == 'F'){
 2511              		.loc 1 261 0
 2512 03b8 FFF7FEFF 		bl	HAL_GetTick
 2513              	.LVL389:
 2514 03bc 464B     		ldr	r3, .L260+4
 2515 03be 5861     		str	r0, [r3, #20]
 262:./Src/application.c ****           MotorR_stop();
 2516              		.loc 1 262 0
 2517 03c0 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 2518 03c2 DBB2     		uxtb	r3, r3
 2519 03c4 462B     		cmp	r3, #70
 2520 03c6 56D0     		beq	.L254
 2521              	.L223:
 272:./Src/application.c ****         go_motor(0, 0, battery_dati.VBatt,0);
 2522              		.loc 1 272 0
 2523 03c8 FFF7FEFF 		bl	HAL_GetTick
 2524              	.LVL390:
 2525 03cc 424B     		ldr	r3, .L260+4
 2526 03ce 5B69     		ldr	r3, [r3, #20]
 2527 03d0 C31A     		subs	r3, r0, r3
 2528 03d2 B3F5FA7F 		cmp	r3, #500
 2529 03d6 5BD8     		bhi	.L255
 282:./Src/application.c ****       app.axn = (float)telemetry.joyx;
 2530              		.loc 1 282 0
 2531 03d8 464D     		ldr	r5, .L260+32
 2532 03da 688B     		ldrh	r0, [r5, #26]
 2533 03dc 00B2     		sxth	r0, r0
 2534 03de FFF7FEFF 		bl	__aeabi_i2f
 2535              	.LVL391:
 2536 03e2 3D4C     		ldr	r4, .L260+4
 2537 03e4 A060     		str	r0, [r4, #8]	@ float
 283:./Src/application.c ****       if(app.ayn > 300.0){
 2538              		.loc 1 283 0
 2539 03e6 288B     		ldrh	r0, [r5, #24]
 2540 03e8 00B2     		sxth	r0, r0
 2541 03ea FFF7FEFF 		bl	__aeabi_i2f
 2542              	.LVL392:
 2543 03ee E060     		str	r0, [r4, #12]	@ float
 284:./Src/application.c ****         app.ayn = 300.0;
 2544              		.loc 1 284 0
 2545 03f0 A068     		ldr	r0, [r4, #8]	@ float
 2546 03f2 4149     		ldr	r1, .L260+36
ARM GAS  /tmp/cc6kLxup.s 			page 65


 2547 03f4 FFF7FEFF 		bl	__aeabi_fcmpgt
 2548              	.LVL393:
 2549 03f8 08B1     		cbz	r0, .L225
 285:./Src/application.c ****       }
 2550              		.loc 1 285 0
 2551 03fa 3F4A     		ldr	r2, .L260+36
 2552 03fc A260     		str	r2, [r4, #8]	@ float
 2553              	.L225:
 287:./Src/application.c ****         app.axn = 300.0;
 2554              		.loc 1 287 0
 2555 03fe 364B     		ldr	r3, .L260+4
 2556 0400 D868     		ldr	r0, [r3, #12]	@ float
 2557 0402 3D49     		ldr	r1, .L260+36
 2558 0404 FFF7FEFF 		bl	__aeabi_fcmpgt
 2559              	.LVL394:
 2560 0408 10B1     		cbz	r0, .L227
 288:./Src/application.c ****       }
 2561              		.loc 1 288 0
 2562 040a 334B     		ldr	r3, .L260+4
 2563 040c 3A4A     		ldr	r2, .L260+36
 2564 040e DA60     		str	r2, [r3, #12]	@ float
 2565              	.L227:
 290:./Src/application.c ****         app.ayn = 0.0;
 2566              		.loc 1 290 0
 2567 0410 314B     		ldr	r3, .L260+4
 2568 0412 9868     		ldr	r0, [r3, #8]	@ float
 2569 0414 0021     		movs	r1, #0
 2570 0416 FFF7FEFF 		bl	__aeabi_fcmplt
 2571              	.LVL395:
 2572 041a 0028     		cmp	r0, #0
 2573 041c 49D1     		bne	.L256
 2574              	.L229:
 293:./Src/application.c ****         app.axn = 0.0;
 2575              		.loc 1 293 0
 2576 041e 2E4B     		ldr	r3, .L260+4
 2577 0420 D868     		ldr	r0, [r3, #12]	@ float
 2578 0422 0021     		movs	r1, #0
 2579 0424 FFF7FEFF 		bl	__aeabi_fcmplt
 2580              	.LVL396:
 2581 0428 0028     		cmp	r0, #0
 2582 042a 46D1     		bne	.L257
 2583              	.L231:
 297:./Src/application.c ****       app.axn = app.axn - 75.0;
 2584              		.loc 1 297 0
 2585 042c 2A4C     		ldr	r4, .L260+4
 2586 042e A068     		ldr	r0, [r4, #8]	@ float
 2587 0430 3249     		ldr	r1, .L260+40
 2588 0432 FFF7FEFF 		bl	__aeabi_fsub
 2589              	.LVL397:
 2590 0436 A060     		str	r0, [r4, #8]	@ float
 298:./Src/application.c **** 
 2591              		.loc 1 298 0
 2592 0438 E068     		ldr	r0, [r4, #12]	@ float
 2593 043a 3049     		ldr	r1, .L260+40
 2594 043c FFF7FEFF 		bl	__aeabi_fsub
 2595              	.LVL398:
 2596 0440 E060     		str	r0, [r4, #12]	@ float
ARM GAS  /tmp/cc6kLxup.s 			page 66


 301:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 2597              		.loc 1 301 0
 2598 0442 A068     		ldr	r0, [r4, #8]	@ float
 2599              	.LVL399:
 302:./Src/application.c ****       app.ayn = scale_y(tempf1, tempf2);
 2600              		.loc 1 302 0
 2601 0444 254D     		ldr	r5, .L260+8
 2602 0446 2968     		ldr	r1, [r5]	@ float
 2603              	.LVL400:
 303:./Src/application.c ****       tempf1 = app.axn;
 2604              		.loc 1 303 0
 2605 0448 FFF7FEFF 		bl	scale_y
 2606              	.LVL401:
 2607 044c A060     		str	r0, [r4, #8]	@ float
 304:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 2608              		.loc 1 304 0
 2609 044e E068     		ldr	r0, [r4, #12]	@ float
 2610              	.LVL402:
 305:./Src/application.c ****       app.axn = scale_x(tempf1, tempf2);
 2611              		.loc 1 305 0
 2612 0450 2968     		ldr	r1, [r5]	@ float
 2613              	.LVL403:
 306:./Src/application.c **** 
 2614              		.loc 1 306 0
 2615 0452 FFF7FEFF 		bl	scale_x
 2616              	.LVL404:
 2617 0456 E060     		str	r0, [r4, #12]	@ float
 308:./Src/application.c ****       app.axn = accellerationX(app.axn);
 2618              		.loc 1 308 0
 2619 0458 A068     		ldr	r0, [r4, #8]	@ float
 2620 045a FFF7FEFF 		bl	accellerationY
 2621              	.LVL405:
 2622 045e A060     		str	r0, [r4, #8]	@ float
 309:./Src/application.c ****       tempf1 = app.ayn;
 2623              		.loc 1 309 0
 2624 0460 E068     		ldr	r0, [r4, #12]	@ float
 2625 0462 FFF7FEFF 		bl	accellerationX
 2626              	.LVL406:
 2627 0466 E060     		str	r0, [r4, #12]	@ float
 310:./Src/application.c ****       tempf2 = app.axn;
 2628              		.loc 1 310 0
 2629 0468 A068     		ldr	r0, [r4, #8]	@ float
 2630              	.LVL407:
 311:./Src/application.c ****       go_motor(tempf1, tempf2, battery_dati.VBatt,0);
 2631              		.loc 1 311 0
 2632 046a E168     		ldr	r1, [r4, #12]	@ float
 2633              	.LVL408:
 312:./Src/application.c ****     break;
 2634              		.loc 1 312 0
 2635 046c 2A68     		ldr	r2, [r5]	@ float
 2636 046e 0023     		movs	r3, #0
 2637 0470 FFF7FEFF 		bl	go_motor
 2638              	.LVL409:
 313:./Src/application.c **** 
 2639              		.loc 1 313 0
 2640 0474 45E6     		b	.L186
 2641              	.L254:
ARM GAS  /tmp/cc6kLxup.s 			page 67


 263:./Src/application.c ****           MotorL_stop();
 2642              		.loc 1 263 0
 2643 0476 FFF7FEFF 		bl	MotorR_stop
 2644              	.LVL410:
 264:./Src/application.c ****           accelleration_XY_Reset();
 2645              		.loc 1 264 0
 2646 047a FFF7FEFF 		bl	MotorL_stop
 2647              	.LVL411:
 265:./Src/application.c ****           app.cruise_soft_run_nohand = 0.0;
 2648              		.loc 1 265 0
 2649 047e FFF7FEFF 		bl	accelleration_XY_Reset
 2650              	.LVL412:
 266:./Src/application.c ****           app.stato = app_init;
 2651              		.loc 1 266 0
 2652 0482 154A     		ldr	r2, .L260+4
 2653 0484 0023     		movs	r3, #0
 2654 0486 9361     		str	r3, [r2, #24]	@ float
 267:./Src/application.c ****           telemetry.dataLast_Command = 0;
 2655              		.loc 1 267 0
 2656 0488 0023     		movs	r3, #0
 2657 048a 1370     		strb	r3, [r2]
 268:./Src/application.c ****           break;
 2658              		.loc 1 268 0
 2659 048c A375     		strb	r3, [r4, #22]
 269:./Src/application.c ****         }
 2660              		.loc 1 269 0
 2661 048e 38E6     		b	.L186
 2662              	.L255:
 273:./Src/application.c ****         MotorR_stop();
 2663              		.loc 1 273 0
 2664 0490 124B     		ldr	r3, .L260+8
 2665 0492 1A68     		ldr	r2, [r3]	@ float
 2666 0494 0024     		movs	r4, #0
 2667 0496 0023     		movs	r3, #0
 2668 0498 2146     		mov	r1, r4
 2669 049a 2046     		mov	r0, r4
 2670 049c FFF7FEFF 		bl	go_motor
 2671              	.LVL413:
 274:./Src/application.c ****         MotorL_stop();
 2672              		.loc 1 274 0
 2673 04a0 FFF7FEFF 		bl	MotorR_stop
 2674              	.LVL414:
 275:./Src/application.c ****         app.cruise_soft_run_nohand = 0.0;
 2675              		.loc 1 275 0
 2676 04a4 FFF7FEFF 		bl	MotorL_stop
 2677              	.LVL415:
 276:./Src/application.c ****         app.stato = app_init;
 2678              		.loc 1 276 0
 2679 04a8 0B4B     		ldr	r3, .L260+4
 2680 04aa 9C61     		str	r4, [r3, #24]	@ float
 277:./Src/application.c ****         break;
 2681              		.loc 1 277 0
 2682 04ac 0022     		movs	r2, #0
 2683 04ae 1A70     		strb	r2, [r3]
 278:./Src/application.c ****       }
 2684              		.loc 1 278 0
 2685 04b0 27E6     		b	.L186
ARM GAS  /tmp/cc6kLxup.s 			page 68


 2686              	.L256:
 291:./Src/application.c ****       }
 2687              		.loc 1 291 0
 2688 04b2 094B     		ldr	r3, .L260+4
 2689 04b4 0022     		movs	r2, #0
 2690 04b6 9A60     		str	r2, [r3, #8]	@ float
 2691 04b8 B1E7     		b	.L229
 2692              	.L257:
 294:./Src/application.c ****       }
 2693              		.loc 1 294 0
 2694 04ba 074B     		ldr	r3, .L260+4
 2695 04bc 0022     		movs	r2, #0
 2696 04be DA60     		str	r2, [r3, #12]	@ float
 2697 04c0 B4E7     		b	.L231
 2698              	.L187:
 316:./Src/application.c ****         MotorL_stop();
 2699              		.loc 1 316 0
 2700 04c2 FFF7FEFF 		bl	MotorR_stop
 2701              	.LVL416:
 317:./Src/application.c ****         app.stato = app_init;
 2702              		.loc 1 317 0
 2703 04c6 FFF7FEFF 		bl	MotorL_stop
 2704              	.LVL417:
 318:./Src/application.c ****     break;
 2705              		.loc 1 318 0
 2706 04ca 034B     		ldr	r3, .L260+4
 2707 04cc 0022     		movs	r2, #0
 2708 04ce 1A70     		strb	r2, [r3]
 323:./Src/application.c **** 
 2709              		.loc 1 323 0
 2710 04d0 17E6     		b	.L186
 2711              	.L261:
 2712 04d2 00BF     		.align	2
 2713              	.L260:
 2714 04d4 00000000 		.word	wii_JOYdati
 2715 04d8 00000000 		.word	app
 2716 04dc 00000000 		.word	battery_dati
 2717 04e0 0000A040 		.word	1084227584
 2718 04e4 00001440 		.word	1075052544
 2719 04e8 0000A0C0 		.word	-1063256064
 2720 04ec 0000B8C1 		.word	-1044905984
 2721 04f0 00002041 		.word	1092616192
 2722 04f4 00000000 		.word	telemetry
 2723 04f8 00009643 		.word	1133903872
 2724 04fc 00009642 		.word	1117126656
 2725              		.cfi_endproc
 2726              	.LFE70:
 2728              		.global	Battery_power
 2729              		.comm	battery_dati,20,4
 2730              		.comm	app,72,4
 2731              		.section	.rodata.Battery_power,"a",%progbits
 2732              		.align	2
 2735              	Battery_power:
 2736 0000 00002042 		.word	1109393408
 2737 0004 9A99193F 		.word	1058642330
 2738 0008 00000000 		.space	32
 2738      00000000 
ARM GAS  /tmp/cc6kLxup.s 			page 69


 2738      00000000 
 2738      00000000 
 2738      00000000 
 2739 0028 00001842 		.word	1108869120
 2740 002c 9A99193F 		.word	1058642330
 2741 0030 00000000 		.space	32
 2741      00000000 
 2741      00000000 
 2741      00000000 
 2741      00000000 
 2742 0050 00001442 		.word	1108606976
 2743 0054 F6281C3F 		.word	1058810102
 2744 0058 00000000 		.space	32
 2744      00000000 
 2744      00000000 
 2744      00000000 
 2744      00000000 
 2745 0078 00001042 		.word	1108344832
 2746 007c 52B81E3F 		.word	1058977874
 2747 0080 00000000 		.space	32
 2747      00000000 
 2747      00000000 
 2747      00000000 
 2747      00000000 
 2748 00a0 00000C42 		.word	1108082688
 2749 00a4 6666263F 		.word	1059481190
 2750 00a8 00000000 		.space	32
 2750      00000000 
 2750      00000000 
 2750      00000000 
 2750      00000000 
 2751 00c8 00000842 		.word	1107820544
 2752 00cc 6666263F 		.word	1059481190
 2753 00d0 00000000 		.space	32
 2753      00000000 
 2753      00000000 
 2753      00000000 
 2753      00000000 
 2754 00f0 00000442 		.word	1107558400
 2755 00f4 1F852B3F 		.word	1059816735
 2756 00f8 00000000 		.space	32
 2756      00000000 
 2756      00000000 
 2756      00000000 
 2756      00000000 
 2757 0118 00000042 		.word	1107296256
 2758 011c 1F852B3F 		.word	1059816735
 2759 0120 00000000 		.space	32
 2759      00000000 
 2759      00000000 
 2759      00000000 
 2759      00000000 
 2760 0140 0000F841 		.word	1106771968
 2761 0144 1F852B3F 		.word	1059816735
 2762 0148 00000000 		.space	32
 2762      00000000 
 2762      00000000 
ARM GAS  /tmp/cc6kLxup.s 			page 70


 2762      00000000 
 2762      00000000 
 2763 0168 0000F041 		.word	1106247680
 2764 016c 1F852B3F 		.word	1059816735
 2765 0170 00000000 		.space	32
 2765      00000000 
 2765      00000000 
 2765      00000000 
 2765      00000000 
 2766              		.text
 2767              	.Letext0:
 2768              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2769              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2770              		.file 4 "./Drivers/CMSIS/Include/core_cm3.h"
 2771              		.file 5 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 2772              		.file 6 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 2773              		.file 7 "/usr/arm-none-eabi/include/sys/lock.h"
 2774              		.file 8 "/usr/arm-none-eabi/include/sys/_types.h"
 2775              		.file 9 "/usr/lib/gcc/arm-none-eabi/7.2.0/include/stddef.h"
 2776              		.file 10 "/usr/arm-none-eabi/include/sys/reent.h"
 2777              		.file 11 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2778              		.file 12 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_iwdg.h"
 2779              		.file 13 "./Inc/application.h"
 2780              		.file 14 "./Inc/i2c.h"
 2781              		.file 15 "./Inc/telemetry.h"
 2782              		.file 16 "/usr/arm-none-eabi/include/stdlib.h"
 2783              		.file 17 "./Inc/motor_R.h"
 2784              		.file 18 "./Inc/motor_L.h"
 2785              		.file 19 "./Inc/ADC_L.h"
 2786              		.file 20 "./Inc/ADC_R.h"
 2787              		.file 21 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 2788              		.file 22 "./Inc/varie.h"
ARM GAS  /tmp/cc6kLxup.s 			page 71


DEFINED SYMBOLS
                            *ABS*:0000000000000000 application.c
     /tmp/cc6kLxup.s:16     .text.GET_BatteryAverage:0000000000000000 $t
     /tmp/cc6kLxup.s:23     .text.GET_BatteryAverage:0000000000000000 GET_BatteryAverage
     /tmp/cc6kLxup.s:39     .text.GET_BatteryAverage:0000000000000008 $d
                            *COM*:0000000000000014 battery_dati
     /tmp/cc6kLxup.s:44     .text.TASK_BATTERY_LOW_VOLTAGE:0000000000000000 $t
     /tmp/cc6kLxup.s:51     .text.TASK_BATTERY_LOW_VOLTAGE:0000000000000000 TASK_BATTERY_LOW_VOLTAGE
     /tmp/cc6kLxup.s:88     .text.TASK_BATTERY_LOW_VOLTAGE:0000000000000024 $d
     /tmp/cc6kLxup.s:94     .text.applcation_init:0000000000000000 $t
     /tmp/cc6kLxup.s:101    .text.applcation_init:0000000000000000 applcation_init
     /tmp/cc6kLxup.s:150    .text.applcation_init:0000000000000030 $d
                            *COM*:0000000000000048 app
     /tmp/cc6kLxup.s:161    .text.normalize_y:0000000000000000 $t
     /tmp/cc6kLxup.s:168    .text.normalize_y:0000000000000000 normalize_y
     /tmp/cc6kLxup.s:229    .text.normalize_y:000000000000003c $d
     /tmp/cc6kLxup.s:236    .text.normalize_x:0000000000000000 $t
     /tmp/cc6kLxup.s:243    .text.normalize_x:0000000000000000 normalize_x
     /tmp/cc6kLxup.s:304    .text.normalize_x:000000000000003c $d
     /tmp/cc6kLxup.s:311    .text.get_powerMax:0000000000000000 $t
     /tmp/cc6kLxup.s:318    .text.get_powerMax:0000000000000000 get_powerMax
     /tmp/cc6kLxup.s:399    .text.get_powerMax:000000000000005c $d
     /tmp/cc6kLxup.s:415    .text.scale_y:0000000000000000 $t
     /tmp/cc6kLxup.s:422    .text.scale_y:0000000000000000 scale_y
     /tmp/cc6kLxup.s:450    .text.scale_x:0000000000000000 $t
     /tmp/cc6kLxup.s:457    .text.scale_x:0000000000000000 scale_x
     /tmp/cc6kLxup.s:485    .text.accelleration_XY_Reset:0000000000000000 $t
     /tmp/cc6kLxup.s:492    .text.accelleration_XY_Reset:0000000000000000 accelleration_XY_Reset
     /tmp/cc6kLxup.s:510    .text.accelleration_XY_Reset:000000000000000c $d
     /tmp/cc6kLxup.s:519    .text.accellerationY:0000000000000000 $t
     /tmp/cc6kLxup.s:526    .text.accellerationY:0000000000000000 accellerationY
     /tmp/cc6kLxup.s:611    .text.accellerationY:0000000000000070 $d
     /tmp/cc6kLxup.s:618    .text.accellerationX:0000000000000000 $t
     /tmp/cc6kLxup.s:625    .text.accellerationX:0000000000000000 accellerationX
     /tmp/cc6kLxup.s:710    .text.accellerationX:0000000000000070 $d
     /tmp/cc6kLxup.s:717    .text.accellerationYHARD:0000000000000000 $t
     /tmp/cc6kLxup.s:724    .text.accellerationYHARD:0000000000000000 accellerationYHARD
     /tmp/cc6kLxup.s:809    .text.accellerationYHARD:0000000000000070 $d
     /tmp/cc6kLxup.s:816    .text.accellerationXHARD:0000000000000000 $t
     /tmp/cc6kLxup.s:823    .text.accellerationXHARD:0000000000000000 accellerationXHARD
     /tmp/cc6kLxup.s:908    .text.accellerationXHARD:0000000000000070 $d
     /tmp/cc6kLxup.s:920    .text.Battery_TASK:0000000000000000 $t
     /tmp/cc6kLxup.s:927    .text.Battery_TASK:0000000000000000 Battery_TASK
     /tmp/cc6kLxup.s:1019   .text.Battery_TASK:0000000000000088 $d
     /tmp/cc6kLxup.s:1027   .text.WAIT_CHARGE_FINISH:0000000000000000 $t
     /tmp/cc6kLxup.s:1034   .text.WAIT_CHARGE_FINISH:0000000000000000 WAIT_CHARGE_FINISH
     /tmp/cc6kLxup.s:1136   .text.WAIT_CHARGE_FINISH:000000000000007c $d
     /tmp/cc6kLxup.s:1142   .text.Current_Motor_TASK:0000000000000000 $t
     /tmp/cc6kLxup.s:1149   .text.Current_Motor_TASK:0000000000000000 Current_Motor_TASK
     /tmp/cc6kLxup.s:1343   .text.Current_Motor_TASK:0000000000000130 $d
     /tmp/cc6kLxup.s:1354   .text.getMotorCurrentR:0000000000000000 $t
     /tmp/cc6kLxup.s:1361   .text.getMotorCurrentR:0000000000000000 getMotorCurrentR
     /tmp/cc6kLxup.s:1383   .text.getMotorCurrentL:0000000000000000 $t
     /tmp/cc6kLxup.s:1390   .text.getMotorCurrentL:0000000000000000 getMotorCurrentL
     /tmp/cc6kLxup.s:1417   .text.go_motor:0000000000000000 $t
     /tmp/cc6kLxup.s:1424   .text.go_motor:0000000000000000 go_motor
     /tmp/cc6kLxup.s:1820   .text.go_motor:0000000000000248 $d
ARM GAS  /tmp/cc6kLxup.s 			page 72


     /tmp/cc6kLxup.s:1832   .text.applcation_TASK:0000000000000000 $t
     /tmp/cc6kLxup.s:1839   .text.applcation_TASK:0000000000000000 applcation_TASK
     /tmp/cc6kLxup.s:1860   .text.applcation_TASK:0000000000000012 $d
     /tmp/cc6kLxup.s:1865   .text.applcation_TASK:000000000000001c $t
     /tmp/cc6kLxup.s:2305   .text.applcation_TASK:0000000000000278 $d
     /tmp/cc6kLxup.s:2316   .text.applcation_TASK:0000000000000298 $t
     /tmp/cc6kLxup.s:2714   .text.applcation_TASK:00000000000004d4 $d
     /tmp/cc6kLxup.s:2735   .rodata.Battery_power:0000000000000000 Battery_power
     /tmp/cc6kLxup.s:2732   .rodata.Battery_power:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
Buzzer_OneLongBeep
MotorR_stop
MotorL_stop
__aeabi_ui2f
__aeabi_fsub
__aeabi_fcmpge
__aeabi_fcmpgt
__aeabi_fcmplt
__aeabi_fmul
__aeabi_f2d
__aeabi_dadd
__aeabi_d2f
__aeabi_dsub
__aeabi_ui2d
__aeabi_ddiv
__aeabi_d2uiz
__aeabi_i2d
__aeabi_dmul
ADC_BATTERY
Led_Set
HAL_IWDG_Refresh
IS_Charge
HAL_Delay
hiwdg
ADC_MOTOR_LEFT
ADC_MOTOR_RIGHT
__aeabi_f2iz
__aeabi_i2f
__aeabi_fadd
__aeabi_fdiv
__aeabi_d2iz
MotorR_pwm
MotorL_pwm
__aeabi_dcmpgt
__aeabi_fcmple
WiiNunchuck_TASK
MotorR_start
MotorL_start
Buzzer_OneShortBeep
wii_JOYdati
telemetry
