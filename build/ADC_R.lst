ARM GAS  /tmp/cc8PJ7Av.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"ADC_R.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.ADC_R_init,"ax",%progbits
  16              		.align	1
  17              		.global	ADC_R_init
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	ADC_R_init:
  24              	.LFB66:
  25              		.file 1 "./Src/ADC_R.c"
   1:./Src/ADC_R.c **** #include "ADC_R.h"
   2:./Src/ADC_R.c **** 
   3:./Src/ADC_R.c **** 
   4:./Src/ADC_R.c **** ADC_HandleTypeDef hadc1;
   5:./Src/ADC_R.c **** DMA_HandleTypeDef hdma_adc1;
   6:./Src/ADC_R.c **** 
   7:./Src/ADC_R.c **** 
   8:./Src/ADC_R.c ****  volatile __IO uint16_t buffer[3];
   9:./Src/ADC_R.c ****  
  10:./Src/ADC_R.c **** volatile __IO struct ADC_Rdati adc_Rdati;
  11:./Src/ADC_R.c **** 
  12:./Src/ADC_R.c **** // ----------------------PUBLIC----------------------
  13:./Src/ADC_R.c **** void ADC_R_init(void){
  26              		.loc 1 13 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 16
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  35 0002 84B0     		sub	sp, sp, #16
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 24
  38              	.LBB2:
  14:./Src/ADC_R.c **** 
  15:./Src/ADC_R.c ****   ADC_ChannelConfTypeDef sConfig;
  16:./Src/ADC_R.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
  39              		.loc 1 16 0
  40 0004 244B     		ldr	r3, .L9
  41 0006 5A69     		ldr	r2, [r3, #20]
  42 0008 42F00102 		orr	r2, r2, #1
ARM GAS  /tmp/cc8PJ7Av.s 			page 2


  43 000c 5A61     		str	r2, [r3, #20]
  44 000e 5B69     		ldr	r3, [r3, #20]
  45 0010 03F00103 		and	r3, r3, #1
  46 0014 0093     		str	r3, [sp]
  47 0016 009B     		ldr	r3, [sp]
  48              	.LBE2:
  17:./Src/ADC_R.c ****   /* DMA interrupt init */
  18:./Src/ADC_R.c ****   /* DMA1_Channel1_IRQn interrupt configuration */
  19:./Src/ADC_R.c ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 2);
  49              		.loc 1 19 0
  50 0018 0222     		movs	r2, #2
  51 001a 0121     		movs	r1, #1
  52 001c 0B20     		movs	r0, #11
  53 001e FFF7FEFF 		bl	HAL_NVIC_SetPriority
  54              	.LVL0:
  20:./Src/ADC_R.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
  55              		.loc 1 20 0
  56 0022 0B20     		movs	r0, #11
  57 0024 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  58              	.LVL1:
  21:./Src/ADC_R.c ****   
  22:./Src/ADC_R.c ****   hadc1.Instance = ADC1;
  59              		.loc 1 22 0
  60 0028 1C48     		ldr	r0, .L9+4
  61 002a 1D4B     		ldr	r3, .L9+8
  62 002c 0360     		str	r3, [r0]
  23:./Src/ADC_R.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  63              		.loc 1 23 0
  64 002e 4FF48073 		mov	r3, #256
  65 0032 8360     		str	r3, [r0, #8]
  24:./Src/ADC_R.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
  66              		.loc 1 24 0
  67 0034 0023     		movs	r3, #0
  68 0036 C360     		str	r3, [r0, #12]
  25:./Src/ADC_R.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
  69              		.loc 1 25 0
  70 0038 4361     		str	r3, [r0, #20]
  26:./Src/ADC_R.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  71              		.loc 1 26 0
  72 003a 4FF46022 		mov	r2, #917504
  73 003e C261     		str	r2, [r0, #28]
  27:./Src/ADC_R.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  74              		.loc 1 27 0
  75 0040 4360     		str	r3, [r0, #4]
  28:./Src/ADC_R.c ****   hadc1.Init.NbrOfConversion = 2;
  76              		.loc 1 28 0
  77 0042 0223     		movs	r3, #2
  78 0044 0361     		str	r3, [r0, #16]
  29:./Src/ADC_R.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
  79              		.loc 1 29 0
  80 0046 FFF7FEFF 		bl	HAL_ADC_Init
  81              	.LVL2:
  82 004a E0B9     		cbnz	r0, .L6
  83              	.L2:
  30:./Src/ADC_R.c ****   {
  31:./Src/ADC_R.c ****     Error_Handler();
  32:./Src/ADC_R.c ****   }
ARM GAS  /tmp/cc8PJ7Av.s 			page 3


  33:./Src/ADC_R.c ****   /*
  34:./Src/ADC_R.c ****   sConfig.Channel = ADC_CHANNEL_10;
  35:./Src/ADC_R.c ****   sConfig.Rank = 1;
  36:./Src/ADC_R.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  37:./Src/ADC_R.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  38:./Src/ADC_R.c ****   {
  39:./Src/ADC_R.c ****     Error_Handler();
  40:./Src/ADC_R.c ****   }
  41:./Src/ADC_R.c **** */
  42:./Src/ADC_R.c ****     /**Configure Regular Channel 
  43:./Src/ADC_R.c ****     */
  44:./Src/ADC_R.c ****   sConfig.Channel = ADC_CHANNEL_11;
  84              		.loc 1 44 0
  85 004c 0B23     		movs	r3, #11
  86 004e 0193     		str	r3, [sp, #4]
  45:./Src/ADC_R.c ****   sConfig.Rank = 1;
  87              		.loc 1 45 0
  88 0050 0123     		movs	r3, #1
  89 0052 0293     		str	r3, [sp, #8]
  46:./Src/ADC_R.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  90              		.loc 1 46 0
  91 0054 01A9     		add	r1, sp, #4
  92 0056 1148     		ldr	r0, .L9+4
  93 0058 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
  94              	.LVL3:
  95 005c B0B9     		cbnz	r0, .L7
  96              	.L3:
  47:./Src/ADC_R.c ****   {
  48:./Src/ADC_R.c ****     Error_Handler();
  49:./Src/ADC_R.c ****   }
  50:./Src/ADC_R.c **** 
  51:./Src/ADC_R.c ****     /**Configure Regular Channel 
  52:./Src/ADC_R.c ****     */
  53:./Src/ADC_R.c ****   sConfig.Channel = ADC_CHANNEL_12;
  97              		.loc 1 53 0
  98 005e 0C23     		movs	r3, #12
  99 0060 0193     		str	r3, [sp, #4]
  54:./Src/ADC_R.c ****   sConfig.Rank = 2;
 100              		.loc 1 54 0
 101 0062 0223     		movs	r3, #2
 102 0064 0293     		str	r3, [sp, #8]
  55:./Src/ADC_R.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 103              		.loc 1 55 0
 104 0066 01A9     		add	r1, sp, #4
 105 0068 0C48     		ldr	r0, .L9+4
 106 006a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 107              	.LVL4:
 108 006e 80B9     		cbnz	r0, .L8
 109              	.L4:
  56:./Src/ADC_R.c ****   {
  57:./Src/ADC_R.c ****     Error_Handler();
  58:./Src/ADC_R.c ****   }  
  59:./Src/ADC_R.c ****   
  60:./Src/ADC_R.c ****   HAL_ADC_Start(&hadc1);
 110              		.loc 1 60 0
 111 0070 0A4C     		ldr	r4, .L9+4
 112 0072 2046     		mov	r0, r4
ARM GAS  /tmp/cc8PJ7Av.s 			page 4


 113 0074 FFF7FEFF 		bl	HAL_ADC_Start
 114              	.LVL5:
  61:./Src/ADC_R.c ****   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_Rdati.data, 2);
 115              		.loc 1 61 0
 116 0078 0222     		movs	r2, #2
 117 007a 0A49     		ldr	r1, .L9+12
 118 007c 2046     		mov	r0, r4
 119 007e FFF7FEFF 		bl	HAL_ADC_Start_DMA
 120              	.LVL6:
  62:./Src/ADC_R.c ****   
  63:./Src/ADC_R.c **** }
 121              		.loc 1 63 0
 122 0082 04B0     		add	sp, sp, #16
 123              	.LCFI2:
 124              		.cfi_remember_state
 125              		.cfi_def_cfa_offset 8
 126              		@ sp needed
 127 0084 10BD     		pop	{r4, pc}
 128              	.L6:
 129              	.LCFI3:
 130              		.cfi_restore_state
  31:./Src/ADC_R.c ****   }
 131              		.loc 1 31 0
 132 0086 FFF7FEFF 		bl	Error_Handler
 133              	.LVL7:
 134 008a DFE7     		b	.L2
 135              	.L7:
  48:./Src/ADC_R.c ****   }
 136              		.loc 1 48 0
 137 008c FFF7FEFF 		bl	Error_Handler
 138              	.LVL8:
 139 0090 E5E7     		b	.L3
 140              	.L8:
  57:./Src/ADC_R.c ****   }  
 141              		.loc 1 57 0
 142 0092 FFF7FEFF 		bl	Error_Handler
 143              	.LVL9:
 144 0096 EBE7     		b	.L4
 145              	.L10:
 146              		.align	2
 147              	.L9:
 148 0098 00100240 		.word	1073876992
 149 009c 00000000 		.word	hadc1
 150 00a0 00240140 		.word	1073816576
 151 00a4 00000000 		.word	adc_Rdati
 152              		.cfi_endproc
 153              	.LFE66:
 155              		.global	__aeabi_ui2f
 156              		.global	__aeabi_f2d
 157              		.global	__aeabi_dmul
 158              		.global	__aeabi_d2f
 159              		.section	.text.GET_BATTERY_VOLT,"ax",%progbits
 160              		.align	1
 161              		.global	GET_BATTERY_VOLT
 162              		.syntax unified
 163              		.thumb
 164              		.thumb_func
ARM GAS  /tmp/cc8PJ7Av.s 			page 5


 165              		.fpu softvfp
 167              	GET_BATTERY_VOLT:
 168              	.LFB67:
  64:./Src/ADC_R.c **** 
  65:./Src/ADC_R.c **** 
  66:./Src/ADC_R.c **** 
  67:./Src/ADC_R.c **** // ------------NORMALIZATE----------------
  68:./Src/ADC_R.c **** float GET_BATTERY_VOLT(void){
 169              		.loc 1 68 0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173 0000 10B5     		push	{r4, lr}
 174              	.LCFI4:
 175              		.cfi_def_cfa_offset 8
 176              		.cfi_offset 4, -8
 177              		.cfi_offset 14, -4
  69:./Src/ADC_R.c ****   HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);  
 178              		.loc 1 69 0
 179 0002 0B20     		movs	r0, #11
 180 0004 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 181              	.LVL10:
  70:./Src/ADC_R.c ****   uint16_t data = adc_Rdati.data[0];
 182              		.loc 1 70 0
 183 0008 0B4B     		ldr	r3, .L13+8
 184 000a 1C88     		ldrh	r4, [r3]
 185 000c A4B2     		uxth	r4, r4
 186              	.LVL11:
  71:./Src/ADC_R.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);  
 187              		.loc 1 71 0
 188 000e 0B20     		movs	r0, #11
 189 0010 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 190              	.LVL12:
  72:./Src/ADC_R.c ****   return (float)data * ADC_BATTERY_VOLT;
 191              		.loc 1 72 0
 192 0014 2046     		mov	r0, r4
 193 0016 FFF7FEFF 		bl	__aeabi_ui2f
 194              	.LVL13:
 195 001a FFF7FEFF 		bl	__aeabi_f2d
 196              	.LVL14:
 197 001e 04A3     		adr	r3, .L13
 198 0020 D3E90023 		ldrd	r2, [r3]
 199 0024 FFF7FEFF 		bl	__aeabi_dmul
 200              	.LVL15:
 201 0028 FFF7FEFF 		bl	__aeabi_d2f
 202              	.LVL16:
  73:./Src/ADC_R.c **** }
 203              		.loc 1 73 0
 204 002c 10BD     		pop	{r4, pc}
 205              	.LVL17:
 206              	.L14:
 207 002e 00BF     		.align	3
 208              	.L13:
 209 0030 F5E4E827 		.word	669574389
 210 0034 181C9B3F 		.word	1067129880
 211 0038 00000000 		.word	adc_Rdati
 212              		.cfi_endproc
ARM GAS  /tmp/cc8PJ7Av.s 			page 6


 213              	.LFE67:
 215              		.global	__aeabi_i2d
 216              		.section	.text.GET_MOTOR_R_AMP,"ax",%progbits
 217              		.align	1
 218              		.global	GET_MOTOR_R_AMP
 219              		.syntax unified
 220              		.thumb
 221              		.thumb_func
 222              		.fpu softvfp
 224              	GET_MOTOR_R_AMP:
 225              	.LFB68:
  74:./Src/ADC_R.c **** float GET_MOTOR_R_AMP(void){  
 226              		.loc 1 74 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230 0000 10B5     		push	{r4, lr}
 231              	.LCFI5:
 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 4, -8
 234              		.cfi_offset 14, -4
  75:./Src/ADC_R.c ****   HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);  
 235              		.loc 1 75 0
 236 0002 0B20     		movs	r0, #11
 237 0004 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 238              	.LVL18:
  76:./Src/ADC_R.c ****   uint16_t data = adc_Rdati.data[1];
 239              		.loc 1 76 0
 240 0008 0D4B     		ldr	r3, .L19+8
 241 000a 5C88     		ldrh	r4, [r3, #2]
 242 000c A4B2     		uxth	r4, r4
 243              	.LVL19:
  77:./Src/ADC_R.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);    
 244              		.loc 1 77 0
 245 000e 0B20     		movs	r0, #11
 246 0010 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 247              	.LVL20:
  78:./Src/ADC_R.c ****   if(data<ADC_MOTOR_R_CENTER){
 248              		.loc 1 78 0
 249 0014 40F26B73 		movw	r3, #1899
 250 0018 9C42     		cmp	r4, r3
 251 001a 0BD9     		bls	.L17
  79:./Src/ADC_R.c ****     return 0.0;
  80:./Src/ADC_R.c ****   }
  81:./Src/ADC_R.c ****   return (data - ADC_MOTOR_R_CENTER) * MOTOR_R_AMP_CONV_AMP;
 252              		.loc 1 81 0
 253 001c A4F26C70 		subw	r0, r4, #1900
 254 0020 FFF7FEFF 		bl	__aeabi_i2d
 255              	.LVL21:
 256 0024 04A3     		adr	r3, .L19
 257 0026 D3E90023 		ldrd	r2, [r3]
 258 002a FFF7FEFF 		bl	__aeabi_dmul
 259              	.LVL22:
 260 002e FFF7FEFF 		bl	__aeabi_d2f
 261              	.LVL23:
 262              	.L15:
  82:./Src/ADC_R.c **** }
ARM GAS  /tmp/cc8PJ7Av.s 			page 7


 263              		.loc 1 82 0
 264 0032 10BD     		pop	{r4, pc}
 265              	.LVL24:
 266              	.L17:
  79:./Src/ADC_R.c ****     return 0.0;
 267              		.loc 1 79 0
 268 0034 0020     		movs	r0, #0
 269 0036 FCE7     		b	.L15
 270              	.L20:
 271              		.align	3
 272              	.L19:
 273 0038 D2131C3D 		.word	1025250258
 274 003c C1D1933F 		.word	1066652097
 275 0040 00000000 		.word	adc_Rdati
 276              		.cfi_endproc
 277              	.LFE68:
 279              		.section	.text.ADC_MOTOR_RIGHT_IS_CONV,"ax",%progbits
 280              		.align	1
 281              		.global	ADC_MOTOR_RIGHT_IS_CONV
 282              		.syntax unified
 283              		.thumb
 284              		.thumb_func
 285              		.fpu softvfp
 287              	ADC_MOTOR_RIGHT_IS_CONV:
 288              	.LFB69:
  83:./Src/ADC_R.c **** // ------------RAW----------------
  84:./Src/ADC_R.c **** uint8_t ADC_MOTOR_RIGHT_IS_CONV(void){
 289              		.loc 1 84 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293 0000 10B5     		push	{r4, lr}
 294              	.LCFI6:
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 4, -8
 297              		.cfi_offset 14, -4
 298              	.LVL25:
  85:./Src/ADC_R.c ****   uint8_t data=0;
  86:./Src/ADC_R.c ****   HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);  
 299              		.loc 1 86 0
 300 0002 0B20     		movs	r0, #11
 301 0004 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 302              	.LVL26:
  87:./Src/ADC_R.c ****   data = adc_Rdati.convflag;
 303              		.loc 1 87 0
 304 0008 034B     		ldr	r3, .L23
 305 000a 9C79     		ldrb	r4, [r3, #6]	@ zero_extendqisi2
 306 000c E4B2     		uxtb	r4, r4
 307              	.LVL27:
  88:./Src/ADC_R.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);  
 308              		.loc 1 88 0
 309 000e 0B20     		movs	r0, #11
 310 0010 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 311              	.LVL28:
  89:./Src/ADC_R.c ****   return data;  
  90:./Src/ADC_R.c **** }
 312              		.loc 1 90 0
ARM GAS  /tmp/cc8PJ7Av.s 			page 8


 313 0014 2046     		mov	r0, r4
 314 0016 10BD     		pop	{r4, pc}
 315              	.LVL29:
 316              	.L24:
 317              		.align	2
 318              	.L23:
 319 0018 00000000 		.word	adc_Rdati
 320              		.cfi_endproc
 321              	.LFE69:
 323              		.section	.text.ADC_MOTOR_RIGHT,"ax",%progbits
 324              		.align	1
 325              		.global	ADC_MOTOR_RIGHT
 326              		.syntax unified
 327              		.thumb
 328              		.thumb_func
 329              		.fpu softvfp
 331              	ADC_MOTOR_RIGHT:
 332              	.LFB70:
  91:./Src/ADC_R.c **** 
  92:./Src/ADC_R.c **** uint16_t ADC_MOTOR_RIGHT(void){
 333              		.loc 1 92 0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 0
 336              		@ frame_needed = 0, uses_anonymous_args = 0
 337 0000 10B5     		push	{r4, lr}
 338              	.LCFI7:
 339              		.cfi_def_cfa_offset 8
 340              		.cfi_offset 4, -8
 341              		.cfi_offset 14, -4
 342              	.LVL30:
  93:./Src/ADC_R.c ****   uint16_t data=0;
  94:./Src/ADC_R.c ****   HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);  
 343              		.loc 1 94 0
 344 0002 0B20     		movs	r0, #11
 345 0004 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 346              	.LVL31:
  95:./Src/ADC_R.c ****   data = adc_Rdati.data[1];
 347              		.loc 1 95 0
 348 0008 034B     		ldr	r3, .L27
 349 000a 5C88     		ldrh	r4, [r3, #2]
 350 000c A4B2     		uxth	r4, r4
 351              	.LVL32:
  96:./Src/ADC_R.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);  
 352              		.loc 1 96 0
 353 000e 0B20     		movs	r0, #11
 354 0010 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 355              	.LVL33:
  97:./Src/ADC_R.c ****   return data;  
  98:./Src/ADC_R.c **** }
 356              		.loc 1 98 0
 357 0014 2046     		mov	r0, r4
 358 0016 10BD     		pop	{r4, pc}
 359              	.LVL34:
 360              	.L28:
 361              		.align	2
 362              	.L27:
 363 0018 00000000 		.word	adc_Rdati
ARM GAS  /tmp/cc8PJ7Av.s 			page 9


 364              		.cfi_endproc
 365              	.LFE70:
 367              		.section	.text.ADC_BATTERY,"ax",%progbits
 368              		.align	1
 369              		.global	ADC_BATTERY
 370              		.syntax unified
 371              		.thumb
 372              		.thumb_func
 373              		.fpu softvfp
 375              	ADC_BATTERY:
 376              	.LFB71:
  99:./Src/ADC_R.c **** uint16_t ADC_BATTERY(void){
 377              		.loc 1 99 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 0
 380              		@ frame_needed = 0, uses_anonymous_args = 0
 381 0000 10B5     		push	{r4, lr}
 382              	.LCFI8:
 383              		.cfi_def_cfa_offset 8
 384              		.cfi_offset 4, -8
 385              		.cfi_offset 14, -4
 386              	.LVL35:
 100:./Src/ADC_R.c ****   uint16_t data=0;
 101:./Src/ADC_R.c ****   HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);  
 387              		.loc 1 101 0
 388 0002 0B20     		movs	r0, #11
 389 0004 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 390              	.LVL36:
 102:./Src/ADC_R.c ****   data = adc_Rdati.data[0];
 391              		.loc 1 102 0
 392 0008 034B     		ldr	r3, .L31
 393 000a 1C88     		ldrh	r4, [r3]
 394 000c A4B2     		uxth	r4, r4
 395              	.LVL37:
 103:./Src/ADC_R.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);  
 396              		.loc 1 103 0
 397 000e 0B20     		movs	r0, #11
 398 0010 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 399              	.LVL38:
 104:./Src/ADC_R.c ****   return data;  
 105:./Src/ADC_R.c **** }
 400              		.loc 1 105 0
 401 0014 2046     		mov	r0, r4
 402 0016 10BD     		pop	{r4, pc}
 403              	.LVL39:
 404              	.L32:
 405              		.align	2
 406              	.L31:
 407 0018 00000000 		.word	adc_Rdati
 408              		.cfi_endproc
 409              	.LFE71:
 411              		.section	.text.ADC_R_ResetFlag,"ax",%progbits
 412              		.align	1
 413              		.global	ADC_R_ResetFlag
 414              		.syntax unified
 415              		.thumb
 416              		.thumb_func
ARM GAS  /tmp/cc8PJ7Av.s 			page 10


 417              		.fpu softvfp
 419              	ADC_R_ResetFlag:
 420              	.LFB72:
 106:./Src/ADC_R.c **** 
 107:./Src/ADC_R.c **** 
 108:./Src/ADC_R.c **** void ADC_R_ResetFlag(void){
 421              		.loc 1 108 0
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 0
 424              		@ frame_needed = 0, uses_anonymous_args = 0
 425 0000 08B5     		push	{r3, lr}
 426              	.LCFI9:
 427              		.cfi_def_cfa_offset 8
 428              		.cfi_offset 3, -8
 429              		.cfi_offset 14, -4
 109:./Src/ADC_R.c ****   HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);  
 430              		.loc 1 109 0
 431 0002 0B20     		movs	r0, #11
 432 0004 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 433              	.LVL40:
 110:./Src/ADC_R.c ****   adc_Rdati.convflag = 0;
 434              		.loc 1 110 0
 435 0008 034B     		ldr	r3, .L35
 436 000a 0022     		movs	r2, #0
 437 000c 9A71     		strb	r2, [r3, #6]
 111:./Src/ADC_R.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);  
 438              		.loc 1 111 0
 439 000e 0B20     		movs	r0, #11
 440 0010 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 441              	.LVL41:
 112:./Src/ADC_R.c **** }
 442              		.loc 1 112 0
 443 0014 08BD     		pop	{r3, pc}
 444              	.L36:
 445 0016 00BF     		.align	2
 446              	.L35:
 447 0018 00000000 		.word	adc_Rdati
 448              		.cfi_endproc
 449              	.LFE72:
 451              		.section	.text.ADC_R_callback,"ax",%progbits
 452              		.align	1
 453              		.global	ADC_R_callback
 454              		.syntax unified
 455              		.thumb
 456              		.thumb_func
 457              		.fpu softvfp
 459              	ADC_R_callback:
 460              	.LFB73:
 113:./Src/ADC_R.c **** 
 114:./Src/ADC_R.c **** // ----------------------PRIVATE----------------------
 115:./Src/ADC_R.c **** 
 116:./Src/ADC_R.c **** 
 117:./Src/ADC_R.c **** 
 118:./Src/ADC_R.c **** void ADC_R_callback(void){
 461              		.loc 1 118 0
 462              		.cfi_startproc
 463              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc8PJ7Av.s 			page 11


 464              		@ frame_needed = 0, uses_anonymous_args = 0
 465              		@ link register save eliminated.
 119:./Src/ADC_R.c ****   adc_Rdati.convflag = 1;
 466              		.loc 1 119 0
 467 0000 014B     		ldr	r3, .L38
 468 0002 0122     		movs	r2, #1
 469 0004 9A71     		strb	r2, [r3, #6]
 120:./Src/ADC_R.c **** }
 470              		.loc 1 120 0
 471 0006 7047     		bx	lr
 472              	.L39:
 473              		.align	2
 474              	.L38:
 475 0008 00000000 		.word	adc_Rdati
 476              		.cfi_endproc
 477              	.LFE73:
 479              		.comm	adc_Rdati,8,4
 480              		.comm	buffer,6,4
 481              		.comm	hdma_adc1,56,4
 482              		.comm	hadc1,48,4
 483              		.text
 484              	.Letext0:
 485              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 486              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 487              		.file 4 "./Drivers/CMSIS/Include/core_cm3.h"
 488              		.file 5 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 489              		.file 6 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 490              		.file 7 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 491              		.file 8 "/usr/arm-none-eabi/include/sys/lock.h"
 492              		.file 9 "/usr/arm-none-eabi/include/sys/_types.h"
 493              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.2.0/include/stddef.h"
 494              		.file 11 "/usr/arm-none-eabi/include/sys/reent.h"
 495              		.file 12 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 496              		.file 13 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 497              		.file 14 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 498              		.file 15 "./Inc/ADC_R.h"
 499              		.file 16 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
ARM GAS  /tmp/cc8PJ7Av.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ADC_R.c
     /tmp/cc8PJ7Av.s:16     .text.ADC_R_init:0000000000000000 $t
     /tmp/cc8PJ7Av.s:23     .text.ADC_R_init:0000000000000000 ADC_R_init
     /tmp/cc8PJ7Av.s:148    .text.ADC_R_init:0000000000000098 $d
                            *COM*:0000000000000030 hadc1
                            *COM*:0000000000000008 adc_Rdati
     /tmp/cc8PJ7Av.s:160    .text.GET_BATTERY_VOLT:0000000000000000 $t
     /tmp/cc8PJ7Av.s:167    .text.GET_BATTERY_VOLT:0000000000000000 GET_BATTERY_VOLT
     /tmp/cc8PJ7Av.s:209    .text.GET_BATTERY_VOLT:0000000000000030 $d
     /tmp/cc8PJ7Av.s:217    .text.GET_MOTOR_R_AMP:0000000000000000 $t
     /tmp/cc8PJ7Av.s:224    .text.GET_MOTOR_R_AMP:0000000000000000 GET_MOTOR_R_AMP
     /tmp/cc8PJ7Av.s:273    .text.GET_MOTOR_R_AMP:0000000000000038 $d
     /tmp/cc8PJ7Av.s:280    .text.ADC_MOTOR_RIGHT_IS_CONV:0000000000000000 $t
     /tmp/cc8PJ7Av.s:287    .text.ADC_MOTOR_RIGHT_IS_CONV:0000000000000000 ADC_MOTOR_RIGHT_IS_CONV
     /tmp/cc8PJ7Av.s:319    .text.ADC_MOTOR_RIGHT_IS_CONV:0000000000000018 $d
     /tmp/cc8PJ7Av.s:324    .text.ADC_MOTOR_RIGHT:0000000000000000 $t
     /tmp/cc8PJ7Av.s:331    .text.ADC_MOTOR_RIGHT:0000000000000000 ADC_MOTOR_RIGHT
     /tmp/cc8PJ7Av.s:363    .text.ADC_MOTOR_RIGHT:0000000000000018 $d
     /tmp/cc8PJ7Av.s:368    .text.ADC_BATTERY:0000000000000000 $t
     /tmp/cc8PJ7Av.s:375    .text.ADC_BATTERY:0000000000000000 ADC_BATTERY
     /tmp/cc8PJ7Av.s:407    .text.ADC_BATTERY:0000000000000018 $d
     /tmp/cc8PJ7Av.s:412    .text.ADC_R_ResetFlag:0000000000000000 $t
     /tmp/cc8PJ7Av.s:419    .text.ADC_R_ResetFlag:0000000000000000 ADC_R_ResetFlag
     /tmp/cc8PJ7Av.s:447    .text.ADC_R_ResetFlag:0000000000000018 $d
     /tmp/cc8PJ7Av.s:452    .text.ADC_R_callback:0000000000000000 $t
     /tmp/cc8PJ7Av.s:459    .text.ADC_R_callback:0000000000000000 ADC_R_callback
     /tmp/cc8PJ7Av.s:475    .text.ADC_R_callback:0000000000000008 $d
                            *COM*:0000000000000006 buffer
                            *COM*:0000000000000038 hdma_adc1
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_ADC_Start
HAL_ADC_Start_DMA
Error_Handler
__aeabi_ui2f
__aeabi_f2d
__aeabi_dmul
__aeabi_d2f
HAL_NVIC_DisableIRQ
__aeabi_i2d
